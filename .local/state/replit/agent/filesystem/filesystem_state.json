{"file_contents":{"ADMIN_CREDENTIALS.md":{"content":"# Admin Panel Login Credentials\n\n## Access the Admin Panel\n\nVisit: [/admin/login](http://localhost:5001/admin/login)\n\n## Login Credentials\n\n**Username:** `admin`\n**Password:** `password`\n\n## Features Available\n\n1. **Dashboard** - Overview of all restaurants and statistics\n2. **Restaurant Management** - Add, edit, and delete restaurants\n3. **Menu Management** - Manage menu items by categories:\n   - Starters\n   - Main Course\n   - Desserts\n   - Beverages\n\n## Database Status\n\nCurrently using fallback authentication system since MongoDB Atlas requires IP whitelisting.\n\nTo enable full MongoDB functionality:\n\n1. Go to MongoDB Atlas Dashboard\n2. Navigate to Network Access\n3. Add current IP address to whitelist (or add 0.0.0.0/0 for all IPs)\n4. Restart the application\n\n## Admin Panel Routes\n\n- `/admin/login` - Admin login page\n- `/admin/dashboard` - Main dashboard\n- `/admin/restaurants/new` - Add new restaurant\n- `/admin/restaurants/:id/edit` - Edit restaurant\n- `/admin/restaurants/:id/menu` - Manage restaurant menu\n","size_bytes":1023},"clear-db.js":{"content":"// Instead of clearing DB, let me fix the existing restaurants by updating their customTypes\nimport mongoose from 'mongoose';\n\nasync function fixExistingRestaurants() {\n  try {\n    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/restaurant-management';\n    await mongoose.connect(mongoUri);\n    console.log('Connected to database');\n    \n    // Update all restaurants to have empty customTypes so they get extracted dynamically\n    const result = await mongoose.connection.db.collection('restaurants').updateMany(\n      {},\n      { $set: { customTypes: [] } }\n    );\n    \n    console.log(`Updated ${result.modifiedCount} restaurants to clear customTypes`);\n    console.log('Now the frontend will extract categories dynamically from menu items');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Error:', error);\n    process.exit(1);\n  }\n}\n\nfixExistingRestaurants();","size_bytes":904},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"fix-categories.js":{"content":"// Updated auto-update mechanism is now in place in the backend","size_bytes":63},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a comprehensive restaurant management admin panel system called \"Airavata Technologies Restaurant Management System\". The application is designed for restaurant administrators to manage multiple restaurants and their menus efficiently.\n\n**Key Features:**\n- **Admin Panel**: Full restaurant management system with MongoDB integration for managing multiple restaurants and their menus\n- **Light Theme**: Clean, professional UI with white and blue colors for business applications\n- **Multi-Restaurant Support**: Each restaurant can have its own MongoDB URI for dynamic database connections\n\n## Recent Changes (January 2025)\n\n- **Customer-facing App Removed**: Removed Maharaja Feast customer-facing application to focus on admin-only system\n- **Admin-Only System**: Streamlined to pure restaurant management system for business users\n- **MongoDB Integration**: Connected to MongoDB Atlas database for persistent data storage\n- **Light Theme**: Professional light theme with white and blue colors throughout\n- **Restaurant Management**: Full CRUD operations with MongoDB URI support for dynamic database connections\n- **Menu Management**: Category-based menu item management with vegetarian indicators\n- **Authentication**: JWT-based admin authentication with bcrypt password hashing and fallback system\n- **Dynamic Categories**: Restaurant-specific menu categories and custom attributes\n- **Image Management**: Image upload functionality for restaurants and menu items\n- **Performance Optimization**: Optimized authentication and database operations\n- **Replit Migration**: Successfully migrated from Replit Agent to Replit environment with proper security practices\n- **UI Fixes**: Fixed double rupees symbol display in menu items and improved edit form autofilling\n- **Dynamic Menu System**: Fully adaptive menu system that analyzes any MongoDB database structure\n- **Automatic Category Extraction**: System automatically extracts menu categories from custom MongoDB databases\n- **Smart Collection Detection**: Automatically detects menu-related collections in any database structure\n- **Field Mapping**: Maps various field names (name/title, price/cost, description/desc) to consistent format\n- **Dynamic CRUD Operations**: Full create, read, update, delete operations work with any database structure\n- **Migration to Replit (January 14, 2025)**: Successfully migrated from Replit Agent with security improvements and performance optimization\n- **Security Hardening**: Removed hardcoded credentials, implemented proper JWT authentication, added timeout protection\n- **Performance Fixes**: Reduced database timeouts from 10s to 1s, added graceful fallbacks, fixed ObjectId compatibility issues\n- **Dynamic Category System (January 14, 2025)**: Fully implemented dynamic category extraction from any MongoDB URI - system now automatically detects and maps categories like \"starters\" → \"Starters\", \"mains\" → \"Main Course\", \"drinks\" → \"Beverages\", etc. Added refresh categories functionality with visual category display in UI\n- **Replit Environment Setup (January 14, 2025)**: Completed migration to Replit environment with proper MongoDB Atlas connection, dotenv configuration, and PostgreSQL database setup for full compatibility\n- **MongoDB Integration Complete (January 15, 2025)**: Successfully connected to user's MongoDB Atlas database (DigitalMenuQR) with proper authentication and data structure alignment. Updated menu item schema to match exact MongoDB format with 'veg' field instead of 'isVeg', implemented proper field mapping for all CRUD operations, and ensured all menu items follow the exact structure from the database screenshot\n- **UI/Layout Fixes (January 14, 2025)**: Fixed restaurant card action button layout using flexbox with proper spacing and responsive design. Resolved authentication issues causing JSON parsing errors in Admin Settings panel\n- **QR Code Integration (January 14, 2025)**: Added optional website field to restaurant form with automatic QR code generation using qrcode library. QR codes are displayed in restaurant dashboard and stored in database. When scanned, QR codes redirect to restaurant websites\n- **QR Code Modal & Admin Settings (January 14, 2025)**: Created QR code popup modal with zoomed view for easier scanning and clickable website links. Added comprehensive admin settings panel with profile management, theme customization (6 color themes), security settings, and system configuration options\n- **Admin Settings Complete Implementation (January 14, 2025)**: Fixed all admin settings functionality including password change capability for fallback admin, global theme context that applies to all pages including login, dark mode implementation, security tab save button, functional Export Database feature, and View System Logs functionality. All admin settings now persist correctly during session with proper fallback storage system\n- **Replit Migration Complete (January 15, 2025)**: Successfully migrated restaurant management system from Replit Agent to Replit environment with MongoDB Atlas integration, proper environment configuration, PostgreSQL database setup, and fixed restaurant update route error handling with fallback mechanisms for robust operation\n- **Admin Password Change Fix (January 15, 2025)**: Fixed admin settings password change functionality to properly validate current password against stored fallback password instead of hardcoded value, enabling correct password updates and validation flow\n- **Collection-Based Category System (January 15, 2025)**: Completely restructured menu system to fetch categories from MongoDB collection names instead of menu items. Each collection (drinks, starters, desserts, etc.) becomes a category, and menu items are fetched per collection. Added new API endpoint for category-specific menu fetching using exact collection names without any mapping - categories are strictly limited to only the collection names that exist in the database. Fixed menu item creation and editing to save items in the correct collection based on their category, including support for empty collections like \"chefspecial\" and \"maincourse\"\n- **MongoDB Atlas Integration Complete (January 15, 2025)**: Successfully migrated project from Replit Agent to Replit environment with direct MongoDB Atlas connection using provided MONGODB_URI. Updated all menu item schemas to match exact MongoDB document structure with fields: _id, name, description, price, category, isVeg, image, restaurantId, isAvailable, createdAt, updatedAt, __v. System now properly handles 9 collections (bread, chefspecial, combos, desserts, drinks, maincourse, ricebiryani, soups, starters) with 18 total menu items from maharajafeast database\n- **Vegetarian Field Standardization (January 15, 2025)**: Completed migration to use only `isVeg` field in MongoDB database. Removed duplicate `veg` field to prevent confusion and maintain data consistency. System now stores only `isVeg: false` for non-vegetarian items and `isVeg: true` for vegetarian items. Maintained backward compatibility for reading existing records that may have the old `veg` field. Fixed vegetarian/non-vegetarian toggle functionality in admin interface\n- **Bulk Menu Import Feature (January 15, 2025)**: Added comprehensive Excel-based bulk menu import functionality. Features include: downloadable Excel template with restaurant-specific categories, file upload with validation, batch processing with progress tracking, detailed error reporting, and automatic data mapping. Templates include sample data and category reference sheets. Supports all menu item fields including vegetarian status, availability, and custom restaurant categories. Integrated seamlessly with existing menu management system\n- **Local Image Upload Feature (January 15, 2025)**: Added local image upload functionality for menu items. Users can now upload images directly from their computer instead of requiring image URLs. Features include: file type validation (images only), 1MB size limit, image preview functionality, remove image option, automatic image serving through Express static middleware, and unique filename generation. Images are stored in uploads/ directory and served at /uploads/ path. System supports both local upload and URL input with dynamic switching. Fixed ES module compatibility issues for proper file handling\n- **Bulk Import Category Matching Fix (January 15, 2025)**: Resolved critical issue where bulk import was placing menu items in incorrect categories due to loose category matching. Implemented strict validation in fetchMenuItemsFromCustomDB function to only return items where category field exactly matches collection name. Fixed import logic to use exact collection names (rice → rice, ricewithgravy → ricewithgravy, etc.) without any name transformations. System now correctly places imported items in their designated collections preventing cross-category contamination. Tested and verified with rice, noodle, ricewithgravy, and potrice categories\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUI/UX Preference: Clean, light theme with white and blue colors, professional design for business applications.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite for fast development and building\n- **Styling**: Tailwind CSS with custom royal theme variables\n- **UI Components**: Radix UI primitives with shadcn/ui components\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Animations**: Framer Motion for smooth transitions and interactions\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM\n- **Session Storage**: PostgreSQL-based sessions using connect-pg-simple\n- **API**: RESTful API with JSON responses\n\n### Key Design Decisions\n1. **Monorepo Structure**: Client, server, and shared code in one repository for easier development\n2. **TypeScript Throughout**: Full type safety across frontend, backend, and shared schemas\n3. **Component-Based UI**: Reusable components following shadcn/ui patterns\n4. **Premium Royal Theme**: Enhanced luxury branding with sophisticated animations, premium gradients, and multi-layered visual effects\n5. **Advanced Animation System**: Framer Motion with custom keyframes for premium user experience\n\n## Key Components\n\n### Database Schema (shared/schema.ts)\n- **Menu Items**: Products with name, description, price, category, veg/non-veg status, and images\n- **Cart Items**: User's selected items with quantities\n- **Users**: Basic user authentication schema (prepared for future use)\n\n### Frontend Components\n- **Admin Login**: Secure authentication page for administrators\n- **Admin Dashboard**: Overview of restaurants with statistics and management controls\n- **Restaurant Form**: Create and edit restaurant information with MongoDB URI support\n- **Menu Management**: Category-based menu item management with vegetarian indicators\n- **UI Components**: Complete shadcn/ui component library with light theme styling\n\n### Backend Routes\n- **Admin Authentication**: JWT-based login and registration system\n- **Restaurant Management**: CRUD operations for restaurant information\n- **Menu Management**: CRUD operations for menu items within restaurants\n- **Error Handling**: Centralized error handling middleware with fallback authentication\n\n## Data Flow\n\n1. **Admin Authentication**: Secure login with JWT tokens and fallback system\n2. **Restaurant Management**: CRUD operations for restaurant data with MongoDB integration\n3. **Menu Management**: Category-based menu item management with dynamic categories\n4. **Image Handling**: Upload and display functionality for restaurant and menu item images\n5. **State Management**: TanStack Query handles caching and synchronization for admin operations\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Framework**: React, React DOM\n- **State Management**: TanStack React Query\n- **Styling**: Tailwind CSS, Radix UI primitives\n- **Animations**: Framer Motion\n- **Forms**: React Hook Form with Zod validation\n- **Routing**: Wouter\n- **Utilities**: clsx, class-variance-authority\n\n### Backend Dependencies\n- **Server**: Express.js\n- **Database**: Drizzle ORM with @neondatabase/serverless\n- **Validation**: Zod schemas\n- **Session Management**: connect-pg-simple\n- **Development**: tsx for TypeScript execution\n\n### Development Tools\n- **Build**: Vite, esbuild\n- **Database**: Drizzle Kit for migrations\n- **Linting**: TypeScript compiler checks\n- **Replit Integration**: Cartographer and error overlay plugins\n\n## Deployment Strategy\n\n### Development\n- **Dev Server**: `npm run dev` runs both frontend (Vite) and backend (tsx)\n- **Database**: Uses Neon PostgreSQL database via DATABASE_URL environment variable\n- **Hot Reload**: Vite HMR for frontend, tsx watch mode for backend\n\n### Production\n- **Build Process**: \n  1. `vite build` compiles frontend to `dist/public`\n  2. `esbuild` bundles backend to `dist/index.js`\n- **Deployment**: Single Node.js process serving both static files and API\n- **Database**: Production PostgreSQL database required\n\n### Configuration\n- **Environment Variables**: DATABASE_URL for database connection\n- **Static Files**: Express serves built frontend from `dist/public`\n- **API Routes**: Backend handles `/api/*` routes, frontend handles client-side routing\n\nThe application follows a traditional client-server architecture with a clear separation between frontend and backend, unified by shared TypeScript schemas and a luxurious royal theme throughout the user experience.","size_bytes":13780},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/fallback-auth.ts":{"content":"import bcrypt from \"bcryptjs\";\n\n// Fallback admin credentials when MongoDB is not available\nconst FALLBACK_ADMIN = {\n  id: \"admin-001\",\n  username: \"admin\",\n  email: \"admin@example.com\",\n  password: \"$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi\", // password\n  role: \"admin\"\n};\n\n// In-memory storage for fallback admin settings\nlet fallbackSettings = {\n  theme: \"blue\",\n  darkMode: false,\n  compactMode: false,\n  emailNotifications: true,\n  sessionTimeout: 30,\n  twoFactorEnabled: false,\n  loginAlerts: true,\n  autoBackup: true,\n  maxRestaurants: 10,\n};\n\n// In-memory storage for fallback admin profile\nlet fallbackProfile = {\n  _id: \"admin-001\",\n  username: \"admin\",\n  email: \"admin@example.com\",\n  role: \"admin\"\n};\n\n// In-memory storage for fallback admin password\nlet fallbackPassword = \"password\";\n\nexport async function validateAdminCredentials(username: string, password: string) {\n  // Fast validation without database timeout\n  if (username === fallbackProfile.username && password === fallbackPassword) {\n    return {\n      id: fallbackProfile._id,\n      username: fallbackProfile.username,\n      email: fallbackProfile.email,\n      role: fallbackProfile.role\n    };\n  }\n  return null;\n}\n\nexport function getFallbackAdminSettings() {\n  return { ...fallbackSettings };\n}\n\nexport function updateFallbackAdminSettings(newSettings: any) {\n  fallbackSettings = { ...fallbackSettings, ...newSettings };\n  return { ...fallbackSettings };\n}\n\nexport function getFallbackAdminProfile() {\n  return { ...fallbackProfile };\n}\n\nexport function updateFallbackAdminProfile(newProfile: any) {\n  fallbackProfile = { ...fallbackProfile, ...newProfile };\n  return { ...fallbackProfile };\n}\n\nexport function updateFallbackAdminPassword(newPassword: string) {\n  fallbackPassword = newPassword;\n  return true;\n}\n\nexport function getCurrentFallbackPassword() {\n  return fallbackPassword;\n}\n\nexport const fallbackCredentials = {\n  username: \"admin\",\n  password: \"password\"\n};","size_bytes":1975},"server/index.ts":{"content":"import dotenv from \"dotenv\";\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\n\nconst execAsync = promisify(exec);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Function to kill process using a specific port (Linux compatible)\nasync function killPortProcess(port: number): Promise<void> {\n  try {\n    log(`🔍 Checking if port ${port} is in use...`);\n    \n    // Find process using the port (Linux compatible)\n    try {\n      const { stdout } = await execAsync(`lsof -ti:${port}`);\n      \n      if (stdout.trim()) {\n        const pids = stdout.trim().split('\\n').filter(pid => pid.trim());\n        \n        if (pids.length > 0) {\n          log(`⚡ Found ${pids.length} process(es) using port ${port}. Killing them...`);\n          \n          for (const pid of pids) {\n            try {\n              await execAsync(`kill -9 ${pid.trim()}`);\n              log(`✅ Killed process with PID ${pid.trim()}`);\n            } catch (error) {\n              log(`⚠️  Could not kill process ${pid.trim()}: ${error}`);\n            }\n          }\n          \n          // Wait a moment for processes to fully terminate\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      } else {\n        log(`✅ Port ${port} is available`);\n      }\n    } catch (lsofError) {\n      // Fallback: try netstat for Linux\n      try {\n        const { stdout } = await execAsync(`netstat -tlnp | grep :${port}`);\n        if (stdout.trim()) {\n          log(`⚡ Port ${port} appears to be in use (netstat check)`);\n        } else {\n          log(`✅ Port ${port} is available (netstat check)`);\n        }\n      } catch (netstatError) {\n        log(`⚠️  Could not check port ${port} with lsof or netstat, continuing...`);\n      }\n    }\n  } catch (error) {\n    log(`⚠️  Error checking port ${port}: ${error}`);\n  }\n}\n\n// Function to check if port is still in use (Linux compatible)\nasync function isPortInUse(port: number): Promise<boolean> {\n  try {\n    const { stdout } = await execAsync(`lsof -ti:${port}`);\n    return stdout.trim().length > 0;\n  } catch {\n    // Fallback to netstat\n    try {\n      const { stdout } = await execAsync(`netstat -tlnp | grep :${port}`);\n      return stdout.trim().length > 0;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Simplified server startup for Replit environment\nasync function startServer(port: number): Promise<void> {\n  try {\n    log(`🚀 Starting server on port ${port}`);\n    \n    // Add static file serving for uploads\n    app.use(\"/uploads\", express.static(\"uploads\"));\n    \n    // Set up routes\n    const server = await registerRoutes(app);\n\n    // Error handling middleware\n    app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n      const status = err.status || err.statusCode || 500;\n      const message = err.message || \"Internal Server Error\";\n      res.status(status).json({ message });\n      console.error(err);\n    });\n\n    // Setup vite or static serving\n    if (app.get(\"env\") === \"development\") {\n      await setupVite(app, server);\n    } else {\n      serveStatic(app);\n    }\n\n    // Start the server\n    server.listen(port, \"0.0.0.0\", () => {\n      log(`✅ Server successfully started on port ${port}`);\n    });\n    \n  } catch (error) {\n    log(`❌ Failed to start server: ${error}`);\n    throw error;\n  }\n}\n\n// Legacy function kept for compatibility\nasync function startServerWithPortKill(port: number, maxRetries: number = 3): Promise<void> {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      log(`🚀 Attempt ${attempt} to start server on port ${port}`);\n      \n      // Simplified approach - just try to start directly\n      if (attempt > 1) {\n        await killPortProcess(port);\n      }\n      \n      // Try to start the server\n      const server = await registerRoutes(app);\n\n      app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n        const status = err.status || err.statusCode || 500;\n        const message = err.message || \"Internal Server Error\";\n\n        res.status(status).json({ message });\n        throw err;\n      });\n\n      // Setup vite or static serving\n      if (app.get(\"env\") === \"development\") {\n        await setupVite(app, server);\n      } else {\n        serveStatic(app);\n      }\n\n      // Start the server\n      return new Promise((resolve, reject) => {\n        server.listen(port, \"0.0.0.0\", () => {\n          log(`✅ Server successfully started on port ${port}`);\n          resolve();\n        });\n\n        server.on('error', (err: any) => {\n          if (err.code === 'EADDRINUSE') {\n            log(`❌ Port ${port} is still in use (attempt ${attempt})`);\n            if (attempt < maxRetries) {\n              reject(new Error(`Port ${port} in use, retrying...`));\n            } else {\n              log(`💡 All attempts failed. Try manually:`);\n              log(`   netstat -ano | findstr :${port}`);\n              log(`   taskkill /PID <PID> /F`);\n              reject(err);\n            }\n          } else {\n            reject(err);\n          }\n        });\n      });\n\n    } catch (error) {\n      if (attempt < maxRetries) {\n        log(`⚠️  Attempt ${attempt} failed: ${error}`);\n        log(`⏳ Waiting 2 seconds before retry...`);\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      } else {\n        throw error;\n      }\n    }\n  }\n}\n\n// Main startup function\n(async () => {\n  try {\n    const port = parseInt(process.env.PORT || '5000', 10);\n    await startServer(port);\n  } catch (error) {\n    log(`❌ Failed to start server: ${error}`);\n    process.exit(1);\n  }\n})();","size_bytes":6626},"server/mock-data.ts":{"content":"// Mock data for demonstration when MongoDB is not available\nexport const mockRestaurants = [\n  {\n    _id: \"67870c1a2b4d5e8f9a1b2c3d\",\n    name: \"Royal Spice Palace\",\n    description: \"Experience authentic Indian cuisine with a royal touch\",\n    address: \"123 Main Street, City Center, State 12345\",\n    phone: \"+1 (555) 123-4567\",\n    email: \"info@royalspicepalace.com\",\n    image: \"https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400\",\n    isActive: true,\n    createdAt: new Date().toISOString()\n  },\n  {\n    _id: \"67870c1a2b4d5e8f9a1b2c4e\",\n    name: \"Golden Dragon Restaurant\",\n    description: \"Traditional Chinese cuisine with modern presentation\",\n    address: \"456 Oak Avenue, Downtown, State 12345\",\n    phone: \"+1 (555) 987-6543\",\n    email: \"contact@goldendragon.com\",\n    image: \"https://images.unsplash.com/photo-1555396273-367ea4eb4db5?w=400\",\n    isActive: true,\n    createdAt: new Date().toISOString()\n  }\n];\n\nexport const mockMenuItems = [\n  {\n    _id: \"67870c1a2b4d5e8f9a1b2c5f\",\n    name: \"Butter Chicken\",\n    description: \"Creamy tomato-based curry with tender chicken pieces\",\n    price: 450,\n    category: \"Main Course\",\n    isVeg: false,\n    image: \"https://images.unsplash.com/photo-1603894584373-5ac82b2ae398?w=400\",\n    restaurantId: \"67870c1a2b4d5e8f9a1b2c3d\",\n    isAvailable: true,\n    createdAt: new Date().toISOString()\n  },\n  {\n    _id: \"67870c1a2b4d5e8f9a1b2c6a\",\n    name: \"Vegetable Samosas\",\n    description: \"Crispy pastry filled with spiced vegetables\",\n    price: 180,\n    category: \"Starters\",\n    isVeg: true,\n    image: \"https://images.unsplash.com/photo-1601050690117-94f5f6fa2238?w=400\",\n    restaurantId: \"67870c1a2b4d5e8f9a1b2c3d\",\n    isAvailable: true,\n    createdAt: new Date().toISOString()\n  },\n  {\n    _id: \"67870c1a2b4d5e8f9a1b2c7b\",\n    name: \"Sweet Lassi\",\n    description: \"Traditional yogurt-based drink with cardamom\",\n    price: 120,\n    category: \"Beverages\",\n    isVeg: true,\n    image: \"https://images.unsplash.com/photo-1546173159-315724a31696?w=400\",\n    restaurantId: \"67870c1a2b4d5e8f9a1b2c3d\",\n    isAvailable: true,\n    createdAt: new Date().toISOString()\n  }\n];\n\nlet mockDataStore = {\n  restaurants: [...mockRestaurants],\n  menuItems: [...mockMenuItems]\n};\n\nexport function deleteMockRestaurant(id: string) {\n  const index = mockDataStore.restaurants.findIndex(r => r._id === id);\n  if (index > -1) {\n    mockDataStore.restaurants.splice(index, 1);\n    // Also remove related menu items\n    mockDataStore.menuItems = mockDataStore.menuItems.filter(item => item.restaurantId !== id);\n    return true;\n  }\n  return false;\n}\n\nexport function getMockRestaurants() {\n  return mockDataStore.restaurants;\n}\n\nexport function addMockRestaurant(restaurant: any) {\n  // Generate valid MongoDB ObjectId-like string (24 hex characters)\n  const mockId = new Array(24).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n  const newRestaurant = {\n    ...restaurant,\n    _id: mockId,\n    isActive: true,\n    createdAt: new Date().toISOString()\n  };\n  mockDataStore.restaurants.push(newRestaurant);\n  return newRestaurant;\n}\n\nexport function getMockMenuItems(restaurantId: string) {\n  return mockDataStore.menuItems.filter(item => item.restaurantId === restaurantId);\n}\n\nexport function addMockMenuItem(menuItem: any) {\n  // Generate valid MongoDB ObjectId-like string (24 hex characters)\n  const mockId = new Array(24).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n  const newMenuItem = {\n    ...menuItem,\n    _id: mockId,\n    isAvailable: true,\n    createdAt: new Date().toISOString()\n  };\n  mockDataStore.menuItems.push(newMenuItem);\n  return newMenuItem;\n}","size_bytes":3676},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\n// Removed storage and cart schema imports - Admin-only system\nimport { connectToDatabase } from \"./db/mongodb\";\nimport { Restaurant } from \"./models/Restaurant\";\nimport { MenuItem } from \"./models/MenuItem\";\nimport { Admin } from \"./models/Admin\";\nimport { authenticateAdmin, generateToken, AuthRequest } from \"./middleware/auth\";\nimport bcrypt from \"bcryptjs\";\nimport { validateAdminCredentials } from \"./fallback-auth\";\nimport { getMockRestaurants, addMockRestaurant, getMockMenuItems, addMockMenuItem, deleteMockRestaurant } from \"./mock-data\";\nimport { connectToRestaurantDatabase, getMenuItemModel, fetchMenuItemsFromCustomDB, createMenuItemInCustomDB, updateMenuItemInCustomDB, deleteMenuItemFromCustomDB, extractCategoriesFromCustomDB } from \"./db/dynamic-mongodb\";\nimport { generateQRCode } from \"./utils/qrcode\";\nimport adminSettingsRoutes from \"./routes/admin-settings\";\nimport multer from 'multer';\nimport XLSX from 'xlsx';\nimport path from 'path';\nimport fs from 'fs';\nimport mongoose from 'mongoose';\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Connect to MongoDB\n  await connectToDatabase();\n  // Customer-facing routes removed - Admin-only system\n\n  // Configure multer for file uploads\n  const upload = multer({ \n    dest: 'uploads/',\n    fileFilter: (req, file, cb) => {\n      const allowedTypes = [\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/vnd.ms-excel'\n      ];\n      \n      // Allow both Excel files and images\n      const isExcelFile = allowedTypes.includes(file.mimetype) || file.originalname.endsWith('.xlsx') || file.originalname.endsWith('.xls');\n      const isImageFile = file.mimetype.startsWith('image/');\n      \n      if (isExcelFile || isImageFile) {\n        cb(null, true);\n      } else {\n        cb(new Error('Only Excel files and images are allowed'));\n      }\n    },\n    limits: {\n      fileSize: 1 * 1024 * 1024 // 1MB limit\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Try MongoDB first with quick timeout, then fallback\n      let admin = null;\n      \n      try {\n        admin = await Promise.race([\n          Admin.findOne({ username }),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n        \n        if (admin) {\n          const isValidPassword = await bcrypt.compare(password, admin.password);\n          if (isValidPassword) {\n            const token = generateToken(admin._id.toString());\n            return res.json({ \n              token, \n              admin: { \n                id: admin._id, \n                username: admin.username, \n                email: admin.email, \n                role: admin.role \n              } \n            });\n          }\n        }\n      } catch (mongoError) {\n        // MongoDB connection failed or timeout, use fallback quickly\n        console.log(\"MongoDB not available, using fallback authentication\");\n      }\n\n      // Try fallback authentication\n      const fallbackAdmin = await validateAdminCredentials(username, password);\n      if (fallbackAdmin) {\n        const token = generateToken(fallbackAdmin.id);\n        return res.json({ \n          token, \n          admin: fallbackAdmin \n        });\n      }\n\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/admin/register\", async (req, res) => {\n    try {\n      const { username, password, email } = req.body;\n      \n      if (!username || !password || !email) {\n        return res.status(400).json({ message: \"Username, password, and email are required\" });\n      }\n\n      const existingAdmin = await Admin.findOne({ $or: [{ username }, { email }] });\n      if (existingAdmin) {\n        return res.status(400).json({ message: \"Username or email already exists\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const admin = new Admin({\n        username,\n        password: hashedPassword,\n        email\n      });\n\n      await admin.save();\n      const token = generateToken(admin._id.toString());\n      \n      res.status(201).json({ \n        token, \n        admin: { \n          id: admin._id, \n          username: admin.username, \n          email: admin.email, \n          role: admin.role \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Restaurant Management Routes\n  app.get(\"/api/admin/restaurants\", authenticateAdmin, async (req, res) => {\n    try {\n      // Try MongoDB first with quick timeout, then fallback\n      try {\n        const restaurants = await Promise.race([\n          Restaurant.find().sort({ createdAt: -1 }),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n        res.json(restaurants);\n      } catch (mongoError) {\n        // MongoDB not available or timeout, return mock data quickly\n        console.log(\"MongoDB not available for restaurants, returning mock data\");\n        res.json(getMockRestaurants());\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch restaurants\" });\n    }\n  });\n\n  // Get single restaurant by ID\n  app.get(\"/api/admin/restaurants/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      console.log(`🔍 Fetching restaurant with ID: ${id}`);\n      \n      // Try MongoDB first with quick timeout, then fallback\n      try {\n        const restaurantPromise = Restaurant.findById(id);\n        const restaurant = await Promise.race([\n          restaurantPromise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n        \n        if (restaurant) {\n          console.log(`✅ Restaurant found: ${restaurant.name}`);\n          console.log(`📂 Restaurant customTypes: [${(restaurant.customTypes || []).join(', ')}]`);\n          return res.json(restaurant);\n        } else {\n          console.log(`❌ Restaurant not found in MongoDB: ${id}`);\n        }\n      } catch (mongoError) {\n        console.log(\"MongoDB not available for restaurant fetch, checking mock data\");\n      }\n      \n      // Try mock data as fallback\n      const mockRestaurants = getMockRestaurants();\n      const mockRestaurant = mockRestaurants.find(r => r._id === id);\n      \n      if (mockRestaurant) {\n        console.log(`✅ Restaurant found in mock data: ${mockRestaurant.name}`);\n        return res.json(mockRestaurant);\n      }\n      \n      console.log(`❌ Restaurant not found anywhere: ${id}`);\n      return res.status(404).json({ message: \"Restaurant not found\" });\n    } catch (error) {\n      console.error(\"Error fetching restaurant:\", error);\n      res.status(500).json({ message: \"Failed to fetch restaurant\" });\n    }\n  });\n\n  app.post(\"/api/admin/restaurants\", authenticateAdmin, async (req, res) => {\n    try {\n      const { name, description, address, phone, email, image, website, mongoUri, customTypes, isActive } = req.body;\n      \n      if (!name || !description || !address || !phone || !email || !image) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      try {\n        let finalCustomTypes = customTypes || ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n        \n        // If mongoUri is provided, try to extract categories with timeout\n        if (mongoUri) {\n          try {\n            console.log(`Extracting categories from custom database for restaurant: ${name}`);\n            \n            const categoryPromise = (async () => {\n              const customConnection = await connectToRestaurantDatabase(mongoUri);\n              return await extractCategoriesFromCustomDB(customConnection);\n            })();\n            \n            const extractedCategories = await Promise.race([\n              categoryPromise,\n              new Promise((_, reject) => \n                setTimeout(() => reject(new Error(\"Category extraction timeout\")), 3000)\n              )\n            ]);\n            \n            if (extractedCategories && extractedCategories.length > 0) {\n              finalCustomTypes = extractedCategories;\n              console.log(`✅ Using extracted categories: ${finalCustomTypes.join(', ')}`);\n            } else {\n              console.log('⚠️ No categories found in custom database, using default categories');\n            }\n          } catch (customDbError) {\n            console.log('Failed to extract categories from custom database, using provided/default categories');\n          }\n        }\n\n        // Generate QR code if website is provided\n        let qrCode = null;\n        if (website) {\n          try {\n            qrCode = await generateQRCode(website);\n            console.log(`✅ QR code generated for website: ${website}`);\n          } catch (qrError) {\n            console.log(`⚠️ Failed to generate QR code for website: ${website}`, qrError);\n          }\n        }\n\n        // Try to save to MongoDB with timeout\n        const savePromise = (async () => {\n          const restaurant = new Restaurant({\n            name,\n            description,\n            address,\n            phone,\n            email,\n            image,\n            website,\n            qrCode,\n            mongoUri,\n            customTypes: finalCustomTypes,\n            isActive: isActive ?? true\n          });\n          \n          await restaurant.save();\n          return restaurant;\n        })();\n        \n        const restaurant = await Promise.race([\n          savePromise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB save timeout\")), 2000)\n          )\n        ]);\n        \n        res.status(201).json(restaurant);\n      } catch (mongoError) {\n        // MongoDB not available, add to mock data store\n        console.log(\"MongoDB not available for restaurant creation, using mock data store\");\n        const mockRestaurant = addMockRestaurant({ \n          name, \n          description, \n          address, \n          phone, \n          email, \n          image,\n          website,\n          qrCode,\n          mongoUri,\n          customTypes: customTypes || ['Starters', 'Main Course', 'Desserts', 'Beverages'],\n          isActive: isActive ?? true\n        });\n        res.status(201).json(mockRestaurant);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create restaurant\" });\n    }\n  });\n\n  app.put(\"/api/admin/restaurants/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { name, description, address, phone, email, image, website, mongoUri, customTypes, isActive } = req.body;\n\n      console.log(`🔄 Updating restaurant ${id} with data:`, {\n        name, description, address, phone, email, \n        hasImage: !!image, website, mongoUri, customTypes, isActive\n      });\n\n      // Handle customTypes properly - it can be an array or a string\n      let finalCustomTypes;\n      if (Array.isArray(customTypes)) {\n        finalCustomTypes = customTypes;\n      } else if (typeof customTypes === 'string') {\n        finalCustomTypes = customTypes.split(',').map((t: string) => t.trim());\n      } else {\n        finalCustomTypes = ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n      }\n\n      console.log(`📝 Final customTypes: [${finalCustomTypes.join(', ')}]`);\n      \n      if (mongoUri) {\n        try {\n          console.log(`🔍 Extracting categories from custom database for restaurant update: ${name}`);\n          \n          const categoryPromise = (async () => {\n            try {\n              const customConnection = await connectToRestaurantDatabase(mongoUri);\n              return await extractCategoriesFromCustomDB(customConnection);\n            } catch (connError) {\n              console.log('❌ Failed to connect to custom database:', connError.message);\n              throw connError;\n            }\n          })();\n          \n          const extractedCategories = await Promise.race([\n            categoryPromise,\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error(\"Category extraction timeout\")), 3000)\n            )\n          ]);\n          \n          if (extractedCategories && extractedCategories.length > 0) {\n            finalCustomTypes = extractedCategories;\n            console.log(`✅ Using extracted categories: ${finalCustomTypes.join(', ')}`);\n          } else {\n            console.log('⚠️ No categories found in custom database, using provided/default categories');\n          }\n        } catch (customDbError) {\n          console.log('❌ Failed to extract categories from custom database:', customDbError.message);\n          console.log('⚠️ Using provided/default categories instead');\n        }\n      }\n\n      // Generate QR code if website is provided\n      let qrCode = null;\n      if (website) {\n        try {\n          qrCode = await generateQRCode(website);\n          console.log(`✅ QR code generated for website: ${website}`);\n        } catch (qrError) {\n          console.log(`⚠️ Failed to generate QR code for website: ${website}`, qrError);\n        }\n      }\n\n      // Try MongoDB first with timeout, then fallback to mock data\n      try {\n        const updatePromise = Restaurant.findByIdAndUpdate(\n          id,\n          { name, description, address, phone, email, image, website, qrCode, mongoUri, customTypes: finalCustomTypes, isActive },\n          { new: true }\n        );\n        \n        const restaurant = await Promise.race([\n          updatePromise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB update timeout\")), 2000)\n          )\n        ]);\n\n        if (!restaurant) {\n          return res.status(404).json({ message: \"Restaurant not found\" });\n        }\n\n        console.log(`✅ Restaurant updated successfully: ${restaurant.name}`);\n        return res.json(restaurant);\n      } catch (mongoError) {\n        console.log(\"MongoDB not available for restaurant update, using mock data fallback\");\n        \n        // Try to find and update in mock data\n        const mockRestaurants = getMockRestaurants();\n        const mockIndex = mockRestaurants.findIndex(r => r._id === id);\n        \n        if (mockIndex === -1) {\n          return res.status(404).json({ message: \"Restaurant not found\" });\n        }\n        \n        // Update mock restaurant\n        const updatedRestaurant = {\n          ...mockRestaurants[mockIndex],\n          name,\n          description,\n          address,\n          phone,\n          email,\n          image,\n          website,\n          qrCode,\n          mongoUri,\n          customTypes: finalCustomTypes,\n          isActive\n        };\n        \n        mockRestaurants[mockIndex] = updatedRestaurant;\n        console.log(`✅ Mock restaurant updated successfully: ${updatedRestaurant.name}`);\n        return res.json(updatedRestaurant);\n      }\n    } catch (error) {\n      console.error(\"🚨 Error updating restaurant:\", error);\n      console.error(\"🚨 Error stack:\", error.stack);\n      console.error(\"🚨 Error name:\", error.name);\n      res.status(500).json({ \n        message: \"Failed to update restaurant\", \n        error: error.message,\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      });\n    }\n  });\n\n  // Add endpoint to manually force update restaurant categories (for testing)\n  app.post(\"/api/admin/restaurants/:id/force-update-categories\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const restaurant = await Restaurant.findById(id);\n\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      if (!restaurant.mongoUri) {\n        return res.status(400).json({ message: \"Restaurant does not have a MongoDB URI\" });\n      }\n\n      try {\n        console.log(`🔄 Force updating categories for restaurant: ${restaurant.name}`);\n        \n        const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n        const extractedCategories = await extractCategoriesFromCustomDB(customConnection);\n        \n        if (extractedCategories && extractedCategories.length > 0) {\n          restaurant.customTypes = extractedCategories;\n          await restaurant.save();\n          console.log(`✅ Categories force updated: ${extractedCategories.join(', ')}`);\n          res.json({ message: \"Categories force updated successfully\", categories: extractedCategories, restaurant });\n        } else {\n          res.status(400).json({ message: \"No categories found in custom database\" });\n        }\n      } catch (error) {\n        console.error(\"❌ Failed to force update categories:\", error);\n        res.status(500).json({ message: \"Failed to force update categories\", error: error.message });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to force update categories\", error: error.message });\n    }\n  });\n\n  // Add endpoint to refresh categories for existing restaurants\n  app.post(\"/api/admin/restaurants/:id/refresh-categories\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const restaurant = await Restaurant.findById(id);\n\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      if (!restaurant.mongoUri) {\n        return res.status(400).json({ message: \"Restaurant does not have a MongoDB URI\" });\n      }\n\n      try {\n        console.log(`🔄 Refreshing categories for restaurant: ${restaurant.name}`);\n        \n        const categoryPromise = (async () => {\n          const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n          return await extractCategoriesFromCustomDB(customConnection);\n        })();\n        \n        const extractedCategories = await Promise.race([\n          categoryPromise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"Category extraction timeout\")), 5001)\n          )\n        ]);\n        \n        if (extractedCategories && extractedCategories.length > 0) {\n          restaurant.customTypes = extractedCategories;\n          await restaurant.save();\n          console.log(`✅ Categories refreshed: ${extractedCategories.join(', ')}`);\n          res.json({ message: \"Categories refreshed successfully\", categories: extractedCategories });\n        } else {\n          res.status(400).json({ message: \"No categories found in custom database\" });\n        }\n      } catch (error) {\n        console.error(\"❌ Failed to refresh categories:\", error);\n        res.status(500).json({ message: \"Failed to refresh categories\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to refresh categories\" });\n    }\n  });\n\n  app.delete(\"/api/admin/restaurants/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Try MongoDB first with quick timeout, then fallback\n      try {\n        const deletePromise = (async () => {\n          const restaurant = await Restaurant.findByIdAndDelete(id);\n          if (restaurant) {\n            await MenuItem.deleteMany({ restaurantId: id });\n            return restaurant;\n          }\n          return null;\n        })();\n        \n        const restaurant = await Promise.race([\n          deletePromise,\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n        \n        if (restaurant) {\n          return res.json({ message: \"Restaurant deleted successfully\" });\n        }\n      } catch (mongoError) {\n        // MongoDB not available or timeout, delete from mock data quickly\n        console.log(\"MongoDB not available for deletion, removing from mock data\");\n        if (deleteMockRestaurant(id)) {\n          return res.json({ message: \"Restaurant deleted successfully\" });\n        }\n      }\n\n      return res.status(404).json({ message: \"Restaurant not found\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete restaurant\" });\n    }\n  });\n\n  // Menu Item Management Routes\n  \n  // Get menu items by category (collection-based)\n  app.get(\"/api/admin/restaurants/:restaurantId/menu-items/category/:category\", authenticateAdmin, async (req, res) => {\n    try {\n      const { restaurantId, category } = req.params;\n      console.log(`🎯 Fetching menu items for restaurant ${restaurantId}, category: ${category}`);\n      \n      // First get the restaurant\n      let restaurant = null;\n      try {\n        restaurant = await Promise.race([\n          Restaurant.findById(restaurantId),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n      } catch (mongoError) {\n        // MongoDB not available, try mock data\n        const mockRestaurants = getMockRestaurants();\n        restaurant = mockRestaurants.find(r => r._id === restaurantId);\n      }\n      \n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // If restaurant has custom MongoDB URI, fetch items from specific collection\n      if (restaurant.mongoUri) {\n        try {\n          console.log(`📡 Connecting to custom database for category: ${category}`);\n          \n          const fetchPromise = (async () => {\n            const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n            return await fetchMenuItemsFromCustomDB(customConnection, category);\n          })();\n          \n          const menuItems = await Promise.race([\n            fetchPromise,\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error(\"Database fetch timeout\")), 3000)\n            )\n          ]);\n          \n          console.log(`✅ Found ${menuItems.length} items in category \"${category}\"`);\n          res.json(menuItems);\n        } catch (customDbError) {\n          console.error(`❌ Failed to fetch category \"${category}\" from custom database:`, customDbError.message);\n          // Fallback to main database\n          try {\n            const menuItems = await MenuItem.find({ \n              restaurantId, \n              category: new RegExp(category, 'i') \n            }).sort({ createdAt: -1 });\n            res.json(menuItems);\n          } catch (fallbackError) {\n            console.log(\"Main database also failed, returning empty array\");\n            res.json([]);\n          }\n        }\n      } else {\n        // No custom URI, use main database\n        try {\n          const menuItems = await MenuItem.find({ \n            restaurantId, \n            category: new RegExp(category, 'i') \n          }).sort({ createdAt: -1 });\n          res.json(menuItems);\n        } catch (error) {\n          console.log(\"Main database failed, returning mock menu items\");\n          const mockItems = getMockMenuItems(restaurantId);\n          const filteredItems = mockItems.filter(item => \n            item.category.toLowerCase().includes(category.toLowerCase())\n          );\n          res.json(filteredItems);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching menu items by category:\", error);\n      res.status(500).json({ message: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.get(\"/api/admin/restaurants/:restaurantId/menu-items\", authenticateAdmin, async (req, res) => {\n    try {\n      const { restaurantId } = req.params;\n      \n      // First get the restaurant with quick timeout\n      let restaurant = null;\n      try {\n        restaurant = await Promise.race([\n          Restaurant.findById(restaurantId),\n          new Promise((_, reject) => \n            setTimeout(() => reject(new Error(\"MongoDB timeout\")), 1000)\n          )\n        ]);\n      } catch (mongoError) {\n        // MongoDB not available or timeout, try mock data quickly\n        const mockRestaurants = getMockRestaurants();\n        restaurant = mockRestaurants.find(r => r._id === restaurantId);\n      }\n      \n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // If restaurant has custom MongoDB URI, connect to it and fetch menu items\n      if (restaurant.mongoUri) {\n        try {\n          console.log(`Fetching menu items from custom database for restaurant: ${restaurant.name}`);\n          \n          // Set timeout for database operations\n          const fetchPromise = (async () => {\n            const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n            return await fetchMenuItemsFromCustomDB(customConnection);\n          })();\n          \n          // Race against timeout  \n          const menuItems = await Promise.race([\n            fetchPromise,\n            new Promise((_, reject) => \n              setTimeout(() => reject(new Error(\"Database fetch timeout\")), 3000)\n            )\n          ]);\n          \n          console.log(`Found ${menuItems.length} menu items in custom database`);\n          \n          // Auto-update restaurant categories if they don't match extracted ones\n          try {\n            const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n            const extractedCategories = await extractCategoriesFromCustomDB(customConnection);\n            \n            console.log(`🔍 Current restaurant categories: [${(restaurant.customTypes || []).join(', ')}]`);\n            console.log(`🔍 Extracted categories: [${(extractedCategories || []).join(', ')}]`);\n            \n            if (extractedCategories && extractedCategories.length > 0) {\n              const currentCategories = restaurant.customTypes || [];\n              // Force update if current categories are empty or different\n              const shouldUpdate = currentCategories.length === 0 || \n                                 JSON.stringify(currentCategories.sort()) !== JSON.stringify(extractedCategories.sort());\n              \n              if (shouldUpdate) {\n                console.log(`🔄 Auto-updating restaurant categories from [${currentCategories.join(', ')}] to [${extractedCategories.join(', ')}]`);\n                restaurant.customTypes = extractedCategories;\n                await restaurant.save();\n                console.log('✅ Restaurant categories updated successfully');\n                \n                // Reload restaurant from database to confirm update\n                const updatedRestaurant = await Restaurant.findById(restaurant._id);\n                console.log(`🔍 Confirmed updated categories: [${(updatedRestaurant?.customTypes || []).join(', ')}]`);\n              } else {\n                console.log('📋 Categories are already up to date');\n              }\n            }\n          } catch (categoryError) {\n            console.log('❌ Failed to auto-update categories:', categoryError.message);\n          }\n          \n          res.json(menuItems);\n        } catch (customDbError) {\n          console.error(\"Failed to fetch from custom database:\", customDbError.message);\n          // Fall back to main database\n          try {\n            const menuItems = await MenuItem.find({ restaurantId }).sort({ createdAt: -1 });\n            res.json(menuItems);\n          } catch (fallbackError) {\n            console.log(\"Main database also failed, returning mock menu items\");\n            res.json(getMockMenuItems(restaurantId));\n          }\n        }\n      } else {\n        // No custom URI, use main database\n        try {\n          const menuItems = await MenuItem.find({ restaurantId }).sort({ createdAt: -1 });\n          res.json(menuItems);\n        } catch (mongoError) {\n          // MongoDB not available, return mock menu items\n          console.log(\"MongoDB not available for menu items, returning mock data\");\n          res.json(getMockMenuItems(restaurantId));\n        }\n      }\n    } catch (error) {\n      console.error(\"Error fetching menu items:\", error);\n      res.status(500).json({ message: \"Failed to fetch menu items\" });\n    }\n  });\n\n  app.post(\"/api/admin/restaurants/:restaurantId/menu-items\", authenticateAdmin, async (req, res) => {\n    try {\n      const { restaurantId } = req.params;\n      const { name, description, price, category, isVeg, image } = req.body;\n\n      if (!name || !description || price === undefined || !category || isVeg === undefined || !image) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Get the restaurant to check if it has a custom MongoDB URI\n      const restaurant = await Restaurant.findById(restaurantId);\n      \n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // If restaurant has custom MongoDB URI, create in custom database\n      if (restaurant.mongoUri) {\n        try {\n          console.log(`Creating menu item in custom database for restaurant: ${restaurant.name}`);\n          const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n          \n          const menuItem = await createMenuItemInCustomDB(customConnection, {\n            name, description, price, category, isVeg, image\n          });\n          \n          res.status(201).json(menuItem);\n        } catch (customDbError) {\n          console.error(\"Failed to create in custom database:\", customDbError);\n          // Fall back to main database\n          const menuItem = new MenuItem({\n            name, description, price, category, isVeg, image, restaurantId\n          });\n          await menuItem.save();\n          res.status(201).json(menuItem);\n        }\n      } else {\n        // No custom URI, use main database\n        try {\n          const menuItem = new MenuItem({\n            name, description, price, category, isVeg, image, restaurantId\n          });\n\n          await menuItem.save();\n          res.status(201).json(menuItem);\n        } catch (mongoError) {\n          // MongoDB not available, add to mock data store\n          console.log(\"MongoDB not available for menu item creation, using mock data store\");\n          const mockMenuItem = addMockMenuItem({ name, description, price, category, isVeg, image, restaurantId });\n          res.status(201).json(mockMenuItem);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error creating menu item:\", error);\n      res.status(500).json({ message: \"Failed to create menu item\" });\n    }\n  });\n\n  app.put(\"/api/admin/menu-items/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { name, description, price, category, isVeg, image, isAvailable, restaurantId } = req.body;\n\n      // Get the restaurant to check if it has a custom MongoDB URI\n      const restaurant = await Restaurant.findById(restaurantId);\n      \n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // If restaurant has custom MongoDB URI, update in custom database\n      if (restaurant.mongoUri) {\n        try {\n          console.log(`Updating menu item in custom database for restaurant: ${restaurant.name}`);\n          const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n          \n          const menuItem = await updateMenuItemInCustomDB(customConnection, id, {\n            name, description, price, category, isVeg, image, isAvailable\n          });\n          \n          res.json(menuItem);\n        } catch (customDbError) {\n          console.error(\"Failed to update in custom database:\", customDbError);\n          // Fall back to main database\n          const menuItem = await MenuItem.findByIdAndUpdate(\n            id,\n            { name, description, price, category, isVeg, image, isAvailable },\n            { new: true }\n          );\n          \n          if (!menuItem) {\n            return res.status(404).json({ message: \"Menu item not found\" });\n          }\n          res.json(menuItem);\n        }\n      } else {\n        // No custom URI, use main database\n        const menuItem = await MenuItem.findByIdAndUpdate(\n          id,\n          { name, description, price, category, isVeg, image, isAvailable },\n          { new: true }\n        );\n\n        if (!menuItem) {\n          return res.status(404).json({ message: \"Menu item not found\" });\n        }\n\n        res.json(menuItem);\n      }\n    } catch (error) {\n      console.error(\"Error updating menu item:\", error);\n      res.status(500).json({ message: \"Failed to update menu item\" });\n    }\n  });\n\n  app.delete(\"/api/admin/menu-items/:id\", authenticateAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { restaurantId } = req.body;\n\n      // Get the restaurant to check if it has a custom MongoDB URI\n      const restaurant = await Restaurant.findById(restaurantId);\n      \n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // If restaurant has custom MongoDB URI, delete from custom database\n      if (restaurant.mongoUri) {\n        try {\n          console.log(`Deleting menu item from custom database for restaurant: ${restaurant.name}`);\n          const customConnection = await connectToRestaurantDatabase(restaurant.mongoUri);\n          \n          await deleteMenuItemFromCustomDB(customConnection, id);\n          res.json({ message: \"Menu item deleted successfully\" });\n        } catch (customDbError) {\n          console.error(\"Failed to delete from custom database:\", customDbError);\n          // Fall back to main database\n          const menuItem = await MenuItem.findByIdAndDelete(id);\n          \n          if (!menuItem) {\n            return res.status(404).json({ message: \"Menu item not found\" });\n          }\n          res.json({ message: \"Menu item deleted successfully\" });\n        }\n      } else {\n        // No custom URI, use main database\n        const menuItem = await MenuItem.findByIdAndDelete(id);\n\n        if (!menuItem) {\n          return res.status(404).json({ message: \"Menu item not found\" });\n        }\n\n        res.json({ message: \"Menu item deleted successfully\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting menu item:\", error);\n      res.status(500).json({ message: \"Failed to delete menu item\" });\n    }\n  });\n\n  // Bulk Menu Import - Download Template\n  app.get(\"/api/admin/restaurants/:restaurantId/menu-template\", authenticateAdmin, async (req, res) => {\n    try {\n      const { restaurantId } = req.params;\n\n      // Get the restaurant to check available categories\n      const restaurant = await Restaurant.findById(restaurantId);\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // Get categories for this restaurant (use exact collection names)\n      let categories = ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n      \n      if (restaurant.mongoUri) {\n        try {\n          // Get raw collection names without mapping for bulk import\n          const connection = await connectToRestaurantDatabase(restaurant.mongoUri);\n          const collections = await connection.db.listCollections().toArray();\n          \n          // Filter out system collections\n          const systemCollections = ['admin', 'local', 'config', 'system', 'test', 'users', 'sessions', 'accounts', 'tokens'];\n          const menuCollections = collections.filter(c => \n            !systemCollections.some(sys => c.name.toLowerCase().includes(sys.toLowerCase())) &&\n            !c.name.startsWith('_') &&\n            !c.name.startsWith('system.')\n          );\n          \n          if (menuCollections.length > 0) {\n            // Use exact collection names as categories for bulk import\n            categories = menuCollections.map(c => c.name).sort();\n            console.log('📋 Using exact collection names as categories for bulk import:', categories);\n          }\n        } catch (error) {\n          console.warn('Failed to get custom categories, using defaults');\n        }\n      }\n\n      // Create Excel template with sample data\n      const templateData = [\n        {\n          Name: 'Chicken Biryani',\n          Description: 'Aromatic basmati rice cooked with tender chicken pieces',\n          Price: 299,\n          Category: categories[0] || 'Starters',\n          IsVeg: false,\n          Image: 'https://example.com/chicken-biryani.jpg',\n          IsAvailable: true\n        },\n        {\n          Name: 'Paneer Butter Masala',\n          Description: 'Soft paneer cubes in rich tomato and butter gravy',\n          Price: 249,\n          Category: categories[1] || 'Main Course',\n          IsVeg: true,\n          Image: 'https://example.com/paneer-butter-masala.jpg',\n          IsAvailable: true\n        }\n      ];\n\n      // Create workbook\n      const wb = XLSX.utils.book_new();\n      const ws = XLSX.utils.json_to_sheet(templateData);\n\n      // Add some formatting and notes\n      ws['!cols'] = [\n        { width: 20 }, // Name\n        { width: 40 }, // Description\n        { width: 10 }, // Price\n        { width: 15 }, // Category\n        { width: 10 }, // IsVeg\n        { width: 30 }, // Image\n        { width: 12 }  // IsAvailable\n      ];\n\n      // Add the worksheet to the workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Menu Items');\n\n      // Add a categories sheet for reference\n      const categoriesWs = XLSX.utils.json_to_sheet(\n        categories.map(cat => ({ 'Available Categories': cat }))\n      );\n      XLSX.utils.book_append_sheet(wb, categoriesWs, 'Categories');\n\n      // Generate buffer\n      const buffer = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n\n      // Set headers for file download\n      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      res.setHeader('Content-Disposition', `attachment; filename=\"menu-template-${restaurantId}.xlsx\"`);\n      res.setHeader('Content-Length', buffer.length);\n\n      res.send(buffer);\n    } catch (error) {\n      console.error('Error generating template:', error);\n      res.status(500).json({ message: \"Failed to generate template\" });\n    }\n  });\n\n  // Bulk Menu Import - Process uploaded file\n  app.post(\"/api/admin/restaurants/:restaurantId/menu-import\", authenticateAdmin, upload.single('menuFile'), async (req, res) => {\n    try {\n      const { restaurantId } = req.params;\n      const file = req.file;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Get the restaurant\n      const restaurant = await Restaurant.findById(restaurantId);\n      if (!restaurant) {\n        return res.status(404).json({ message: \"Restaurant not found\" });\n      }\n\n      // Read the Excel file\n      const workbook = XLSX.readFile(file.path);\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n      let imported = 0;\n      let failed = 0;\n      const errors: string[] = [];\n\n      // Process each row\n      for (let i = 0; i < jsonData.length; i++) {\n        const row: any = jsonData[i];\n        \n        try {\n          // Validate required fields\n          const name = row.Name || row.name;\n          const description = row.Description || row.description;\n          const price = parseFloat(row.Price || row.price);\n          const category = row.Category || row.category;\n          const isVeg = row.IsVeg === true || row.IsVeg === 'TRUE' || row.IsVeg === 'true' || row.isVeg === true;\n          const image = row.Image || row.image || 'https://via.placeholder.com/300x200?text=Menu+Item';\n          const isAvailable = row.IsAvailable !== false && row.IsAvailable !== 'FALSE' && row.IsAvailable !== 'false';\n\n          if (!name || !description || isNaN(price) || !category) {\n            errors.push(`Row ${i + 2}: Missing required fields (Name, Description, Price, Category)`);\n            failed++;\n            continue;\n          }\n\n          const menuItemData = {\n            name,\n            description,\n            price,\n            category,\n            isVeg,\n            image,\n            isAvailable,\n            restaurantId\n          };\n\n          // Create menu item using exact collection name matching\n          if (restaurant.mongoUri) {\n            // Use a simplified creation that directly matches collection names\n            const connection = await connectToRestaurantDatabase(restaurant.mongoUri);\n            const targetCollection = category; // Use category as exact collection name\n            \n            // Verify collection exists\n            const collections = await connection.db.listCollections().toArray();\n            const collectionExists = collections.some(c => c.name === targetCollection);\n            \n            if (!collectionExists) {\n              throw new Error(`Collection \"${targetCollection}\" does not exist. Available collections: ${collections.map(c => c.name).join(', ')}`);\n            }\n            \n            console.log(`Creating menu item in exact collection: ${targetCollection}`);\n            \n            const transformedData = {\n              name,\n              description,\n              price,\n              category: targetCollection, // Store exact collection name as category\n              isVeg,\n              image,\n              restaurantId: new mongoose.Types.ObjectId(restaurantId),\n              isAvailable,\n              createdAt: new Date(),\n              updatedAt: new Date(),\n              __v: 0\n            };\n            \n            await connection.db.collection(targetCollection).insertOne(transformedData);\n            console.log(`✅ Menu item created in collection: ${targetCollection}`);\n          } else {\n            // Create using regular database (if needed)\n            const newMenuItem = new MenuItem({\n              ...menuItemData,\n              restaurantId: restaurant._id\n            });\n            await newMenuItem.save();\n          }\n\n          imported++;\n        } catch (error: any) {\n          console.error(`Error processing row ${i + 2}:`, error);\n          errors.push(`Row ${i + 2}: ${error.message || 'Unknown error'}`);\n          failed++;\n        }\n      }\n\n      // Clean up uploaded file\n      try {\n        fs.unlinkSync(file.path);\n      } catch (cleanupError) {\n        console.warn('Failed to cleanup uploaded file:', cleanupError);\n      }\n\n      res.json({\n        success: failed === 0,\n        message: `Import completed. ${imported} items imported, ${failed} failed.`,\n        imported,\n        failed,\n        errors: errors.slice(0, 10) // Limit to first 10 errors\n      });\n\n    } catch (error) {\n      console.error('Error processing bulk import:', error);\n      res.status(500).json({ message: \"Failed to process import\" });\n    }\n  });\n\n  // Image Upload Route\n  app.post(\"/api/admin/upload-image\", authenticateAdmin, upload.single('image'), async (req, res) => {\n    try {\n      const file = req.file;\n\n      if (!file) {\n        return res.status(400).json({ message: \"No image file uploaded\" });\n      }\n\n      // Validate file type\n      if (!file.mimetype.startsWith('image/')) {\n        return res.status(400).json({ message: \"Only image files are allowed\" });\n      }\n\n      // Validate file size (1MB max)\n      if (file.size > 1 * 1024 * 1024) {\n        return res.status(400).json({ message: \"Image size must be less than 1MB\" });\n      }\n\n      // Generate unique filename\n      const timestamp = Date.now();\n      const extension = path.extname(file.originalname);\n      const filename = `menu-item-${timestamp}${extension}`;\n      const filepath = path.join('uploads', filename);\n\n      // Move file from temp location to uploads folder\n      fs.renameSync(file.path, filepath);\n\n      // Return the image URL\n      const imageUrl = `/uploads/${filename}`;\n      res.json({ \n        success: true,\n        imageUrl,\n        message: \"Image uploaded successfully\"\n      });\n\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      res.status(500).json({ message: \"Failed to upload image\" });\n    }\n  });\n\n  // Admin Settings Routes\n  app.use(\"/api/admin/settings\", adminSettingsRoutes);\n  \n  // Additional admin routes for export and logs  \n  app.use(\"/api/admin\", adminSettingsRoutes);\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":44881},"server/seed.ts":{"content":"import { connectToDatabase } from \"./db/mongodb\";\nimport { Admin } from \"./models/Admin\";\nimport bcrypt from \"bcryptjs\";\n\nasync function seedAdmin() {\n  try {\n    await connectToDatabase();\n\n    // Check if admin already exists\n    const existingAdmin = await Admin.findOne({ username: \"admin\" });\n    if (existingAdmin) {\n      console.log(\"Admin user already exists\");\n      return;\n    }\n\n    // Create default admin user\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    const admin = new Admin({\n      username: \"admin\",\n      password: hashedPassword,\n      email: \"admin@example.com\",\n      role: \"admin\"\n    });\n\n    await admin.save();\n    console.log(\"Default admin user created:\");\n    console.log(\"Username: admin\");\n    console.log(\"Password: admin123\");\n    console.log(\"Email: admin@example.com\");\n  } catch (error) {\n    console.error(\"Error seeding admin user:\", error);\n  }\n}\n\nseedAdmin();","size_bytes":923},"server/storage.ts":{"content":"// import { users, menuItems, cartItems, type User, type InsertUser, type MenuItem, type CartItem, type InsertCartItem } from \"@shared/schema\";\n\n// export interface IStorage {\n//   getUser(id: number): Promise<User | undefined>;\n//   getUserByUsername(username: string): Promise<User | undefined>;\n//   createUser(user: InsertUser): Promise<User>;\n  \n//   getMenuItems(): Promise<MenuItem[]>;\n//   getMenuItemsByCategory(category: string): Promise<MenuItem[]>;\n//   getMenuItem(id: number): Promise<MenuItem | undefined>;\n  \n//   getCartItems(): Promise<CartItem[]>;\n//   addToCart(item: InsertCartItem): Promise<CartItem>;\n//   removeFromCart(id: number): Promise<void>;\n//   clearCart(): Promise<void>;\n// }\n\n// export class MemStorage implements IStorage {\n//   private users: Map<number, User>;\n//   private menuItems: Map<number, MenuItem>;\n//   private cartItems: Map<number, CartItem>;\n//   private currentUserId: number;\n//   private currentMenuItemId: number;\n//   private currentCartItemId: number;\n\n//   constructor() {\n//     this.users = new Map();\n//     this.menuItems = new Map();\n//     this.cartItems = new Map();\n//     this.currentUserId = 1;\n//     this.currentMenuItemId = 1;\n//     this.currentCartItemId = 1;\n    \n//     this.initializeMenuItems();\n//   }\n\n//   private initializeMenuItems() {\n//     const items: Omit<MenuItem, 'id'>[] = [\n//       // Starters\n//       {\n//         name: \"Royal Tandoori Platter\",\n//         description: \"Assorted tandoori vegetables with mint chutney and fresh naan\",\n//         price: 420,\n//         category: \"starters\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1599487488170-d11ec9c172f0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Maharaja Seekh Kebab\",\n//         description: \"Succulent lamb seekh kebabs with royal spices and yogurt sauce\",\n//         price: 580,\n//         category: \"starters\",\n//         isVeg: false,\n//         image: \"https://images.unsplash.com/photo-1599487488170-d11ec9c172f0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Royal Samosa Platter\",\n//         description: \"Crispy samosas with spiced potato filling and tamarind chutney\",\n//         price: 240,\n//         category: \"starters\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1601050690597-df0568f70950?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       // Main Course\n//       {\n//         name: \"Royal Paneer Makhani\",\n//         description: \"Creamy paneer curry with royal spices and fresh cream\",\n//         price: 480,\n//         category: \"mains\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1588166524941-3bf61a9c41db?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Maharaja Biryani\",\n//         description: \"Aromatic basmati rice with tender mutton and royal spices\",\n//         price: 680,\n//         category: \"mains\",\n//         isVeg: false,\n//         image: \"https://images.unsplash.com/photo-1563379091369-5b8fb7e3c7c1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Royal Butter Chicken\",\n//         description: \"Creamy tomato-based chicken curry with rich butter flavor\",\n//         price: 520,\n//         category: \"mains\",\n//         isVeg: false,\n//         image: \"https://images.unsplash.com/photo-1565557623262-b51c2513a641?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       // Desserts\n//       {\n//         name: \"Royal Gulab Jamun\",\n//         description: \"Soft milk dumplings soaked in rose-cardamom syrup\",\n//         price: 180,\n//         category: \"desserts\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1571115764595-644a1f56a55c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Maharaja Kulfi\",\n//         description: \"Traditional frozen dessert with pistachios and cardamom\",\n//         price: 160,\n//         category: \"desserts\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1488477181946-6428a0291777?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       // Drinks\n//       {\n//         name: \"Royal Mango Lassi\",\n//         description: \"Creamy yogurt drink with fresh mango and cardamom\",\n//         price: 120,\n//         category: \"drinks\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1544197150-b99a580bb7a8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Royal Masala Chai\",\n//         description: \"Aromatic spiced tea with cardamom, cinnamon, and ginger\",\n//         price: 80,\n//         category: \"drinks\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1571934811356-5cc061b6821f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       // Combos\n//       {\n//         name: \"Royal Veg Thali\",\n//         description: \"Complete vegetarian meal with dal, sabzi, rice, roti, and dessert\",\n//         price: 380,\n//         category: \"combos\",\n//         isVeg: true,\n//         image: \"https://images.unsplash.com/photo-1546833999-b9f581a1996d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       },\n//       {\n//         name: \"Maharaja Non-Veg Thali\",\n//         description: \"Complete non-vegetarian feast with chicken, mutton, rice, naan, and dessert\",\n//         price: 650,\n//         category: \"combos\",\n//         isVeg: false,\n//         image: \"https://images.unsplash.com/photo-1585032226651-759b368d7246?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n//       }\n//     ];\n\n//     items.forEach(item => {\n//       const menuItem: MenuItem = { ...item, id: this.currentMenuItemId++ };\n//       this.menuItems.set(menuItem.id, menuItem);\n//     });\n//   }\n\n//   async getUser(id: number): Promise<User | undefined> {\n//     return this.users.get(id);\n//   }\n\n//   async getUserByUsername(username: string): Promise<User | undefined> {\n//     return Array.from(this.users.values()).find(\n//       (user) => user.username === username,\n//     );\n//   }\n\n//   async createUser(insertUser: InsertUser): Promise<User> {\n//     const id = this.currentUserId++;\n//     const user: User = { ...insertUser, id };\n//     this.users.set(id, user);\n//     return user;\n//   }\n\n//   async getMenuItems(): Promise<MenuItem[]> {\n//     return Array.from(this.menuItems.values());\n//   }\n\n//   async getMenuItemsByCategory(category: string): Promise<MenuItem[]> {\n//     return Array.from(this.menuItems.values()).filter(item => item.category === category);\n//   }\n\n//   async getMenuItem(id: number): Promise<MenuItem | undefined> {\n//     return this.menuItems.get(id);\n//   }\n\n//   async getCartItems(): Promise<CartItem[]> {\n//     return Array.from(this.cartItems.values());\n//   }\n\n//   async addToCart(item: InsertCartItem): Promise<CartItem> {\n//     const existing = Array.from(this.cartItems.values()).find(\n//       cartItem => cartItem.menuItemId === item.menuItemId\n//     );\n\n//     if (existing) {\n//       existing.quantity += item.quantity || 1;\n//       this.cartItems.set(existing.id, existing);\n//       return existing;\n//     }\n\n//     const cartItem: CartItem = { ...item, quantity: item.quantity || 1, id: this.currentCartItemId++ };\n//     this.cartItems.set(cartItem.id, cartItem);\n//     return cartItem;\n//   }\n\n//   async removeFromCart(id: number): Promise<void> {\n//     this.cartItems.delete(id);\n//   }\n\n//   async clearCart(): Promise<void> {\n//     this.cartItems.clear();\n//   }\n// }\n\n// export const storage = new MemStorage();\nimport mongoose from 'mongoose';\n\n// Dynamic MongoDB connections for restaurant-specific databases\nconst connectionPool = new Map<string, mongoose.Connection>();\n\nexport async function connectToRestaurantDatabase(mongoUri: string): Promise<mongoose.Connection> {\n  // If connection already exists, return it\n  if (connectionPool.has(mongoUri)) {\n    const existingConnection = connectionPool.get(mongoUri);\n    if (existingConnection && existingConnection.readyState === 1) {\n      return existingConnection;\n    }\n    // Remove stale connection\n    connectionPool.delete(mongoUri);\n  }\n\n  try {\n    console.log(`🔗 Original URI: ${mongoUri.replace(/:[^:]*@/, ':***@')}`);\n    \n    // Extract database name using the pattern: cluster name = database name (lowercase)\n    let databaseName = null;\n    \n    // Extract cluster name from the URI (e.g., mingsdb from @mingsdb.mmjpnwc.mongodb.net)\n    const clusterMatch = mongoUri.match(/@([^.]+)\\./);\n    if (clusterMatch && clusterMatch[1]) {\n      databaseName = clusterMatch[1].toLowerCase(); // Always lowercase as per your tip\n      console.log(`📊 Database name extracted from cluster: ${databaseName}`);\n    }\n    \n    // Fallback: Extract from appName parameter and convert to lowercase\n    if (!databaseName) {\n      const appNameMatch = mongoUri.match(/appName=([^&]+)/);\n      if (appNameMatch && appNameMatch[1]) {\n        databaseName = appNameMatch[1].toLowerCase();\n        console.log(`📊 Database name from appName (lowercase): ${databaseName}`);\n      }\n    }\n    \n    // Final fallback\n    if (!databaseName) {\n      databaseName = 'restaurant';\n      console.log(`⚠️ Using fallback database name: ${databaseName}`);\n    }\n    \n    // Create the final URI with database name\n    let finalUri = mongoUri;\n    if (!mongoUri.includes('/', mongoUri.lastIndexOf('@') + 1) || mongoUri.includes('/?')) {\n      // Add database name to URI\n      finalUri = mongoUri.replace('?', `/${databaseName}?`);\n      console.log(`🔧 Modified URI: ${finalUri.replace(/:[^:]*@/, ':***@')}`);\n    }\n    \n    console.log(`🎯 Target database: ${databaseName}`);\n    \n    // Create connection with explicit database name\n    const connection = await Promise.race([\n      mongoose.createConnection(finalUri, {\n        connectTimeoutMS: 10000,\n        serverSelectionTimeoutMS: 10000,\n        maxPoolSize: 5,\n        minPoolSize: 1,\n        dbName: databaseName, // Explicitly set the database name\n        bufferCommands: false,\n        bufferMaxEntries: 0\n      }),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error(\"Connection timeout after 12 seconds\")), 12000)\n      )\n    ]) as mongoose.Connection;\n    \n    // Store connection for reuse\n    connectionPool.set(mongoUri, connection);\n    \n    console.log(`✅ Connected to cluster: ${mongoUri.split('@')[1]?.split('/')[0] || 'unknown'}`);\n    \n    // Wait for connection to be fully ready\n    if (connection.readyState !== 1) {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          reject(new Error('Connection ready timeout'));\n        }, 5001);\n        \n        connection.once('open', () => {\n          clearTimeout(timeout);\n          resolve(null);\n        });\n        \n        connection.once('error', (error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n      });\n    }\n    \n    // Verify we're connected to the correct database\n    const actualDbName = connection.db?.databaseName;\n    console.log(`📊 Connected to database: ${actualDbName}`);\n    \n    // If we're not connected to the expected database, force switch\n    if (actualDbName !== databaseName) {\n      console.log(`🔄 Switching from \"${actualDbName}\" to \"${databaseName}\"`);\n      try {\n        const targetDb = connection.client.db(databaseName);\n        // Replace the connection's database reference\n        (connection as any).db = targetDb;\n        console.log(`✅ Successfully switched to database: ${databaseName}`);\n      } catch (switchError) {\n        console.error('❌ Failed to switch database:', switchError);\n      }\n    }\n    \n    // Final verification - try to list collections\n    try {\n      const collections = await connection.db.listCollections().toArray();\n      console.log(`🎯 Database \"${databaseName}\" verified - found ${collections.length} collections:`);\n      console.log(`📋 Collections: ${collections.map(c => c.name).join(', ')}`);\n      \n      if (collections.length === 0) {\n        console.warn(`⚠️ No collections found in database \"${databaseName}\" - this might indicate an issue`);\n      }\n    } catch (listError) {\n      console.error('❌ Could not list collections:', listError);\n      throw new Error(`Connected but cannot access database \"${databaseName}\": ${listError.message}`);\n    }\n    \n    return connection;\n  } catch (error) {\n    console.error('❌ Failed to connect to restaurant database:', error);\n    // Clean up failed connection\n    connectionPool.delete(mongoUri);\n    throw error;\n  }\n}\n\nexport function closeRestaurantConnection(mongoUri: string) {\n  const connection = connectionPool.get(mongoUri);\n  if (connection) {\n    connection.close();\n    connectionPool.delete(mongoUri);\n    console.log(`Closed connection to restaurant database: ${mongoUri.split('@')[1]?.split('/')[0] || 'unknown'}`);\n  }\n}\n\n// Define flexible menu item schema for dynamic connections\nexport function getMenuItemModel(connection: mongoose.Connection) {\n  const menuItemSchema = new mongoose.Schema({\n    name: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    description: {\n      type: String,\n      required: true\n    },\n    price: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    category: {\n      type: String,\n      required: true\n    },\n    isVeg: {\n      type: Boolean,\n      required: true\n    },\n    image: {\n      type: String,\n      required: true\n    },\n    restaurantId: {\n      type: mongoose.Schema.Types.ObjectId,\n      required: true\n    },\n    isAvailable: {\n      type: Boolean,\n      default: true\n    }\n  }, { \n    strict: false, \n    timestamps: true \n  });\n\n  // Use existing model if already compiled\n  if (connection.models['MenuItem']) {\n    return connection.models['MenuItem'];\n  }\n  \n  return connection.model('MenuItem', menuItemSchema);\n}\n\n// Helper function to ensure we're connected to the right database\nasync function ensureCorrectDatabase(connection: mongoose.Connection, mongoUri: string) {\n  try {\n    const currentDbName = connection.db?.databaseName;\n    \n    // Extract the expected database name from URI (cluster name in lowercase)\n    const clusterMatch = mongoUri.match(/@([^.]+)\\./);\n    const expectedDbName = clusterMatch ? clusterMatch[1].toLowerCase() : null;\n    \n    console.log(`🔍 Current database: ${currentDbName}, Expected: ${expectedDbName}`);\n    \n    // If we're not connected to the expected database, switch to it\n    if (expectedDbName && currentDbName !== expectedDbName) {\n      console.log(`🔄 Switching from \"${currentDbName}\" to \"${expectedDbName}\"`);\n      try {\n        const targetDb = connection.client.db(expectedDbName);\n        (connection as any).db = targetDb;\n        console.log(`✅ Successfully switched to database: ${expectedDbName}`);\n        \n        // Verify by listing collections\n        const collections = await targetDb.listCollections().toArray();\n        console.log(`📋 Found ${collections.length} collections in \"${expectedDbName}\": ${collections.map(c => c.name).join(', ')}`);\n      } catch (switchError) {\n        console.error(`❌ Failed to switch to database \"${expectedDbName}\":`, switchError);\n      }\n    }\n    \n    return connection;\n  } catch (error) {\n    console.error('❌ Error ensuring correct database:', error);\n    return connection;\n  }\n}\n\n// Function to detect and analyze database structure dynamically\nexport async function analyzeCustomDatabase(connection: mongoose.Connection, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('🔍 Analyzing database structure');\n    console.log('📊 Database name:', dbName);\n    console.log('🔗 Connection state:', connection.readyState);\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return [];\n    }\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    if (collections.length === 0) {\n      console.log('📭 No collections found in database');\n      return [];\n    }\n    \n    // Filter collections dynamically - exclude system collections\n    const systemCollectionNames = [\n      'admin', 'local', 'config', 'system', 'test', \n      'users', 'sessions', 'accounts', 'tokens'\n    ];\n    \n    const menuCollections = collections.filter(c => \n      // Skip collections that start with system prefixes\n      !c.name.startsWith('__') && \n      !c.name.startsWith('system.') &&\n      !c.name.startsWith('_') &&\n      // Skip known system collections\n      !systemCollectionNames.some(sys => \n        c.name.toLowerCase().includes(sys.toLowerCase())\n      )\n    );\n    \n    console.log('🎯 Menu collections (all non-system collections):', menuCollections.map(c => c.name));\n    \n    // Analyze each collection to understand its structure\n    for (const collection of menuCollections) {\n      console.log(`🔍 Analyzing collection: ${collection.name}`);\n      \n      try {\n        const sampleDoc = await connection.db.collection(collection.name).findOne({});\n        const docCount = await connection.db.collection(collection.name).countDocuments();\n        \n        console.log(`📊 Collection \"${collection.name}\" has ${docCount} documents`);\n        \n        if (sampleDoc) {\n          console.log(`📄 Sample document structure:`, {\n            hasName: !!(sampleDoc.name || sampleDoc.title || sampleDoc.itemName),\n            hasPrice: !!(sampleDoc.price || sampleDoc.cost || sampleDoc.amount),\n            hasDescription: !!(sampleDoc.description || sampleDoc.desc),\n            hasCategory: !!(sampleDoc.category || sampleDoc.type),\n            hasImage: !!(sampleDoc.image || sampleDoc.imageUrl || sampleDoc.photo),\n            keys: Object.keys(sampleDoc).slice(0, 10) // Show first 10 keys\n          });\n          \n          if ((sampleDoc.name || sampleDoc.title) && (sampleDoc.price || sampleDoc.cost)) {\n            console.log(`✅ Collection ${collection.name} appears to contain menu items`);\n          } else if (docCount > 0) {\n            console.log(`⚠️ Collection ${collection.name} has data but structure is unclear`);\n          }\n        } else {\n          console.log(`📭 Collection ${collection.name} is empty (can be used for new items)`);\n        }\n      } catch (error) {\n        console.error(`❌ Error analyzing collection ${collection.name}:`, error);\n      }\n    }\n    \n    console.log('🎯 Final menu-related collections found:', menuCollections.map(c => c.name));\n    return menuCollections;\n  } catch (error) {\n    console.error('❌ Error analyzing database structure:', error);\n    return [];\n  }\n}\n\n// Dynamic category mapping based on collection names\nfunction createDynamicCategoryMapping(collectionNames: string[]) {\n  const commonMappings = {\n    // Common variations\n    'chefspecial': 'Chef Special',\n    'chef_special': 'Chef Special',\n    'specialties': 'Chef Special',\n    'signature': 'Signature Dishes',\n    \n    'starters': 'Starters',\n    'appetizers': 'Starters',\n    'apps': 'Starters',\n    'chickenstarters': 'Chicken Starters',\n    \n    'soups': 'Soups',\n    'soup': 'Soups',\n    \n    'maincourse': 'Main Course',\n    'main_course': 'Main Course',\n    'maindish': 'Main Course',\n    'mains': 'Main Course',\n    'entrees': 'Main Course',\n    \n    'ricebiryani': 'Rice & Biryani',\n    'rice_biryani': 'Rice & Biryani',\n    'rice': 'Rice & Biryani',\n    'biryani': 'Rice & Biryani',\n    \n    'bread': 'Bread',\n    'breads': 'Bread',\n    'naan': 'Bread',\n    'roti': 'Bread',\n    \n    'desserts': 'Desserts',\n    'dessert': 'Desserts',\n    'sweets': 'Desserts',\n    'sweet': 'Desserts',\n    \n    'drinks': 'Drinks',\n    'beverages': 'Beverages',\n    'beverage': 'Beverages',\n    'juice': 'Beverages',\n    'juices': 'Beverages',\n    \n    'combos': 'Combos',\n    'combo': 'Combos',\n    'meals': 'Combos',\n    'meal': 'Combos',\n    \n    // Add more variations as needed\n    'noodle': 'Noodles',\n    'noodles': 'Noodles',\n    'noodlewithgravy': 'Noodles with Gravy',\n    'chopsuey': 'Chop Suey',\n    'gravies': 'Gravies',\n    'gravy': 'Gravies',\n    'momos': 'Momos',\n    'momo': 'Momos',\n    'extra': 'Extras',\n    'extras': 'Extras',\n    'prawns': 'Prawns',\n    'prawn': 'Prawns',\n    'prawnsstarters': 'Prawn Starters',\n    'potice': 'Potice'\n  };\n  \n  const dynamicMapping = {};\n  \n  collectionNames.forEach(name => {\n    const lowerName = name.toLowerCase();\n    if (commonMappings[lowerName]) {\n      dynamicMapping[name] = commonMappings[lowerName];\n    } else {\n      // Create a display-friendly name\n      dynamicMapping[name] = name\n        .split(/[_-]/) // Split on underscores and hyphens\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n        .join(' ');\n    }\n  });\n  \n  return dynamicMapping;\n}\n\n// Function to fetch menu items from each collection dynamically\nexport async function fetchMenuItemsFromCustomDB(connection: mongoose.Connection, categoryFilter?: string, mongoUri?: string) {\n  try {\n    console.log('🔍 Starting to fetch menu items from custom database');\n    \n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Database name:', dbName);\n    console.log('🎯 Category filter:', categoryFilter || 'ALL');\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return [];\n    }\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    // Filter out system collections dynamically\n    const systemCollections = ['admin', 'local', 'config', 'system', 'test', 'users', 'sessions', 'accounts', 'tokens'];\n    const menuCollections = collections.filter(c => \n      !systemCollections.some(sys => c.name.toLowerCase().includes(sys.toLowerCase())) &&\n      !c.name.startsWith('_') &&\n      !c.name.startsWith('system.')\n    );\n    \n    console.log('🎯 Menu collections:', menuCollections.map(c => c.name));\n    \n    if (menuCollections.length === 0) {\n      console.log('❌ No menu collections found in custom database');\n      return [];\n    }\n    \n    // Create dynamic category mapping\n    const categoryMapping = createDynamicCategoryMapping(menuCollections.map(c => c.name));\n    console.log('🗺️ Dynamic category mapping:', categoryMapping);\n    \n    let allMenuItems = [];\n    \n    // If categoryFilter is provided, find the matching collection\n    let collectionsToQuery = menuCollections;\n    if (categoryFilter) {\n      // Try to find collection by display name or collection name\n      collectionsToQuery = menuCollections.filter(c => {\n        const displayName = categoryMapping[c.name];\n        return displayName?.toLowerCase() === categoryFilter.toLowerCase() || \n               c.name.toLowerCase() === categoryFilter.toLowerCase();\n      });\n      \n      console.log(`🎯 Filtering for category \"${categoryFilter}\", found collections:`, collectionsToQuery.map(c => c.name));\n    }\n    \n    for (const collection of collectionsToQuery) {\n      try {\n        console.log(`🔍 Fetching items from collection: ${collection.name}`);\n        const items = await connection.db.collection(collection.name).find({}).toArray();\n        \n        console.log(`📋 Found ${items.length} items in ${collection.name}`);\n        \n        // Get the display category name\n        const displayCategory = categoryMapping[collection.name] || collection.name;\n        \n        // Transform items to standardized format\n        const transformedItems = items.map(item => {\n          return {\n            _id: item._id,\n            name: item.name || item.title || item.itemName || 'Unknown Item',\n            description: item.description || item.desc || item.details || '',\n            price: item.price || item.cost || item.amount || 0,\n            category: displayCategory, // Use dynamic display category\n            isVeg: item.isVeg ?? item.veg ?? item.vegetarian ?? true,\n            image: item.image || item.imageUrl || item.photo || '',\n            restaurantId: item.restaurantId || new mongoose.Types.ObjectId(),\n            isAvailable: item.isAvailable ?? item.available ?? item.active ?? true,\n            createdAt: item.createdAt || new Date(),\n            updatedAt: item.updatedAt || new Date(),\n            __v: item.__v ?? 0,\n            originalCollection: collection.name,\n            originalData: item\n          };\n        });\n        \n        allMenuItems = allMenuItems.concat(transformedItems);\n        console.log(`📊 Added ${transformedItems.length} items from ${collection.name} with category \"${displayCategory}\"`);\n      } catch (error) {\n        console.error(`❌ Error fetching from collection ${collection.name}:`, error);\n      }\n    }\n    \n    console.log(`🎯 Total menu items found: ${allMenuItems.length}`);\n    return allMenuItems;\n  } catch (error) {\n    console.error('❌ Error fetching menu items from custom database:', error);\n    return [];\n  }\n}\n\n// Function to extract categories from collection names dynamically\nexport async function extractCategoriesFromCustomDB(connection: mongoose.Connection, mongoUri?: string) {\n  try {\n    console.log('🔍 Extracting categories from collection names');\n    \n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Database name:', dbName);\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n    }\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    // Filter out system collections dynamically\n    const systemCollections = ['admin', 'local', 'config', 'system', 'test', 'users', 'sessions', 'accounts', 'tokens'];\n    const menuCollections = collections.filter(c => \n      !systemCollections.some(sys => c.name.toLowerCase().includes(sys.toLowerCase())) &&\n      !c.name.startsWith('_') &&\n      !c.name.startsWith('system.')\n    );\n    \n    console.log('🎯 Menu collections (potential categories):', menuCollections.map(c => c.name));\n    \n    if (menuCollections.length === 0) {\n      console.log('❌ No valid collections found for categories');\n      return ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n    }\n    \n    // Create dynamic category mapping\n    const categoryMapping = createDynamicCategoryMapping(menuCollections.map(c => c.name));\n    \n    const categories = menuCollections.map(collection => {\n      const displayLabel = categoryMapping[collection.name];\n      console.log(`📌 Using collection name as category: \"${displayLabel}\" (from \"${collection.name}\")`);\n      return displayLabel;\n    });\n    \n    // Remove duplicates and sort\n    const uniqueCategories = Array.from(new Set(categories)).sort();\n    \n    console.log(`✅ Final categories from collection names:`, uniqueCategories);\n    \n    return uniqueCategories.length > 0 ? uniqueCategories : ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n  } catch (error) {\n    console.error('❌ Error extracting categories from collection names:', error);\n    return ['Starters', 'Main Course', 'Desserts', 'Beverages'];\n  }\n}\n\n// Function to create a menu item in the custom database dynamically\nexport async function createMenuItemInCustomDB(connection: mongoose.Connection, menuItemData: any, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Creating item in database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // Create reverse mapping from display names to collection names\n    const collectionNames = menuCollections.map(c => c.name);\n    const categoryMapping = createDynamicCategoryMapping(collectionNames);\n    \n    // Create reverse mapping\n    const displayToCollectionMapping = {};\n    Object.entries(categoryMapping).forEach(([collection, display]) => {\n      displayToCollectionMapping[display] = collection;\n    });\n    \n    let targetCollection = displayToCollectionMapping[menuItemData.category] || \n                          menuItemData.category?.toLowerCase() || \n                          'menuitems';\n    \n    // Verify the collection exists in the database\n    const collectionExists = menuCollections.some(col => col.name === targetCollection);\n    if (!collectionExists) {\n      console.log(`⚠️  Collection \"${targetCollection}\" not found, using first available collection`);\n      targetCollection = menuCollections.length > 0 ? menuCollections[0].name : 'menuitems';\n    }\n    \n    console.log(`Creating menu item in collection: ${targetCollection}`);\n    \n    // Get proper display category\n    const displayCategory = categoryMapping[targetCollection] || menuItemData.category;\n    \n    const transformedData = {\n      name: menuItemData.name,\n      description: menuItemData.description,\n      price: menuItemData.price,\n      category: displayCategory,\n      isVeg: menuItemData.isVeg !== undefined ? menuItemData.isVeg : true, // Use only isVeg field for MongoDB\n      image: menuItemData.image,\n      restaurantId: menuItemData.restaurantId || new mongoose.Types.ObjectId(),\n      isAvailable: menuItemData.isAvailable ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      __v: 0\n    };\n    \n    const result = await connection.db.collection(targetCollection).insertOne(transformedData);\n    console.log(`Menu item created with ID: ${result.insertedId}`);\n    \n    return {\n      _id: result.insertedId,\n      ...transformedData,\n      originalCollection: targetCollection\n    };\n  } catch (error) {\n    console.error('Error creating menu item in custom database:', error);\n    throw error;\n  }\n}\n\n// Function to update a menu item in the custom database dynamically\nexport async function updateMenuItemInCustomDB(connection: mongoose.Connection, itemId: string, updateData: any, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Updating item in database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // First, find which collection the item is currently in\n    let currentCollection = null;\n    let currentItem = null;\n    \n    for (const collection of menuCollections) {\n      try {\n        const item = await connection.db.collection(collection.name).findOne(\n          { _id: new mongoose.Types.ObjectId(itemId) }\n        );\n        \n        if (item) {\n          currentCollection = collection.name;\n          currentItem = item;\n          break;\n        }\n      } catch (error) {\n        console.error(`Error finding item in collection ${collection.name}:`, error);\n      }\n    }\n    \n    if (!currentCollection || !currentItem) {\n      throw new Error(`Menu item with ID ${itemId} not found in any collection`);\n    }\n    \n    // Create dynamic mappings\n    const collectionNames = menuCollections.map(c => c.name);\n    const categoryMapping = createDynamicCategoryMapping(collectionNames);\n    const displayToCollectionMapping = {};\n    Object.entries(categoryMapping).forEach(([collection, display]) => {\n      displayToCollectionMapping[display] = collection;\n    });\n    \n    // If category is being changed, move item to the new collection\n    if (updateData.category) {\n      const newCollectionName = displayToCollectionMapping[updateData.category] || \n                               updateData.category.toLowerCase();\n      \n      if (newCollectionName !== currentCollection) {\n        const newCollectionExists = menuCollections.some(col => col.name === newCollectionName);\n      \n        if (newCollectionExists) {\n          console.log(`🔄 Moving item from \"${currentCollection}\" to \"${newCollectionName}\"`);\n          \n          // Create the item in the new collection with proper field mapping\n          const newItemData = {\n            ...currentItem,\n            ...updateData,\n            isVeg: updateData.isVeg !== undefined ? updateData.isVeg : (currentItem.isVeg ?? currentItem.veg ?? true),\n            updatedAt: new Date(),\n            __v: currentItem.__v || 0\n          };\n          // Remove old veg field if it exists\n          delete newItemData.veg;\n          delete newItemData._id; // Remove old ID for new insertion\n          \n          const insertResult = await connection.db.collection(newCollectionName).insertOne(newItemData);\n          \n          // Delete from old collection\n          await connection.db.collection(currentCollection).deleteOne(\n            { _id: new mongoose.Types.ObjectId(itemId) }\n          );\n          \n          console.log(`✅ Menu item moved to collection: ${newCollectionName}`);\n          return {\n            _id: insertResult.insertedId,\n            ...newItemData,\n            originalCollection: newCollectionName\n          };\n        }\n      }\n    }\n    \n    // Update in current collection with proper field mapping\n    const updateFields = {\n      ...updateData,\n      updatedAt: new Date()\n    };\n    \n    // Remove old veg field and ensure isVeg is used\n    if (updateFields.veg !== undefined) {\n      delete updateFields.veg; // Remove old veg field\n    }\n    \n    const result = await connection.db.collection(currentCollection).findOneAndUpdate(\n      { _id: new mongoose.Types.ObjectId(itemId) },\n      { \n        $set: updateFields\n      },\n      { returnDocument: 'after' }\n    );\n    \n    if (result) {\n      console.log(`✅ Menu item updated in collection: ${currentCollection}`);\n      return {\n        _id: result._id,\n        name: result.name || result.title || result.itemName || 'Unknown Item',\n        description: result.description || result.desc || result.details || '',\n        price: result.price || result.cost || result.amount || 0,\n        category: result.category || categoryMapping[currentCollection] || 'Uncategorized',\n        isVeg: result.isVeg ?? result.vegetarian ?? result.veg ?? true,\n        image: result.image || result.imageUrl || result.photo || '',\n        isAvailable: result.isAvailable ?? result.available ?? result.active ?? true,\n        originalCollection: currentCollection,\n        originalData: result\n      };\n    }\n    \n    throw new Error('Menu item not found in any collection');\n  } catch (error) {\n    console.error('Error updating menu item in custom database:', error);\n    throw error;\n  }\n}\n\n// Function to delete a menu item from the custom database dynamically\nexport async function deleteMenuItemFromCustomDB(connection: mongoose.Connection, itemId: string, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Deleting item from database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // Try to find and delete the item from all collections\n    for (const collection of menuCollections) {\n      try {\n        const result = await connection.db.collection(collection.name).deleteOne(\n          { _id: new mongoose.Types.ObjectId(itemId) }\n        );\n        \n        if (result.deletedCount > 0) {\n          console.log(`Menu item deleted from collection: ${collection.name}`);\n          return true;\n        }\n      } catch (error) {\n        console.error(`Error deleting from collection ${collection.name}:`, error);\n      }\n    }\n    \n    throw new Error('Menu item not found in any collection');\n  } catch (error) {\n    console.error('Error deleting menu item from custom database:', error);\n    throw error;\n  }\n}","size_bytes":36924},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const menuItems = pgTable(\"menu_items\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: integer(\"price\").notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  isVeg: boolean(\"is_veg\").notNull(),\n  image: text(\"image\").notNull(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: serial(\"id\").primaryKey(),\n  menuItemId: integer(\"menu_item_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n});\n\nexport const insertMenuItemSchema = createInsertSchema(menuItems);\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({ id: true });\n\nexport type MenuItem = typeof menuItems.$inferSelect;\nexport type InsertMenuItem = z.infer<typeof insertMenuItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":1462},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useEffect } from \"react\";\nimport NotFound from \"@/pages/not-found\";\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport RestaurantForm from \"@/pages/admin/restaurant-form\";\nimport MenuManagement from \"@/pages/admin/menu-management\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\n\nfunction HomePage() {\n  const [, setLocation] = useLocation();\n  \n  useEffect(() => {\n    setLocation(\"/admin/login\");\n  }, [setLocation]);\n  \n  return null;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      \n      {/* Admin Routes */}\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/admin/restaurants/new\" component={RestaurantForm} />\n      <Route path=\"/admin/restaurants/:id/edit\" component={RestaurantForm} />\n      <Route path=\"/admin/restaurants/:restaurantId/menu\" component={MenuManagement} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1615},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700;800;900&family=Cinzel+Decorative:wght@400;600;700;900&family=Cormorant+Garamond:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Global theme styles - Apply color themes to entire application */\n.theme-blue {\n  --primary: hsl(214, 85%, 50%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(210, 40%, 96%);\n  --accent: hsl(214, 85%, 50%);\n  --accent-foreground: #ffffff;\n}\n\n.theme-purple {\n  --primary: hsl(270, 95%, 50%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(270, 40%, 96%);\n  --accent: hsl(270, 95%, 50%);\n  --accent-foreground: #ffffff;\n}\n\n.theme-green {\n  --primary: hsl(120, 95%, 40%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(120, 40%, 96%);\n  --accent: hsl(120, 95%, 40%);\n  --accent-foreground: #ffffff;\n}\n\n.theme-teal {\n  --primary: hsl(180, 95%, 40%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(180, 40%, 96%);\n  --accent: hsl(180, 95%, 40%);\n  --accent-foreground: #ffffff;\n}\n\n.theme-orange {\n  --primary: hsl(30, 95%, 50%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(30, 40%, 96%);\n  --accent: hsl(30, 95%, 50%);\n  --accent-foreground: #ffffff;\n}\n\n.theme-red {\n  --primary: hsl(0, 95%, 50%);\n  --primary-foreground: #ffffff;\n  --secondary: hsl(0, 40%, 96%);\n  --accent: hsl(0, 95%, 50%);\n  --accent-foreground: #ffffff;\n}\n\n/* Apply theme colors globally to buttons, inputs, and other components */\nbutton[type=\"submit\"], .btn-primary, button[data-variant=\"default\"], .bg-blue-600, .bg-blue-500 {\n  background-color: var(--primary) !important;\n  color: var(--primary-foreground) !important;\n}\n\nbutton[type=\"submit\"]:hover, .btn-primary:hover, button[data-variant=\"default\"]:hover, .bg-blue-600:hover, .bg-blue-500:hover {\n  opacity: 0.9 !important;\n}\n\n.text-primary, .text-blue-600, .text-blue-500 {\n  color: var(--primary) !important;\n}\n\n.bg-primary {\n  background-color: var(--primary) !important;\n}\n\n.border-primary, .border-blue-600, .border-blue-500 {\n  border-color: var(--primary) !important;\n}\n\n/* Force theme application on common Tailwind classes */\n.bg-gradient-to-r {\n  background: linear-gradient(to right, var(--primary), var(--accent)) !important;\n}\n\n/* Apply to login and main buttons - more specific selectors */\nbutton:not([disabled]):not([class*=\"variant-secondary\"]):not([class*=\"variant-outline\"]):not([class*=\"variant-ghost\"]):not([class*=\"destructive\"]) {\n  background-color: var(--primary) !important;\n  color: var(--primary-foreground) !important;\n}\n\n/* Specific button classes */\n.bg-blue-600, .bg-blue-500, .bg-light-blue, .text-white {\n  background-color: var(--primary) !important;\n  color: var(--primary-foreground) !important;\n}\n\n/* Main navigation and cards */\n.card, .bg-white {\n  transition: all 0.2s ease;\n}\n\n/* Dashboard specific elements */\n.dashboard .bg-blue-50, .bg-blue-50 {\n  background-color: var(--secondary) !important;\n}\n\n/* Ensure Add Restaurant and other action buttons use theme colors */\n.bg-blue-600:hover, .bg-blue-500:hover {\n  opacity: 0.8 !important;\n}\n\n/* Text colors for dashboard elements */\n.text-blue-600, .text-blue-500 {\n  color: var(--primary) !important;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(214, 85%, 50%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(214, 85%, 50%);\n  --radius: 0.5rem;\n  \n  /* Light Blue and White theme colors */\n  --light-blue: hsl(214, 85%, 50%);\n  --light-blue-hover: hsl(214, 85%, 45%);\n  --light-blue-light: hsl(214, 100%, 97%);\n  --light-blue-dark: hsl(214, 85%, 35%);\n  --clean-white: hsl(0, 0%, 100%);\n  --clean-gray: hsl(0, 0%, 96%);\n  --clean-gray-dark: hsl(0, 0%, 85%);\n  --clean-text: hsl(0, 0%, 10%);\n  --clean-text-light: hsl(0, 0%, 40%);\n  --clean-border: hsl(0, 0%, 90%);\n  --clean-success: hsl(120, 60%, 50%);\n  --clean-warning: hsl(38, 92%, 50%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n\n  .font-playfair {\n    font-family: 'Playfair Display', serif;\n  }\n\n  .font-cinzel {\n    font-family: 'Cinzel Decorative', serif;\n  }\n\n  .font-cormorant {\n    font-family: 'Cormorant Garamond', serif;\n  }\n\n  .elegant-gradient {\n    background: linear-gradient(135deg, var(--elegant-black) 0%, var(--elegant-dark-gray) 100%);\n  }\n\n  .elegant-gold-gradient {\n    background: linear-gradient(135deg, var(--elegant-gold) 0%, var(--elegant-gold-light) 100%);\n  }\n\n  .elegant-card {\n    background: var(--elegant-white);\n    border: 2px solid var(--elegant-light-gray);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n\n  .elegant-card-dark {\n    background: var(--elegant-dark-gray);\n    border: 2px solid var(--elegant-gold);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n  }\n\n  .dish-card {\n    transition: all 0.3s ease;\n    background: var(--elegant-white);\n    border: 1px solid var(--elegant-light-gray);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .dish-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n    border-color: var(--elegant-gold);\n  }\n\n  .floating-particle {\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    background: var(--elegant-gold);\n    border-radius: 50%;\n    pointer-events: none;\n    animation: float 6s ease-in-out infinite;\n    opacity: 0.7;\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n      opacity: 0.7;\n    }\n    50% { \n      transform: translateY(-20px); \n      opacity: 1;\n    }\n  }\n\n  .elegant-shadow {\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n\n  .elegant-shadow-hover {\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n  }\n\n  .elegant-gradient {\n    background: linear-gradient(135deg, var(--elegant-cream) 0%, var(--elegant-light-cream) 100%);\n  }\n\n  .elegant-gold-gradient {\n    background: linear-gradient(135deg, var(--elegant-gold) 0%, var(--elegant-light-gold) 100%);\n  }\n\n  .elegant-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border: 1px solid var(--elegant-light-gray);\n  }\n\n  .dish-card {\n    background: white;\n    border: 1px solid var(--elegant-light-gray);\n  }\n\n  .dish-card:hover {\n    border-color: var(--elegant-gold);\n  }\n}\n","size_bytes":7634},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/db/dynamic-mongodb.ts":{"content":"import mongoose from 'mongoose';\n\n// Dynamic MongoDB connections for restaurant-specific databases\nconst connectionPool = new Map<string, mongoose.Connection>();\n\nexport async function connectToRestaurantDatabase(mongoUri: string): Promise<mongoose.Connection> {\n  // If connection already exists, return it\n  if (connectionPool.has(mongoUri)) {\n    const existingConnection = connectionPool.get(mongoUri);\n    if (existingConnection && existingConnection.readyState === 1) {\n      return existingConnection;\n    }\n    // Remove stale connection\n    connectionPool.delete(mongoUri);\n  }\n\n  try {\n    // Parse the MongoDB URI to extract potential database name\n    let finalUri = mongoUri;\n    let databaseName = null;\n    \n    console.log(`🔗 Original URI: ${mongoUri.replace(/:[^:]*@/, ':***@')}`);\n    \n    // Extract database name from cluster name or URI path\n    try {\n      // Method 1: Try to extract from URI path\n      const url = new URL(mongoUri.replace('mongodb+srv://', 'https://'));\n      const pathParts = url.pathname.split('/');\n      if (pathParts.length > 1 && pathParts[1] && pathParts[1] !== '?') {\n        databaseName = pathParts[1];\n        console.log(`📊 Database name from URI path: ${databaseName}`);\n      }\n    } catch (urlError) {\n      console.log('⚠️ Could not parse URI path for database name');\n    }\n    \n    // Method 2: Extract from cluster name if no database in path\n    if (!databaseName) {\n      try {\n        // Extract cluster name from the URI (e.g., mingsdb from mingsdb.mmjpnwc.mongodb.net)\n        const clusterMatch = mongoUri.match(/@([^.]+)\\./);\n        if (clusterMatch && clusterMatch[1]) {\n          databaseName = clusterMatch[1];\n          console.log(`📊 Database name from cluster name: ${databaseName}`);\n        }\n      } catch (error) {\n        console.log('⚠️ Could not extract database name from cluster name');\n      }\n    }\n    \n    // Method 3: If still no database name, try appName parameter\n    if (!databaseName) {\n      try {\n        const appNameMatch = mongoUri.match(/appName=([^&]+)/);\n        if (appNameMatch && appNameMatch[1]) {\n          const appName = appNameMatch[1];\n          // Convert appName to lowercase for database name\n          databaseName = appName.toLowerCase();\n          console.log(`📊 Database name from appName: ${databaseName}`);\n        }\n      } catch (error) {\n        console.log('⚠️ Could not extract database name from appName');\n      }\n    }\n    \n    // If we found a database name, ensure it's in the URI\n    if (databaseName) {\n      if (!mongoUri.includes('/', mongoUri.lastIndexOf('@') + 1) || mongoUri.includes('/?')) {\n        // Add database name to URI\n        finalUri = mongoUri.replace('?', `/${databaseName}?`);\n        console.log(`🔧 Modified URI to include database name: ${finalUri.replace(/:[^:]*@/, ':***@')}`);\n      }\n    } else {\n      // Fallback: use 'restaurant' as default database name\n      databaseName = 'restaurant';\n      finalUri = mongoUri.replace('?', `/${databaseName}?`);\n      console.log(`⚠️ Using fallback database name: ${databaseName}`);\n    }\n    \n    console.log(`🎯 Target database: ${databaseName}`);\n    \n    // Create new connection with the properly formatted URI\n    const connection = await Promise.race([\n      mongoose.createConnection(finalUri, {\n        connectTimeoutMS: 5001,\n        serverSelectionTimeoutMS: 5001,\n        maxPoolSize: 3,\n        minPoolSize: 1,\n        // Explicitly specify the database name\n        dbName: databaseName\n      }),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error(\"Connection timeout\")), 6000)\n      )\n    ]) as mongoose.Connection;\n    \n    // Store connection for reuse\n    connectionPool.set(mongoUri, connection);\n    \n    console.log(`✅ Connected to cluster: ${mongoUri.split('@')[1]?.split('/')[0] || 'unknown'}`);\n    \n    // Wait for connection to be ready\n    await new Promise((resolve, reject) => {\n      if (connection.readyState === 1) {\n        resolve(null);\n      } else {\n        const timeout = setTimeout(() => {\n          reject(new Error('Connection ready timeout'));\n        }, 3000);\n        \n        connection.once('connected', () => {\n          clearTimeout(timeout);\n          resolve(null);\n        });\n        \n        connection.once('error', (error) => {\n          clearTimeout(timeout);\n          reject(error);\n        });\n      }\n    });\n    \n    // Verify the actual database name\n    const actualDbName = connection.db?.databaseName;\n    console.log(`📊 Actually connected to database: ${actualDbName}`);\n    \n    if (actualDbName !== databaseName) {\n      console.warn(`⚠️ Connected to different database than expected. Expected: ${databaseName}, Actual: ${actualDbName}`);\n    }\n    \n    // Test the connection by listing collections\n    try {\n      const collections = await connection.db.listCollections().toArray();\n      console.log(`✅ Database verified - found ${collections.length} collections: ${collections.map(c => c.name).join(', ')}`);\n    } catch (error) {\n      console.warn('⚠️ Could not list collections:', error.message);\n    }\n    \n    return connection;\n  } catch (error) {\n    console.error('❌ Failed to connect to restaurant database:', error);\n    throw error;\n  }\n}\n\nexport function closeRestaurantConnection(mongoUri: string) {\n  const connection = connectionPool.get(mongoUri);\n  if (connection) {\n    connection.close();\n    connectionPool.delete(mongoUri);\n    console.log(`Closed connection to restaurant database: ${mongoUri.split('@')[1]?.split('/')[0] || 'unknown'}`);\n  }\n}\n\n// Define flexible menu item schema for dynamic connections\nexport function getMenuItemModel(connection: mongoose.Connection) {\n  const menuItemSchema = new mongoose.Schema({\n    name: {\n      type: String,\n      required: true,\n      trim: true\n    },\n    description: {\n      type: String,\n      required: true\n    },\n    price: {\n      type: Number,\n      required: true,\n      min: 0\n    },\n    category: {\n      type: String,\n      required: true\n    },\n    isVeg: {\n      type: Boolean,\n      required: true\n    },\n    image: {\n      type: String,\n      required: true\n    },\n    restaurantId: {\n      type: mongoose.Schema.Types.ObjectId,\n      required: true\n    },\n    isAvailable: {\n      type: Boolean,\n      default: true\n    }\n  }, { \n    strict: false, \n    timestamps: true \n  });\n\n  // Use existing model if already compiled\n  if (connection.models['MenuItem']) {\n    return connection.models['MenuItem'];\n  }\n  \n  return connection.model('MenuItem', menuItemSchema);\n}\n\n// Helper function to ensure we're connected to the right database\nasync function ensureCorrectDatabase(connection: mongoose.Connection, mongoUri: string) {\n  try {\n    const currentDbName = connection.db?.databaseName;\n    console.log(`🔍 Current database: ${currentDbName}`);\n    \n    // If connected to 'test' database, try to switch to the intended database\n    if (currentDbName === 'test' || !currentDbName) {\n      console.log('⚠️ Connected to test database or undefined database, attempting to identify correct database');\n      \n      // Extract intended database name from URI or cluster name\n      let intendedDbName = null;\n      \n      // Method 1: From cluster name\n      const clusterMatch = mongoUri.match(/@([^.]+)\\./);\n      if (clusterMatch && clusterMatch[1]) {\n        intendedDbName = clusterMatch[1];\n      }\n      \n      // Method 2: From appName\n      if (!intendedDbName) {\n        const appNameMatch = mongoUri.match(/appName=([^&]+)/);\n        if (appNameMatch && appNameMatch[1]) {\n          intendedDbName = appNameMatch[1].toLowerCase();\n        }\n      }\n      \n      if (intendedDbName) {\n        console.log(`🔄 Switching to database: ${intendedDbName}`);\n        // Switch to the intended database\n        const targetDb = connection.db.client.db(intendedDbName);\n        // Update the connection's db reference\n        (connection as any).db = targetDb;\n        console.log(`✅ Switched to database: ${targetDb.databaseName}`);\n      }\n    }\n    \n    return connection;\n  } catch (error) {\n    console.error('❌ Error ensuring correct database:', error);\n    return connection;\n  }\n}\n\n// Function to detect and analyze database structure dynamically\nexport async function analyzeCustomDatabase(connection: mongoose.Connection, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('🔍 Analyzing database structure');\n    console.log('📊 Database name:', dbName);\n    console.log('🔗 Connection state:', connection.readyState);\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return [];\n    }\n    \n    // Check if we're in the test database and try to find the actual database\n    if (dbName === 'test') {\n      console.log('⚠️ Connected to test database, attempting to find actual restaurant database');\n      \n      // Try to list all databases to find potential restaurant databases\n      try {\n        const adminDb = connection.db.admin();\n        const { databases } = await adminDb.listDatabases();\n        \n        console.log('📋 Available databases:', databases.map(db => db.name));\n        \n        // Look for non-system databases\n        const restaurantDbs = databases.filter(db => \n          !['admin', 'local', 'config', 'test'].includes(db.name)\n        );\n        \n        if (restaurantDbs.length > 0) {\n          // Switch to the first non-system database\n          const targetDbName = restaurantDbs[0].name;\n          console.log(`🔄 Switching from test database to: ${targetDbName}`);\n          \n          const targetDb = connection.db.client.db(targetDbName);\n          (connection as any).db = targetDb;\n          \n          console.log(`✅ Successfully switched to database: ${targetDb.databaseName}`);\n        }\n      } catch (adminError) {\n        console.warn('⚠️ Could not list databases (may need admin privileges):', adminError.message);\n      }\n    }\n    \n    const finalDbName = connection.db?.databaseName;\n    console.log('📊 Final database name:', finalDbName);\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    if (collections.length === 0) {\n      console.log('📭 No collections found in database, this might indicate connection to wrong database');\n      return [];\n    }\n    \n    // Filter collections dynamically - exclude system collections\n    const systemCollectionNames = [\n      'admin', 'local', 'config', 'system', 'test', \n      'users', 'sessions', 'accounts', 'tokens'\n    ];\n    \n    const menuCollections = collections.filter(c => \n      // Skip collections that start with system prefixes\n      !c.name.startsWith('__') && \n      !c.name.startsWith('system.') &&\n      !c.name.startsWith('_') &&\n      // Skip known system collections\n      !systemCollectionNames.some(sys => \n        c.name.toLowerCase().includes(sys.toLowerCase())\n      )\n    );\n    \n    console.log('🎯 Menu collections (all non-system collections):', menuCollections.map(c => c.name));\n    \n    // Analyze each collection to understand its structure\n    for (const collection of menuCollections) {\n      console.log(`🔍 Analyzing collection: ${collection.name}`);\n      \n      try {\n        const sampleDoc = await connection.db.collection(collection.name).findOne({});\n        const docCount = await connection.db.collection(collection.name).countDocuments();\n        \n        console.log(`📊 Collection \"${collection.name}\" has ${docCount} documents`);\n        \n        if (sampleDoc) {\n          console.log(`📄 Sample document structure:`, {\n            hasName: !!(sampleDoc.name || sampleDoc.title || sampleDoc.itemName),\n            hasPrice: !!(sampleDoc.price || sampleDoc.cost || sampleDoc.amount),\n            hasDescription: !!(sampleDoc.description || sampleDoc.desc),\n            hasCategory: !!(sampleDoc.category || sampleDoc.type),\n            hasImage: !!(sampleDoc.image || sampleDoc.imageUrl || sampleDoc.photo),\n            keys: Object.keys(sampleDoc).slice(0, 10) // Show first 10 keys\n          });\n          \n          if ((sampleDoc.name || sampleDoc.title) && (sampleDoc.price || sampleDoc.cost)) {\n            console.log(`✅ Collection ${collection.name} appears to contain menu items`);\n          } else if (docCount > 0) {\n            console.log(`⚠️ Collection ${collection.name} has data but structure is unclear`);\n          }\n        } else {\n          console.log(`📭 Collection ${collection.name} is empty (can be used for new items)`);\n        }\n      } catch (error) {\n        console.error(`❌ Error analyzing collection ${collection.name}:`, error);\n      }\n    }\n    \n    console.log('🎯 Final menu-related collections found:', menuCollections.map(c => c.name));\n    return menuCollections;\n  } catch (error) {\n    console.error('❌ Error analyzing database structure:', error);\n    return [];\n  }\n}\n\n// Function to fetch menu items from each collection with strict validation\nexport async function fetchMenuItemsFromCustomDB(connection: mongoose.Connection, categoryFilter?: string, mongoUri?: string) {\n  try {\n    console.log('🔍 Starting to fetch menu items from custom database with strict validation');\n    \n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Database name:', dbName);\n    console.log('🎯 Category filter:', categoryFilter || 'ALL');\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return [];\n    }\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    // Filter out system collections dynamically\n    const systemCollections = ['admin', 'local', 'config', 'system', 'test', 'users', 'sessions', 'accounts', 'tokens'];\n    const menuCollections = collections.filter(c => \n      !systemCollections.some(sys => c.name.toLowerCase().includes(sys.toLowerCase())) &&\n      !c.name.startsWith('_') &&\n      !c.name.startsWith('system.')\n    );\n    \n    console.log('🎯 Menu collections:', menuCollections.map(c => c.name));\n    \n    if (menuCollections.length === 0) {\n      console.log('❌ No menu collections found in custom database');\n      return [];\n    }\n    \n    let allMenuItems = [];\n    \n    // If categoryFilter is provided, find the matching collection by exact name\n    let collectionsToQuery = menuCollections;\n    if (categoryFilter) {\n      // Direct match with collection name (exact match)\n      collectionsToQuery = menuCollections.filter(c => \n        c.name === categoryFilter\n      );\n      \n      console.log(`🎯 Filtering for category \"${categoryFilter}\", found collections:`, collectionsToQuery.map(c => c.name));\n    }\n    \n    for (const collection of collectionsToQuery) {\n      try {\n        console.log(`🔍 Fetching items from collection: ${collection.name}`);\n        \n        // STRICT VALIDATION: Only fetch items where category field exactly matches collection name\n        const items = await connection.db.collection(collection.name).find({\n          category: collection.name  // Only items with exact category match\n        }).toArray();\n        \n        console.log(`📋 Found ${items.length} items in ${collection.name} with matching category field`);\n        \n        // Also log if there are items with non-matching categories for debugging\n        const totalItems = await connection.db.collection(collection.name).countDocuments();\n        if (totalItems > items.length) {\n          console.warn(`⚠️ Collection ${collection.name} has ${totalItems - items.length} items with non-matching category fields - these are excluded`);\n        }\n        \n        // Transform items to standardized format\n        const transformedItems = items.map(item => {\n          return {\n            _id: item._id,\n            name: item.name || item.title || item.itemName || 'Unknown Item',\n            description: item.description || item.desc || item.details || '',\n            price: item.price || item.cost || item.amount || 0,\n            category: item.category, // Use the exact category from document (should match collection name)\n            isVeg: item.isVeg ?? item.veg ?? item.vegetarian ?? true,\n            image: item.image || item.imageUrl || item.photo || '',\n            restaurantId: item.restaurantId || new mongoose.Types.ObjectId(),\n            isAvailable: item.isAvailable ?? item.available ?? item.active ?? true,\n            createdAt: item.createdAt || new Date(),\n            updatedAt: item.updatedAt || new Date(),\n            __v: item.__v ?? 0,\n            originalCollection: collection.name,\n            originalData: item\n          };\n        });\n        \n        allMenuItems = allMenuItems.concat(transformedItems);\n        console.log(`📊 Added ${transformedItems.length} valid items from ${collection.name} with category \"${collection.name}\"`);\n      } catch (error) {\n        console.error(`❌ Error fetching from collection ${collection.name}:`, error);\n      }\n    }\n    \n    console.log(`🎯 Total valid menu items found: ${allMenuItems.length}`);\n    return allMenuItems;\n  } catch (error) {\n    console.error('❌ Error fetching menu items from custom database:', error);\n    return [];\n  }\n}\n\n// Function to extract categories from collection names (all collections = categories)\nexport async function extractCategoriesFromCustomDB(connection: mongoose.Connection, mongoUri?: string) {\n  try {\n    console.log('🔍 Extracting categories from collection names (all collections = categories)');\n    \n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Database name:', dbName);\n    \n    if (!dbName) {\n      console.error('❌ Cannot determine database name from connection');\n      return ['starters', 'maincourse', 'desserts', 'drinks'];\n    }\n    \n    // Get all collections in the database\n    const collections = await connection.db.listCollections().toArray();\n    console.log('📋 Available collections:', collections.map(c => c.name));\n    \n    // Filter out system collections dynamically\n    const systemCollections = ['admin', 'local', 'config', 'system', 'test', 'users', 'sessions', 'accounts', 'tokens'];\n    const menuCollections = collections.filter(c => \n      !systemCollections.some(sys => c.name.toLowerCase().includes(sys.toLowerCase())) &&\n      !c.name.startsWith('_') &&\n      !c.name.startsWith('system.')\n    );\n    \n    console.log('🎯 Menu collections (all are valid categories):', menuCollections.map(c => c.name));\n    \n    if (menuCollections.length === 0) {\n      console.log('❌ No valid collections found for categories');\n      return ['starters', 'maincourse', 'desserts', 'drinks'];\n    }\n    \n    // Since collection name = category name, use all collection names as categories\n    const categories = menuCollections.map(collection => {\n      console.log(`✅ Using collection \"${collection.name}\" as category`);\n      return collection.name;\n    });\n    \n    // Remove duplicates and sort\n    const uniqueCategories = Array.from(new Set(categories)).sort();\n    \n    console.log(`✅ All categories from collection names:`, uniqueCategories);\n    \n    return uniqueCategories.length > 0 ? uniqueCategories : ['starters', 'maincourse', 'desserts', 'drinks'];\n  } catch (error) {\n    console.error('❌ Error extracting categories from collection names:', error);\n    return ['starters', 'maincourse', 'desserts', 'drinks'];\n  }\n}\n\n// Function to create a menu item in the custom database dynamically\nexport async function createMenuItemInCustomDB(connection: mongoose.Connection, menuItemData: any, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Creating item in database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // Use the category directly as collection name\n    let targetCollection = menuItemData.category?.toLowerCase() || 'menuitems';\n    \n    // Verify the collection exists in the database\n    const collectionExists = menuCollections.some(col => col.name === targetCollection);\n    if (!collectionExists) {\n      console.log(`⚠️  Collection \"${targetCollection}\" not found, using first available collection`);\n      targetCollection = menuCollections.length > 0 ? menuCollections[0].name : 'menuitems';\n    }\n    \n    console.log(`Creating menu item in collection: ${targetCollection}`);\n    \n    const transformedData = {\n      name: menuItemData.name,\n      description: menuItemData.description,\n      price: menuItemData.price,\n      category: targetCollection, // Use collection name as category\n      isVeg: menuItemData.isVeg !== undefined ? menuItemData.isVeg : true, // Use only isVeg field for MongoDB\n      image: menuItemData.image,\n      restaurantId: menuItemData.restaurantId || new mongoose.Types.ObjectId(),\n      isAvailable: menuItemData.isAvailable ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      __v: 0\n    };\n    \n    const result = await connection.db.collection(targetCollection).insertOne(transformedData);\n    console.log(`Menu item created with ID: ${result.insertedId}`);\n    \n    return {\n      _id: result.insertedId,\n      ...transformedData,\n      originalCollection: targetCollection\n    };\n  } catch (error) {\n    console.error('Error creating menu item in custom database:', error);\n    throw error;\n  }\n}\n\n// Function to update a menu item in the custom database dynamically\nexport async function updateMenuItemInCustomDB(connection: mongoose.Connection, itemId: string, updateData: any, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Updating item in database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // First, find which collection the item is currently in\n    let currentCollection = null;\n    let currentItem = null;\n    \n    for (const collection of menuCollections) {\n      try {\n        const item = await connection.db.collection(collection.name).findOne(\n          { _id: new mongoose.Types.ObjectId(itemId) }\n        );\n        \n        if (item) {\n          currentCollection = collection.name;\n          currentItem = item;\n          break;\n        }\n      } catch (error) {\n        console.error(`Error finding item in collection ${collection.name}:`, error);\n      }\n    }\n    \n    if (!currentCollection || !currentItem) {\n      throw new Error(`Menu item with ID ${itemId} not found in any collection`);\n    }\n    \n    // If category is being changed, move item to the new collection\n    if (updateData.category) {\n      const newCollectionName = updateData.category.toLowerCase();\n      \n      if (newCollectionName !== currentCollection) {\n        const newCollectionExists = menuCollections.some(col => col.name === newCollectionName);\n      \n        if (newCollectionExists) {\n          console.log(`🔄 Moving item from \"${currentCollection}\" to \"${newCollectionName}\"`);\n          \n          // Create the item in the new collection with proper field mapping\n          const newItemData = {\n            ...currentItem,\n            ...updateData,\n            category: newCollectionName, // Ensure category matches collection name\n            isVeg: updateData.isVeg !== undefined ? updateData.isVeg : (currentItem.isVeg ?? currentItem.veg ?? true),\n            updatedAt: new Date(),\n            __v: currentItem.__v || 0\n          };\n          // Remove old veg field if it exists\n          delete newItemData.veg;\n          delete newItemData._id; // Remove old ID for new insertion\n          \n          const insertResult = await connection.db.collection(newCollectionName).insertOne(newItemData);\n          \n          // Delete from old collection\n          await connection.db.collection(currentCollection).deleteOne(\n            { _id: new mongoose.Types.ObjectId(itemId) }\n          );\n          \n          console.log(`✅ Menu item moved to collection: ${newCollectionName}`);\n          return {\n            _id: insertResult.insertedId,\n            ...newItemData,\n            originalCollection: newCollectionName\n          };\n        }\n      }\n    }\n    \n    // Update in current collection with proper field mapping\n    const updateFields = {\n      ...updateData,\n      category: currentCollection, // Ensure category matches collection name\n      updatedAt: new Date()\n    };\n    \n    // Remove old veg field and ensure isVeg is used\n    if (updateFields.veg !== undefined) {\n      delete updateFields.veg; // Remove old veg field\n    }\n    \n    const result = await connection.db.collection(currentCollection).findOneAndUpdate(\n      { _id: new mongoose.Types.ObjectId(itemId) },\n      { \n        $set: updateFields\n      },\n      { returnDocument: 'after' }\n    );\n    \n    if (result) {\n      console.log(`✅ Menu item updated in collection: ${currentCollection}`);\n      return {\n        _id: result._id,\n        name: result.name || result.title || result.itemName || 'Unknown Item',\n        description: result.description || result.desc || result.details || '',\n        price: result.price || result.cost || result.amount || 0,\n        category: currentCollection, // Use collection name as category\n        isVeg: result.isVeg ?? result.vegetarian ?? result.veg ?? true,\n        image: result.image || result.imageUrl || result.photo || '',\n        isAvailable: result.isAvailable ?? result.available ?? result.active ?? true,\n        originalCollection: currentCollection,\n        originalData: result\n      };\n    }\n    \n    throw new Error('Menu item not found in any collection');\n  } catch (error) {\n    console.error('Error updating menu item in custom database:', error);\n    throw error;\n  }\n}\n\n// Function to delete a menu item from the custom database dynamically\nexport async function deleteMenuItemFromCustomDB(connection: mongoose.Connection, itemId: string, mongoUri?: string) {\n  try {\n    // Ensure we're connected to the correct database\n    if (mongoUri) {\n      connection = await ensureCorrectDatabase(connection, mongoUri);\n    }\n    \n    const dbName = connection.db?.databaseName;\n    console.log('📊 Deleting item from database:', dbName);\n    \n    const menuCollections = await analyzeCustomDatabase(connection, mongoUri);\n    \n    // Try to find and delete the item from all collections\n    for (const collection of menuCollections) {\n      try {\n        const result = await connection.db.collection(collection.name).deleteOne(\n          { _id: new mongoose.Types.ObjectId(itemId) }\n        );\n        \n        if (result.deletedCount > 0) {\n          console.log(`Menu item deleted from collection: ${collection.name}`);\n          return true;\n        }\n      } catch (error) {\n        console.error(`Error deleting from collection ${collection.name}:`, error);\n      }\n    }\n    \n    throw new Error('Menu item not found in any collection');\n  } catch (error) {\n    console.error('Error deleting menu item from custom database:', error);\n    throw error;\n  }\n}","size_bytes":28133},"server/db/mongodb.ts":{"content":"import mongoose from 'mongoose';\n\nlet isConnected = false;\n\nexport async function connectToDatabase() {\n  if (isConnected) {\n    return;\n  }\n\n  const MONGODB_URI = process.env.MONGODB_URI;\n\n  if (!MONGODB_URI) {\n    console.log('⚠️  MONGODB_URI not provided - continuing without MongoDB connection');\n    return;\n  }\n\n  try {\n    console.log('Attempting to connect to MongoDB...');\n    await mongoose.connect(MONGODB_URI, {\n      connectTimeoutMS: 2000,\n      serverSelectionTimeoutMS: 2000,\n      maxPoolSize: 5,\n      minPoolSize: 1,\n      retryWrites: true,\n      w: 'majority'\n    });\n    isConnected = true;\n    console.log('✅ Connected to MongoDB successfully');\n  } catch (error) {\n    console.error('❌ Error connecting to MongoDB:', error);\n    console.log('⚠️  Continuing without MongoDB connection - admin features will be disabled');\n    // Don't throw error, just log it so the server can start\n  }\n}\n\nexport { mongoose };","size_bytes":946},"server/middleware/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { Request, Response, NextFunction } from 'express';\nimport { Admin } from '../models/Admin';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'default-dev-secret-change-in-production';\n\nexport interface AuthRequest extends Request {\n  admin?: any;\n}\n\nexport const authenticateAdmin = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  try {\n    const token = req.header('Authorization')?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.status(401).json({ message: 'No token provided' });\n    }\n\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    \n    // Try to find admin in MongoDB first, then fallback\n    try {\n      const admin = await Admin.findById(decoded.id).select('-password');\n      if (admin) {\n        req.admin = admin;\n        return next();\n      }\n    } catch (mongoError) {\n      // MongoDB not available, use fallback\n    }\n\n    // Fallback authentication for when MongoDB is not available\n    if (decoded.id === 'admin-001') {\n      req.admin = {\n        _id: 'admin-001',\n        id: 'admin-001',\n        username: 'admin',\n        email: 'admin@example.com',\n        role: 'admin'\n      };\n      return next();\n    }\n\n    return res.status(401).json({ message: 'Admin not found' });\n  } catch (error) {\n    return res.status(401).json({ message: 'Invalid token' });\n  }\n};\n\nexport const generateToken = (adminId: string) => {\n  return jwt.sign({ id: adminId }, JWT_SECRET, { expiresIn: '24h' });\n};","size_bytes":1499},"server/models/Admin.ts":{"content":"import mongoose from 'mongoose';\n\nconst adminSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  role: {\n    type: String,\n    default: 'admin'\n  },\n  // Theme settings\n  theme: {\n    type: String,\n    enum: ['blue', 'green', 'purple', 'red', 'orange', 'teal'],\n    default: 'blue'\n  },\n  darkMode: {\n    type: Boolean,\n    default: false\n  },\n  compactMode: {\n    type: Boolean,\n    default: false\n  },\n  // Security settings\n  twoFactorEnabled: {\n    type: Boolean,\n    default: false\n  },\n  loginAlerts: {\n    type: Boolean,\n    default: true\n  },\n  sessionTimeout: {\n    type: Number,\n    default: 30 // minutes\n  },\n  // System settings\n  emailNotifications: {\n    type: Boolean,\n    default: true\n  },\n  autoBackup: {\n    type: Boolean,\n    default: true\n  },\n  maxRestaurants: {\n    type: Number,\n    default: 10\n  }\n}, {\n  timestamps: true\n});\n\nexport const Admin = mongoose.model('Admin', adminSchema);\nexport type AdminType = mongoose.InferSchemaType<typeof adminSchema>;","size_bytes":1179},"server/models/MenuItem.ts":{"content":"import mongoose from 'mongoose';\n\nconst menuItemSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  price: {\n    type: Number,\n    required: true,\n    min: 0\n  },\n  category: {\n    type: String,\n    required: true\n  },\n  isVeg: {\n    type: Boolean,\n    required: true\n  },\n  image: {\n    type: String,\n    required: true\n  },\n  restaurantId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Restaurant',\n    required: true\n  },\n  isAvailable: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\n\nexport const MenuItem = mongoose.model('MenuItem', menuItemSchema);\nexport type MenuItemType = mongoose.InferSchemaType<typeof menuItemSchema>;","size_bytes":771},"server/models/Restaurant.ts":{"content":"import mongoose from 'mongoose';\n\nconst restaurantSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  address: {\n    type: String,\n    required: true\n  },\n  phone: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true\n  },\n  image: {\n    type: String,\n    required: true\n  },\n  website: {\n    type: String,\n    required: false\n  },\n  qrCode: {\n    type: String,\n    required: false\n  },\n  mongoUri: {\n    type: String,\n    required: false\n  },\n  customTypes: {\n    type: [String],\n    default: []\n  },\n  customAttributes: {\n    type: Map,\n    of: String,\n    default: {}\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  }\n}, {\n  timestamps: true\n});\n\nexport const Restaurant = mongoose.model('Restaurant', restaurantSchema);\nexport type RestaurantType = mongoose.InferSchemaType<typeof restaurantSchema>;","size_bytes":959},"server/routes/admin-settings.ts":{"content":"import { Router } from \"express\";\nimport { Admin } from \"../models/Admin\";\nimport { authenticateAdmin, AuthRequest } from \"../middleware/auth\";\nimport { getFallbackAdminSettings, updateFallbackAdminSettings, getFallbackAdminProfile, updateFallbackAdminProfile, updateFallbackAdminPassword, getCurrentFallbackPassword } from \"../fallback-auth\";\nimport bcrypt from \"bcryptjs\";\n\nconst router = Router();\n\n// Get admin profile\nrouter.get(\"/profile\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    // Handle fallback admin (not in MongoDB)\n    if (req.admin._id === 'admin-001' || req.admin.id === 'admin-001') {\n      return res.json(getFallbackAdminProfile());\n    }\n    \n    const admin = await Admin.findById(req.admin._id).select(\"-password\");\n    if (!admin) {\n      return res.status(404).json({ message: \"Admin not found\" });\n    }\n    res.json(admin);\n  } catch (error) {\n    console.error(\"Admin profile fetch error:\", error);\n    res.status(500).json({ message: \"Failed to fetch admin profile\" });\n  }\n});\n\n// Update admin profile\nrouter.put(\"/profile\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    const { username, email, currentPassword, newPassword } = req.body;\n    \n    // Handle fallback admin (not in MongoDB) - update profile in memory\n    if (req.admin._id === 'admin-001' || req.admin.id === 'admin-001') {\n      // Handle password change\n      if (newPassword) {\n        if (!currentPassword) {\n          return res.status(400).json({ message: \"Current password is required\" });\n        }\n        \n        // Validate current password against the stored fallback password\n        const storedPassword = getCurrentFallbackPassword();\n        if (currentPassword !== storedPassword) {\n          return res.status(400).json({ message: \"Current password is incorrect\" });\n        }\n        \n        updateFallbackAdminPassword(newPassword);\n      }\n      \n      const profileToUpdate = {\n        ...(username && { username }),\n        ...(email && { email }),\n      };\n      \n      const updatedProfile = updateFallbackAdminProfile(profileToUpdate);\n      return res.json(updatedProfile);\n    }\n    \n    const admin = await Admin.findById(req.admin._id);\n    if (!admin) {\n      return res.status(404).json({ message: \"Admin not found\" });\n    }\n\n    // If password change is requested, validate current password\n    if (newPassword) {\n      if (!currentPassword) {\n        return res.status(400).json({ message: \"Current password is required\" });\n      }\n      \n      const isValidPassword = await bcrypt.compare(currentPassword, admin.password);\n      if (!isValidPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n      \n      // Hash new password\n      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\n      admin.password = hashedNewPassword;\n    }\n\n    // Update username and email\n    if (username) admin.username = username;\n    if (email) admin.email = email;\n\n    await admin.save();\n    \n    // Return admin info without password\n    const updatedAdmin = await Admin.findById(req.admin._id).select(\"-password\");\n    res.json(updatedAdmin);\n  } catch (error) {\n    console.error(\"Admin profile update error:\", error);\n    res.status(500).json({ message: \"Failed to update admin profile\" });\n  }\n});\n\n// Get admin settings\nrouter.get(\"/settings\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    // Handle fallback admin (not in MongoDB) - return stored settings\n    if (req.admin._id === 'admin-001' || req.admin.id === 'admin-001') {\n      return res.json(getFallbackAdminSettings());\n    }\n    \n    const admin = await Admin.findById(req.admin._id).select(\"-password\");\n    if (!admin) {\n      return res.status(404).json({ message: \"Admin not found\" });\n    }\n    \n    // Return admin settings with defaults\n    const settings = {\n      theme: admin.theme || \"blue\",\n      darkMode: admin.darkMode || false,\n      compactMode: admin.compactMode || false,\n      emailNotifications: admin.emailNotifications !== false, // default true\n      sessionTimeout: admin.sessionTimeout || 30,\n      twoFactorEnabled: admin.twoFactorEnabled || false,\n      loginAlerts: admin.loginAlerts !== false, // default true\n      autoBackup: admin.autoBackup !== false, // default true\n      maxRestaurants: admin.maxRestaurants || 10,\n    };\n    \n    res.json(settings);\n  } catch (error) {\n    console.error(\"Admin settings fetch error:\", error);\n    res.status(500).json({ message: \"Failed to fetch admin settings\" });\n  }\n});\n\n// Update admin settings\nrouter.put(\"/settings\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    const {\n      theme,\n      darkMode,\n      compactMode,\n      emailNotifications,\n      sessionTimeout,\n      twoFactorEnabled,\n      loginAlerts,\n      autoBackup,\n      maxRestaurants,\n    } = req.body;\n\n    // Handle fallback admin (not in MongoDB) - store settings in memory\n    if (req.admin._id === 'admin-001' || req.admin.id === 'admin-001') {\n      const settingsToUpdate = {\n        ...(theme && { theme }),\n        ...(darkMode !== undefined && { darkMode }),\n        ...(compactMode !== undefined && { compactMode }),\n        ...(emailNotifications !== undefined && { emailNotifications }),\n        ...(sessionTimeout && { sessionTimeout }),\n        ...(twoFactorEnabled !== undefined && { twoFactorEnabled }),\n        ...(loginAlerts !== undefined && { loginAlerts }),\n        ...(autoBackup !== undefined && { autoBackup }),\n        ...(maxRestaurants && { maxRestaurants }),\n      };\n      \n      const updatedSettings = updateFallbackAdminSettings(settingsToUpdate);\n      return res.json(updatedSettings);\n    }\n\n    const admin = await Admin.findById(req.admin._id);\n    if (!admin) {\n      return res.status(404).json({ message: \"Admin not found\" });\n    }\n\n    // Update settings\n    if (theme) admin.theme = theme;\n    if (darkMode !== undefined) admin.darkMode = darkMode;\n    if (compactMode !== undefined) admin.compactMode = compactMode;\n    if (emailNotifications !== undefined) admin.emailNotifications = emailNotifications;\n    if (sessionTimeout) admin.sessionTimeout = sessionTimeout;\n    if (twoFactorEnabled !== undefined) admin.twoFactorEnabled = twoFactorEnabled;\n    if (loginAlerts !== undefined) admin.loginAlerts = loginAlerts;\n    if (autoBackup !== undefined) admin.autoBackup = autoBackup;\n    if (maxRestaurants) admin.maxRestaurants = maxRestaurants;\n\n    await admin.save();\n    \n    // Return updated settings\n    const updatedSettings = {\n      theme: admin.theme || \"blue\",\n      darkMode: admin.darkMode || false,\n      compactMode: admin.compactMode || false,\n      emailNotifications: admin.emailNotifications !== false,\n      sessionTimeout: admin.sessionTimeout || 30,\n      twoFactorEnabled: admin.twoFactorEnabled || false,\n      loginAlerts: admin.loginAlerts !== false,\n      autoBackup: admin.autoBackup !== false,\n      maxRestaurants: admin.maxRestaurants || 10,\n    };\n    \n    res.json(updatedSettings);\n  } catch (error) {\n    console.error(\"Admin settings update error:\", error);\n    res.status(500).json({ message: \"Failed to update admin settings\" });\n  }\n});\n\n// Export database route\nrouter.get(\"/export-database\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    // For MongoDB restaurants, we'll export a summary\n    const { Restaurant } = await import(\"../models/Restaurant\");\n    const { MenuItem } = await import(\"../models/MenuItem\");\n    const { Admin } = await import(\"../models/Admin\");\n    \n    const restaurants = await Restaurant.find().lean();\n    const menuItems = await MenuItem.find().lean();\n    const admins = await Admin.find().select(\"-password\").lean();\n    \n    const exportData = {\n      timestamp: new Date().toISOString(),\n      version: \"1.0\",\n      data: {\n        restaurants,\n        menuItems,\n        admins,\n        summary: {\n          restaurantCount: restaurants.length,\n          menuItemCount: menuItems.length,\n          adminCount: admins.length,\n        }\n      }\n    };\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', `attachment; filename=\"database-export-${new Date().toISOString().split('T')[0]}.json\"`);\n    res.json(exportData);\n  } catch (error) {\n    console.error(\"Database export error:\", error);\n    res.status(500).json({ message: \"Failed to export database\" });\n  }\n});\n\n// System logs route\nrouter.get(\"/system-logs\", authenticateAdmin, async (req: AuthRequest, res) => {\n  try {\n    // Generate a sample system log (in a real system, you'd read from actual log files)\n    const logs = `\n=== System Logs ===\nGenerated at: ${new Date().toISOString()}\n\n[INFO] ${new Date().toISOString()} - System startup complete\n[INFO] ${new Date().toISOString()} - MongoDB connection established\n[INFO] ${new Date().toISOString()} - Admin authentication successful for user: ${req.admin.username}\n[INFO] ${new Date().toISOString()} - Restaurant management system active\n[INFO] ${new Date().toISOString()} - QR code generation service running\n[INFO] ${new Date().toISOString()} - Menu synchronization service active\n[INFO] ${new Date().toISOString()} - Database backup scheduled for daily execution\n[INFO] ${new Date().toISOString()} - Session management service running\n[INFO] ${new Date().toISOString()} - Email notification service configured\n[INFO] ${new Date().toISOString()} - System health check: All services operational\n\n=== Recent Activity ===\n[ACTIVITY] Admin settings accessed by ${req.admin.username}\n[ACTIVITY] Theme customization applied\n[ACTIVITY] Security settings updated\n[ACTIVITY] System logs requested\n\n=== System Status ===\nMemory Usage: 85% (within normal range)\nCPU Usage: 12% (optimal)\nDatabase Connections: 3/100 (healthy)\nActive Sessions: 1\nUptime: ${Math.floor(process.uptime() / 3600)}h ${Math.floor((process.uptime() % 3600) / 60)}m\n\n=== End of Logs ===\n    `.trim();\n    \n    res.setHeader('Content-Type', 'text/plain');\n    res.send(logs);\n  } catch (error) {\n    console.error(\"System logs error:\", error);\n    res.status(500).json({ message: \"Failed to retrieve system logs\" });\n  }\n});\n\nexport default router;","size_bytes":10193},"server/utils/qrcode.ts":{"content":"import QRCode from 'qrcode';\n\nexport async function generateQRCode(url: string): Promise<string> {\n  try {\n    // Generate QR code as data URL\n    const qrCodeDataUrl = await QRCode.toDataURL(url, {\n      width: 300,\n      margin: 2,\n      color: {\n        dark: '#000000',\n        light: '#FFFFFF'\n      }\n    });\n    \n    return qrCodeDataUrl;\n  } catch (error) {\n    console.error('Error generating QR code:', error);\n    throw error;\n  }\n}","size_bytes":443},"client/src/components/AdminSettingsModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Settings, User, Palette, Shield, Database, Bell } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AdminSettingsModalProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\n// Define proper types for the API responses\ninterface Profile {\n  username?: string;\n  email?: string;\n}\n\ninterface SettingsData {\n  theme?: string;\n  darkMode?: boolean;\n  compactMode?: boolean;\n  autoBackup?: boolean;\n  emailNotifications?: boolean;\n  sessionTimeout?: number;\n  maxRestaurants?: number;\n  twoFactorEnabled?: boolean;\n  loginAlerts?: boolean;\n}\n\nconst colorThemes = [\n  { name: \"Blue Theme\", value: \"blue\", primary: \"#2563eb\", secondary: \"#dbeafe\" },\n  { name: \"Green Theme\", value: \"green\", primary: \"#16a34a\", secondary: \"#dcfce7\" },\n  { name: \"Purple Theme\", value: \"purple\", primary: \"#9333ea\", secondary: \"#f3e8ff\" },\n  { name: \"Red Theme\", value: \"red\", primary: \"#dc2626\", secondary: \"#fef2f2\" },\n  { name: \"Orange Theme\", value: \"orange\", primary: \"#ea580c\", secondary: \"#fed7aa\" },\n  { name: \"Teal Theme\", value: \"teal\", primary: \"#0d9488\", secondary: \"#ccfbf1\" },\n];\n\nexport default function AdminSettingsModal({ isOpen, onOpenChange }: AdminSettingsModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n  const { theme: globalTheme, darkMode: globalDarkMode, setTheme: setGlobalTheme, setDarkMode: setGlobalDarkMode } = useTheme();\n  \n  // Profile settings\n  const [profileData, setProfileData] = useState({\n    username: \"\",\n    email: \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n\n  // Theme settings\n  const [themeSettings, setThemeSettings] = useState({\n    colorTheme: \"blue\",\n    darkMode: false,\n    compactMode: false,\n  });\n\n  // System settings\n  const [systemSettings, setSystemSettings] = useState({\n    autoBackup: true,\n    emailNotifications: true,\n    sessionTimeout: \"30\",\n    maxRestaurants: \"10\",\n  });\n  \n  // Security settings\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: false,\n    loginAlerts: true,\n  });\n\n  // Fetch admin profile\n  const { data: profile, isLoading: profileLoading, error: profileError } = useQuery<Profile>({\n    queryKey: [\"/api/admin/settings/profile\"],\n    enabled: isOpen,\n    retry: 1,\n  });\n\n  // Fetch admin settings\n  const { data: settings, isLoading: settingsLoading, error: settingsError } = useQuery<SettingsData>({\n    queryKey: [\"/api/admin/settings/settings\"],\n    enabled: isOpen,\n    retry: 1,\n  });\n\n  // Update profile data when profile is loaded\n  useEffect(() => {\n    if (profile) {\n      setProfileData({\n        username: profile.username || \"\",\n        email: profile.email || \"\",\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n    }\n  }, [profile]);\n\n  // Update settings when loaded - preserve exact server values\n  useEffect(() => {\n    if (settings) {\n      const newThemeSettings = {\n        colorTheme: settings.theme || \"blue\",\n        darkMode: settings.darkMode || false,\n        compactMode: settings.compactMode || false,\n      };\n      \n      const newSystemSettings = {\n        autoBackup: settings.autoBackup !== false,\n        emailNotifications: settings.emailNotifications !== false,\n        sessionTimeout: String(settings.sessionTimeout || 30),\n        maxRestaurants: String(settings.maxRestaurants || 10),\n      };\n      \n      const newSecuritySettings = {\n        twoFactorEnabled: settings.twoFactorEnabled || false,\n        loginAlerts: settings.loginAlerts !== false,\n      };\n\n      setThemeSettings(newThemeSettings);\n      setSystemSettings(newSystemSettings);\n      setSecuritySettings(newSecuritySettings);\n      \n      // Apply theme globally with stronger selectors\n      setGlobalTheme(newThemeSettings.colorTheme);\n      setGlobalDarkMode(newThemeSettings.darkMode);\n    }\n  }, [settings, setGlobalTheme, setGlobalDarkMode]);\n\n  // Profile update mutation\n  const profileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"/api/admin/settings/profile\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings/profile\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Settings update mutation\n  const settingsMutation = useMutation({\n    mutationFn: async (data: SettingsData) => {\n      return await apiRequest(\"/api/admin/settings/settings\", {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your settings have been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/settings/settings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfileUpdate = () => {\n    // Validate passwords\n    if (profileData.newPassword && profileData.newPassword !== profileData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Prepare data for API call\n    const updateData: any = {\n      username: profileData.username,\n      email: profileData.email,\n    };\n\n    // Add password fields if password is being changed\n    if (profileData.newPassword) {\n      updateData.currentPassword = profileData.currentPassword;\n      updateData.newPassword = profileData.newPassword;\n    }\n\n    profileMutation.mutate(updateData);\n    \n    // Clear password fields after submission\n    setProfileData(prev => ({\n      ...prev,\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    }));\n  };\n\n  const handleThemeChange = (theme: string) => {\n    setThemeSettings(prev => ({ ...prev, colorTheme: theme }));\n    setGlobalTheme(theme);\n    \n    // Preserve all current settings when updating theme\n    const settingsData: SettingsData = {\n      theme: theme,\n      darkMode: themeSettings.darkMode,\n      compactMode: themeSettings.compactMode,\n      emailNotifications: systemSettings.emailNotifications,\n      sessionTimeout: parseInt(systemSettings.sessionTimeout) || 30,\n      twoFactorEnabled: securitySettings.twoFactorEnabled,\n      loginAlerts: securitySettings.loginAlerts,\n      autoBackup: systemSettings.autoBackup,\n      maxRestaurants: parseInt(systemSettings.maxRestaurants) || 10,\n    };\n    \n    settingsMutation.mutate(settingsData);\n  };\n\n  const handleDarkModeChange = (darkMode: boolean) => {\n    setThemeSettings(prev => ({ ...prev, darkMode }));\n    setGlobalDarkMode(darkMode);\n    \n    // Preserve all current settings when updating dark mode\n    const settingsData: SettingsData = {\n      theme: themeSettings.colorTheme,\n      darkMode: darkMode,\n      compactMode: themeSettings.compactMode,\n      emailNotifications: systemSettings.emailNotifications,\n      sessionTimeout: parseInt(systemSettings.sessionTimeout) || 30,\n      twoFactorEnabled: securitySettings.twoFactorEnabled,\n      loginAlerts: securitySettings.loginAlerts,\n      autoBackup: systemSettings.autoBackup,\n      maxRestaurants: parseInt(systemSettings.maxRestaurants) || 10,\n    };\n    \n    settingsMutation.mutate(settingsData);\n  };\n\n  const handleSystemUpdate = () => {\n    // Preserve all current settings, ensuring no values are lost\n    const settingsData: SettingsData = {\n      theme: themeSettings.colorTheme,\n      darkMode: themeSettings.darkMode,\n      compactMode: themeSettings.compactMode,\n      emailNotifications: systemSettings.emailNotifications,\n      sessionTimeout: parseInt(systemSettings.sessionTimeout) || 30,\n      twoFactorEnabled: securitySettings.twoFactorEnabled,\n      loginAlerts: securitySettings.loginAlerts,\n      autoBackup: systemSettings.autoBackup,\n      maxRestaurants: parseInt(systemSettings.maxRestaurants) || 10,\n    };\n\n    console.log(\"Saving system settings:\", settingsData); // Debug log\n    settingsMutation.mutate(settingsData);\n  };\n\n  const handleSecurityUpdate = () => {\n    // Preserve all current settings when updating security\n    const settingsData: SettingsData = {\n      theme: themeSettings.colorTheme,\n      darkMode: themeSettings.darkMode,\n      compactMode: themeSettings.compactMode,\n      emailNotifications: systemSettings.emailNotifications,\n      sessionTimeout: parseInt(systemSettings.sessionTimeout) || 30,\n      twoFactorEnabled: securitySettings.twoFactorEnabled,\n      loginAlerts: securitySettings.loginAlerts,\n      autoBackup: systemSettings.autoBackup,\n      maxRestaurants: parseInt(systemSettings.maxRestaurants) || 10,\n    };\n    \n    settingsMutation.mutate(settingsData);\n  };\n\n  const handleExportDatabase = async () => {\n    try {\n      const response = await apiRequest('/api/admin/export-database', {\n        method: 'GET',\n      });\n      \n      // Convert response to blob for download\n      const responseText = typeof response === 'string' ? response : JSON.stringify(response);\n      const blob = new Blob([responseText], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `database-export-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"Database exported successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export database\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewSystemLogs = async () => {\n    try {\n      // Use direct fetch for plain text response\n      const token = localStorage.getItem('admin_token');\n      const response = await fetch('/api/admin/system-logs', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch logs');\n      }\n      \n      const logsText = await response.text();\n      const newWindow = window.open('', '_blank');\n      if (newWindow) {\n        newWindow.document.write(`\n          <html>\n            <head><title>System Logs</title></head>\n            <body style=\"font-family: monospace; white-space: pre-wrap; padding: 20px;\">\n              <h1>System Logs</h1>\n              <hr/>\n              <pre>${logsText}</pre>\n            </body>\n          </html>\n        `);\n        newWindow.document.close();\n      }\n      \n      toast({\n        title: \"Success\",\n        description: \"System logs opened in new window\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch system logs\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Settings className=\"w-5 h-5\" />\n            <span>Admin Settings</span>\n          </DialogTitle>\n          <DialogDescription>\n            Manage your admin profile, customize themes, configure security settings, and adjust system preferences.\n          </DialogDescription>\n        </DialogHeader>\n        \n        {/* Display error message if there's an authentication issue */}\n        {(profileError || settingsError) && (\n          <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <p className=\"text-red-600 text-sm\">\n              Authentication error: Please log out and log back in to access settings.\n            </p>\n            <p className=\"text-red-500 text-xs mt-1\">\n              {profileError?.message || settingsError?.message}\n            </p>\n          </div>\n        )}\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"profile\" className=\"flex items-center space-x-2\">\n              <User className=\"w-4 h-4\" />\n              <span>Profile</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"theme\" className=\"flex items-center space-x-2\">\n              <Palette className=\"w-4 h-4\" />\n              <span>Theme</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span>Security</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center space-x-2\">\n              <Database className=\"w-4 h-4\" />\n              <span>System</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"profile\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Information</CardTitle>\n                <CardDescription>Update your admin profile details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input\n                      id=\"username\"\n                      value={profileData.username}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, username: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={profileData.email}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}\n                    />\n                  </div>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Change Password</h4>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentPassword\">Current Password</Label>\n                    <Input\n                      id=\"currentPassword\"\n                      type=\"password\"\n                      value={profileData.currentPassword}\n                      onChange={(e) => setProfileData(prev => ({ ...prev, currentPassword: e.target.value }))}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"newPassword\">New Password</Label>\n                      <Input\n                        id=\"newPassword\"\n                        type=\"password\"\n                        value={profileData.newPassword}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, newPassword: e.target.value }))}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                      <Input\n                        id=\"confirmPassword\"\n                        type=\"password\"\n                        value={profileData.confirmPassword}\n                        onChange={(e) => setProfileData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleProfileUpdate} \n                  className=\"w-full\"\n                  disabled={profileMutation.isPending}\n                >\n                  {profileMutation.isPending ? \"Updating...\" : \"Update Profile\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"theme\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Color Theme</CardTitle>\n                <CardDescription>Customize the appearance of your admin panel</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                  {colorThemes.map((theme) => (\n                    <div\n                      key={theme.value}\n                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                        themeSettings.colorTheme === theme.value\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => handleThemeChange(theme.value)}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div\n                          className=\"w-8 h-8 rounded-full\"\n                          style={{ backgroundColor: theme.primary }}\n                        />\n                        <div>\n                          <p className=\"font-medium text-sm\">{theme.name}</p>\n                          <p className=\"text-xs text-gray-500\">{theme.primary}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"darkMode\">Dark Mode</Label>\n                      <p className=\"text-sm text-gray-500\">Enable dark theme</p>\n                    </div>\n                    <Switch\n                      id=\"darkMode\"\n                      checked={themeSettings.darkMode}\n                      onCheckedChange={handleDarkModeChange}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label htmlFor=\"compactMode\">Compact Mode</Label>\n                      <p className=\"text-sm text-gray-500\">Reduce spacing for more content</p>\n                    </div>\n                    <Switch\n                      id=\"compactMode\"\n                      checked={themeSettings.compactMode}\n                      onCheckedChange={(checked) => setThemeSettings(prev => ({ ...prev, compactMode: checked }))}\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Security Settings</CardTitle>\n                <CardDescription>Manage security preferences and access controls</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Two-Factor Authentication</Label>\n                      <p className=\"text-sm text-gray-500\">Add an extra layer of security</p>\n                    </div>\n                    <Switch\n                      checked={securitySettings.twoFactorEnabled}\n                      onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, twoFactorEnabled: checked }))}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Login Alerts</Label>\n                      <p className=\"text-sm text-gray-500\">Get notified of new login attempts</p>\n                    </div>\n                    <Switch \n                      checked={securitySettings.loginAlerts}\n                      onCheckedChange={(checked) => setSecuritySettings(prev => ({ ...prev, loginAlerts: checked }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n                    <Select value={systemSettings.sessionTimeout} onValueChange={(value) => setSystemSettings(prev => ({ ...prev, sessionTimeout: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"15\">15 minutes</SelectItem>\n                        <SelectItem value=\"30\">30 minutes</SelectItem>\n                        <SelectItem value=\"60\">1 hour</SelectItem>\n                        <SelectItem value=\"120\">2 hours</SelectItem>\n                        <SelectItem value=\"0\">Never</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleSecurityUpdate} \n                  className=\"w-full\"\n                  disabled={settingsMutation.isPending}\n                >\n                  {settingsMutation.isPending ? \"Saving...\" : \"Save Security Settings\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>System Configuration</CardTitle>\n                <CardDescription>Manage system-wide settings and preferences</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Auto Backup</Label>\n                      <p className=\"text-sm text-gray-500\">Automatically backup data daily</p>\n                    </div>\n                    <Switch\n                      checked={systemSettings.autoBackup}\n                      onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, autoBackup: checked }))}\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Email Notifications</Label>\n                      <p className=\"text-sm text-gray-500\">Receive system alerts via email</p>\n                    </div>\n                    <Switch\n                      checked={systemSettings.emailNotifications}\n                      onCheckedChange={(checked) => setSystemSettings(prev => ({ ...prev, emailNotifications: checked }))}\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxRestaurants\">Maximum Restaurants</Label>\n                    <Select value={systemSettings.maxRestaurants} onValueChange={(value) => setSystemSettings(prev => ({ ...prev, maxRestaurants: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"5\">5 restaurants</SelectItem>\n                        <SelectItem value=\"10\">10 restaurants</SelectItem>\n                        <SelectItem value=\"25\">25 restaurants</SelectItem>\n                        <SelectItem value=\"50\">50 restaurants</SelectItem>\n                        <SelectItem value=\"unlimited\">Unlimited</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-2\">\n                    <Button variant=\"outline\" className=\"w-full\" onClick={handleExportDatabase}>\n                      <Database className=\"w-4 h-4 mr-2\" />\n                      Export Database\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full\" onClick={handleViewSystemLogs}>\n                      <Bell className=\"w-4 h-4 mr-2\" />\n                      View System Logs\n                    </Button>\n                  </div>\n                </div>\n                \n                <Button \n                  onClick={handleSystemUpdate} \n                  className=\"w-full\"\n                  disabled={settingsMutation.isPending}\n                >\n                  {settingsMutation.isPending ? \"Saving...\" : \"Save System Settings\"}\n                </Button>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26547},"client/src/components/QRCodeModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { QrCode, ExternalLink } from \"lucide-react\";\n\ninterface QRCodeModalProps {\n  website: string;\n  qrCode: string;\n  restaurantName: string;\n}\n\nexport default function QRCodeModal({ website, qrCode, restaurantName }: QRCodeModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n        >\n          <QrCode className=\"w-4 h-4 mr-2\" />\n          QR Code\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">QR Code for {restaurantName}</DialogTitle>\n        </DialogHeader>\n        <div className=\"flex flex-col items-center space-y-4 p-6\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Scan this QR code to visit the restaurant website\n            </p>\n            <div className=\"flex justify-center mb-4\">\n              <img\n                src={qrCode}\n                alt=\"QR Code for restaurant website\"\n                className=\"w-48 h-48 border-2 border-gray-300 rounded-lg shadow-sm\"\n              />\n            </div>\n            <div className=\"bg-gray-50 p-3 rounded-lg\">\n              <p className=\"text-sm text-gray-700 mb-2\">Website URL:</p>\n              <a\n                href={website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:underline text-sm break-all inline-flex items-center\"\n              >\n                {website}\n                <ExternalLink className=\"w-3 h-3 ml-1\" />\n              </a>\n            </div>\n          </div>\n          <Button\n            onClick={() => setIsOpen(false)}\n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":2272},"client/src/contexts/ThemeContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ninterface ThemeContextType {\n  theme: string;\n  darkMode: boolean;\n  setTheme: (theme: string) => void;\n  setDarkMode: (darkMode: boolean) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\nconst colorThemes = [\n  { value: \"blue\", primary: \"hsl(214, 85%, 50%)\", secondary: \"hsl(210, 40%, 96%)\" },\n  { value: \"purple\", primary: \"hsl(270, 95%, 50%)\", secondary: \"hsl(270, 40%, 96%)\" },\n  { value: \"green\", primary: \"hsl(120, 95%, 40%)\", secondary: \"hsl(120, 40%, 96%)\" },\n  { value: \"teal\", primary: \"hsl(180, 95%, 40%)\", secondary: \"hsl(180, 40%, 96%)\" },\n  { value: \"orange\", primary: \"hsl(30, 95%, 50%)\", secondary: \"hsl(30, 40%, 96%)\" },\n  { value: \"red\", primary: \"hsl(0, 95%, 50%)\", secondary: \"hsl(0, 40%, 96%)\" },\n];\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setThemeState] = useState<string>(\"blue\");\n  const [darkMode, setDarkModeState] = useState<boolean>(false);\n\n  const applyTheme = (themeName: string, isDark: boolean) => {\n    const root = document.documentElement;\n    const selectedTheme = colorThemes.find(t => t.value === themeName);\n    \n    if (selectedTheme) {\n      // Apply global CSS custom properties for all pages\n      root.style.setProperty('--primary', selectedTheme.primary);\n      root.style.setProperty('--primary-foreground', '#ffffff');\n      root.style.setProperty('--secondary', selectedTheme.secondary);\n      root.style.setProperty('--light-blue', selectedTheme.primary);\n      root.style.setProperty('--light-blue-hover', selectedTheme.primary);\n      root.style.setProperty('--light-blue-light', selectedTheme.secondary);\n      root.style.setProperty('--ring', selectedTheme.primary);\n      root.style.setProperty('--accent', selectedTheme.primary);\n      root.style.setProperty('--accent-foreground', '#ffffff');\n      \n      // Add theme class to body for global styling\n      document.body.className = document.body.className.replace(/theme-\\w+/g, '');\n      document.body.classList.add(`theme-${themeName}`);\n    }\n\n    // Apply dark mode\n    if (isDark) {\n      root.classList.add('dark');\n      document.body.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n      document.body.classList.remove('dark');\n    }\n\n    // Store in localStorage\n    localStorage.setItem('admin-theme', themeName);\n    localStorage.setItem('admin-dark-mode', isDark.toString());\n  };\n\n  const setTheme = (newTheme: string) => {\n    setThemeState(newTheme);\n    applyTheme(newTheme, darkMode);\n  };\n\n  const setDarkMode = (newDarkMode: boolean) => {\n    setDarkModeState(newDarkMode);\n    applyTheme(theme, newDarkMode);\n  };\n\n  // Initialize theme from localStorage and apply immediately\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('admin-theme') || 'blue';\n    const savedDarkMode = localStorage.getItem('admin-dark-mode') === 'true';\n    \n    setThemeState(savedTheme);\n    setDarkModeState(savedDarkMode);\n    \n    // Apply theme immediately on load\n    applyTheme(savedTheme, savedDarkMode);\n    \n    // Also force apply to make sure it takes effect on all pages\n    setTimeout(() => {\n      applyTheme(savedTheme, savedDarkMode);\n    }, 100);\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, darkMode, setTheme, setDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}","size_bytes":3637},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    headers?: Record<string, string>;\n    body?: string;\n  } = {}\n): Promise<any> {\n  const token = localStorage.getItem(\"adminToken\");\n  const res = await fetch(url, {\n    method: options.method || \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(token && { Authorization: `Bearer ${token}` }),\n      ...options.headers,\n    },\n    body: options.body,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"adminToken\");\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: {\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1716},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, ArrowLeft } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white border-gray-200 shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 rounded-full bg-red-100 flex items-center justify-center\">\n            <span className=\"text-red-600 text-2xl font-bold\">404</span>\n          </div>\n          <CardTitle className=\"text-2xl text-gray-900\">Page Not Found</CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            The page you're looking for doesn't exist or has been moved.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Button \n            asChild \n            className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            <Link href=\"/admin/dashboard\">\n              <Home className=\"w-4 h-4 mr-2\" />\n              Go to Dashboard\n            </Link>\n          </Button>\n          <Button \n            variant=\"outline\" \n            className=\"w-full border-gray-300 text-gray-700 hover:bg-gray-50\"\n            onClick={() => window.history.back()}\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Go Back\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1603},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Store, Menu, Users, Crown, LogOut, Edit, Trash2, Settings } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport QRCodeModal from \"@/components/QRCodeModal\";\nimport AdminSettingsModal from \"@/components/AdminSettingsModal\";\n\ninterface Restaurant {\n  _id: string;\n  name: string;\n  description: string;\n  address: string;\n  phone: string;\n  email: string;\n  image: string;\n  website?: string;\n  qrCode?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  const { data: restaurants, isLoading } = useQuery({\n    queryKey: [\"/api/admin/restaurants\"],\n    queryFn: async () => {\n      return await apiRequest(\"/api/admin/restaurants\");\n    },\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminToken\");\n    localStorage.removeItem(\"adminUser\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been logged out successfully\",\n    });\n    setLocation(\"/admin/login\");\n  };\n\n  const deleteMutation = useMutation({\n    mutationFn: async (restaurantId: string) => {\n      return await apiRequest(`/api/admin/restaurants/${restaurantId}`, {\n        method: \"DELETE\",\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Restaurant deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/restaurants\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete restaurant\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (restaurantId: string, restaurantName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${restaurantName}\"? This action cannot be undone.`)) {\n      deleteMutation.mutate(restaurantId);\n    }\n  };\n\n  const adminUser = JSON.parse(localStorage.getItem(\"adminUser\") || \"{}\");\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-blue-600 text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-10\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16 lg:h-20\">\n            <div className=\"flex items-center space-x-3 min-w-0\">\n              <Crown className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n              <div className=\"min-w-0\">\n                <h1 className=\"text-lg sm:text-xl lg:text-2xl font-bold text-blue-600 truncate\">\n                  Airavata Technologies\n                </h1>\n                <p className=\"text-sm sm:text-base text-gray-600 truncate\">\n                  Restaurant Management System\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              {/* User Info - Hidden on small screens */}\n              <div className=\"hidden md:block text-right\">\n                <p className=\"text-sm font-medium text-gray-900 truncate max-w-32 lg:max-w-none\">\n                  Welcome, {adminUser.username}\n                </p>\n                <p className=\"text-xs text-gray-600 truncate max-w-32 lg:max-w-none\">\n                  {adminUser.email}\n                </p>\n              </div>\n              \n              <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSettingsOpen(true)}\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50 px-2 sm:px-3\"\n                >\n                  <Settings className=\"w-4 h-4 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Settings</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleLogout}\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50 px-2 sm:px-3\"\n                >\n                  <LogOut className=\"w-4 h-4 sm:mr-2\" />\n                  <span className=\"hidden sm:inline\">Logout</span>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <Card className=\"bg-white border-gray-200 shadow-sm\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-gray-600 text-sm truncate\">Total Restaurants</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">\n                    {restaurants?.length || 0}\n                  </p>\n                </div>\n                <Store className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white border-gray-200 shadow-sm\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-gray-600 text-sm truncate\">Active Restaurants</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">\n                    {restaurants?.filter((r: Restaurant) => r.isActive).length || 0}\n                  </p>\n                </div>\n                <Users className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white border-gray-200 shadow-sm sm:col-span-2 lg:col-span-1\">\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"min-w-0\">\n                  <p className=\"text-gray-600 text-sm truncate\">Total Items</p>\n                  <p className=\"text-xl sm:text-2xl font-bold text-blue-600\">-</p>\n                </div>\n                <Menu className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-400 flex-shrink-0\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Restaurants Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n            <h2 className=\"text-lg sm:text-xl font-semibold text-gray-900\">Restaurants</h2>\n            <Button\n              onClick={() => setLocation(\"/admin/restaurants/new\")}\n              className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold w-full sm:w-auto\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Restaurant\n            </Button>\n          </div>\n\n          {restaurants?.length === 0 ? (\n            <Card className=\"bg-white border-gray-200 shadow-sm\">\n              <CardContent className=\"p-6 sm:p-8 text-center\">\n                <Store className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600 mb-4\">No restaurants found</p>\n                <Button\n                  onClick={() => setLocation(\"/admin/restaurants/new\")}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Your First Restaurant\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-4 sm:gap-6\">\n              {restaurants?.map((restaurant: Restaurant) => (\n                <Card key={restaurant._id} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow flex flex-col\">\n                  <CardHeader className=\"pb-3 flex-shrink-0\">\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"flex items-center space-x-3 min-w-0 flex-1\">\n                        <img\n                          src={restaurant.image}\n                          alt={restaurant.name}\n                          className=\"w-12 h-12 sm:w-16 sm:h-16 object-cover rounded-lg border border-gray-200 flex-shrink-0\"\n                        />\n                        <div className=\"min-w-0 flex-1\">\n                          <CardTitle className=\"text-base sm:text-lg text-gray-900 truncate\">\n                            {restaurant.name}\n                          </CardTitle>\n                          <CardDescription className=\"text-sm text-gray-600 truncate\">\n                            {restaurant.address}\n                          </CardDescription>\n                          <p className=\"text-xs sm:text-sm text-gray-500 mt-1 truncate\">\n                            {restaurant.email}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge \n                        variant={restaurant.isActive ? \"default\" : \"secondary\"} \n                        className={`${restaurant.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-600\"} flex-shrink-0`}\n                      >\n                        {restaurant.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"flex-1 flex flex-col\">\n                    <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n                      {restaurant.description}\n                    </p>\n                    <div className=\"space-y-2 mb-4\">\n                      <p className=\"text-sm text-gray-600\">\n                        <span className=\"font-medium\">Phone:</span>{\" \"}\n                        <span className=\"truncate\">{restaurant.phone}</span>\n                      </p>\n                    </div>\n                    \n                    {/* Action Buttons */}\n                    <div className=\"mt-auto\">\n                      <div className=\"grid grid-cols-2 gap-2 mb-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setLocation(`/admin/restaurants/${restaurant._id}/edit`)}\n                          className=\"border-blue-600 text-blue-600 hover:bg-blue-50 text-xs sm:text-sm\"\n                        >\n                          <Edit className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setLocation(`/admin/restaurants/${restaurant._id}/menu`)}\n                          className=\"border-blue-600 text-blue-600 hover:bg-blue-50 text-xs sm:text-sm\"\n                        >\n                          <Menu className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                          Menu\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        {restaurant.website && restaurant.qrCode && (\n                          <div className=\"flex-1\">\n                            <QRCodeModal\n                              website={restaurant.website}\n                              qrCode={restaurant.qrCode}\n                              restaurantName={restaurant.name}\n                            />\n                          </div>\n                        )}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(restaurant._id, restaurant.name)}\n                          className=\"border-red-600 text-red-600 hover:bg-red-50 text-xs sm:text-sm flex-1\"\n                          disabled={deleteMutation.isPending}\n                        >\n                          <Trash2 className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n      \n      {/* Admin Settings Modal */}\n      <AdminSettingsModal isOpen={settingsOpen} onOpenChange={setSettingsOpen} />\n    </div>\n  );\n}","size_bytes":13397},"client/src/pages/admin/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Crown, Shield } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      return await apiRequest(\"/api/admin/login\", {\n        method: \"POST\",\n        body: JSON.stringify(credentials),\n      });\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"adminToken\", data.token);\n      localStorage.setItem(\"adminUser\", JSON.stringify(data.admin));\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully\",\n      });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Login failed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto border border-blue-200 bg-white shadow-xl\">\n        <CardHeader className=\"text-center px-4 sm:px-6\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"relative\">\n              <Crown className=\"w-10 h-10 sm:w-12 sm:h-12 text-blue-600\" />\n              <Shield className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-600 absolute -top-1 -right-1\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-xl sm:text-2xl font-bold text-blue-600 mb-2 break-words\">\n            Airavata Technologies\n          </CardTitle>\n          <CardDescription className=\"text-sm sm:text-base text-gray-600\">\n            Restaurant Management System\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"px-4 sm:px-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-sm font-medium text-gray-700\">\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"w-full bg-gray-50 border-gray-200 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 text-sm sm:text-base\"\n                placeholder=\"Enter your username\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full bg-gray-50 border-gray-200 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500 text-sm sm:text-base\"\n                placeholder=\"Enter your password\"\n                required\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 sm:py-3 text-sm sm:text-base mt-6\"\n              disabled={loginMutation.isPending}\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4408},"client/src/pages/admin/menu-management.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Plus, Edit, Trash2, Menu, IndianRupee, Utensils, Leaf, RefreshCw, Upload } from \"lucide-react\";\nimport { BulkMenuImport } from \"@/components/BulkMenuImport\";\n\ninterface MenuItem {\n  _id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  isVeg: boolean;\n  image: string;\n  restaurantId: string;\n  isAvailable: boolean;\n  createdAt: string;\n  updatedAt: string;\n  __v: number;\n}\n\ninterface Restaurant {\n  _id: string;\n  name: string;\n  description: string;\n  customTypes?: string[];\n  mongoUri?: string;\n}\n\nexport default function MenuManagement() {\n  const { restaurantId } = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<MenuItem | null>(null);\n  const [isBulkImportOpen, setIsBulkImportOpen] = useState(false);\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"\",\n    isVeg: false,\n    image: \"\",\n    isAvailable: true,\n  });\n\n  // Enhanced category normalization function\n  const normalizeCategory = (cat: string) => {\n    if (!cat) return '';\n    return cat\n      .toLowerCase()\n      .trim()\n      .replace(/[\\s\\-_]+/g, ' ')  // Replace spaces, hyphens, and underscores with single space\n      .replace(/\\s+/g, ' ')      // Replace multiple spaces with single space\n      .trim();                   // Final trim\n  };\n\n  // Fuzzy matching for more robust category comparison\n  const fuzzyMatch = (str1: string, str2: string) => {\n    const normalize = (s: string) => s\n      .toLowerCase()\n      .trim()\n      .replace(/[^a-z0-9]/g, ''); // Remove all non-alphanumeric characters\n    \n    return normalize(str1) === normalize(str2);\n  };\n\n  const { data: restaurant, isLoading: restaurantLoading, error: restaurantError } = useQuery({\n    queryKey: [`/api/admin/restaurants/${restaurantId}`],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      console.log('🔍 Fetching restaurant with ID:', restaurantId);\n      console.log('🔑 Using token:', token ? 'Present' : 'Missing');\n      \n      const result = await apiRequest(`/api/admin/restaurants/${restaurantId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      console.log('🏪 Restaurant data fetched:', result);\n      console.log('📂 Restaurant categories:', result?.customTypes);\n      \n      return result;\n    },\n    enabled: !!restaurantId,\n    retry: 2,\n    staleTime: 0,\n  });\n  \n  if (restaurantError) {\n    console.error('❌ Restaurant fetch error:', restaurantError);\n  }\n  if (restaurantLoading) {\n    console.log('⏳ Restaurant data loading...');\n  }\n  \n  const { data: menuItems, isLoading } = useQuery({\n    queryKey: [`/api/admin/restaurants/${restaurantId}/menu-items`],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const result = await apiRequest(`/api/admin/restaurants/${restaurantId}/menu-items`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      console.log('🎯 Menu items fetched successfully:', result);\n      console.log('📊 Total items:', result?.length || 0);\n      \n      // Debug menu item categories\n      if (result && result.length > 0) {\n        console.log('📋 Menu item categories:', result.map((item: MenuItem) => ({\n          name: item.name,\n          category: item.category,\n          normalized: normalizeCategory(item.category)\n        })));\n      }\n      \n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}`] });\n      }, 1000);\n      \n      return result;\n    },\n  });\n\n  console.log('🏪 Restaurant data:', restaurant);\n  console.log('📂 Restaurant customTypes:', restaurant?.customTypes);\n  console.log('🔗 Restaurant mongoUri:', restaurant?.mongoUri);\n  console.log('📊 Menu items available:', !!menuItems, menuItems?.length || 0);\n  \n  let categories = [\"Starters\", \"Main Course\", \"Desserts\", \"Beverages\"];\n  \n  if (restaurant?.customTypes && restaurant.customTypes.length > 0) {\n    categories = restaurant.customTypes;\n    console.log('✅ Using restaurant customTypes:', categories);\n  }\n  // else if (restaurant?.mongoUri && menuItems && menuItems.length > 0) {\n  //   // Fixed: Use Array.from() to convert Set to Array\n  //   const categorySet = new Set(menuItems.map((item: MenuItem) => {\n  //     const category = item.category;\n  //     return category.toLowerCase()\n  //       .split(/[\\s\\-_]+/)  // Split on spaces, hyphens, and underscores\n  //       .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n  //       .join(' ');\n  //   }));\n    \n  //   const extractedCategories = Array.from(categorySet);\n    \n  //   if (extractedCategories.length > 0) {\n  //     categories = extractedCategories;\n  //     console.log('🔄 Using categories extracted from menu items:', categories);\n  //   }\n  // }\n  \n// Replace lines 154-165 with this fixed version:\n\nelse if (restaurant?.mongoUri && menuItems && menuItems.length > 0) {\n  // Fixed: Use Array.from() to convert Set to Array with proper typing\n  const validCategories: string[] = [];\n  \n  menuItems.forEach((item: MenuItem) => {\n    if (typeof item.category === 'string' && item.category.trim() !== '') {\n      validCategories.push(item.category);\n    }\n  });\n  \n  const formattedCategories = validCategories.map((category: string) => {\n    return category.toLowerCase()\n      .split(/[\\s\\-_]+/)  // Split on spaces, hyphens, and underscores\n      .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  });\n  \n  const categorySet = new Set<string>(formattedCategories);\n  const extractedCategories: string[] = Array.from(categorySet);\n  \n  if (extractedCategories.length > 0) {\n    categories = extractedCategories;\n    console.log('🔄 Using categories extracted from menu items:', categories);\n  }\n}\n\n  console.log('📋 Final categories being used:', categories);\n  console.log('📋 Normalized categories:', categories.map(cat => normalizeCategory(cat)));\n\n  const mutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const url = editingItem\n        ? `/api/admin/menu-items/${editingItem._id}`\n        : `/api/admin/restaurants/${restaurantId}/menu-items`;\n      const method = editingItem ? \"PUT\" : \"POST\";\n\n      const payload = {\n        ...data,\n        price: parseFloat(data.price),\n        restaurantId,\n      };\n\n      return await apiRequest(url, {\n        method,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Menu item ${editingItem ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}/menu-items`] });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${editingItem ? \"update\" : \"create\"} menu item`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (itemId: string) => {\n      const token = localStorage.getItem(\"adminToken\");\n      return await apiRequest(`/api/admin/menu-items/${itemId}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ restaurantId }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Menu item deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}/menu-items`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete menu item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const refreshCategoriesMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      return await apiRequest(`/api/admin/restaurants/${restaurantId}/refresh-categories`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `Categories refreshed! Found: ${data.categories?.join(', ')}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}`] });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}/menu-items`] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to refresh categories\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      category: \"\",\n      isVeg: false,\n      image: \"\",\n      isAvailable: true,\n    });\n    setEditingItem(null);\n    setImageFile(null);\n    setImagePreview(\"\");\n  };\n\n  const handleEdit = (item: MenuItem) => {\n    setEditingItem(item);\n    setFormData({\n      name: item.name,\n      description: item.description,\n      price: item.price.toString(),\n      category: item.category,\n      isVeg: item.isVeg,\n      image: item.image,\n      isAvailable: item.isAvailable,\n    });\n    setImageFile(null);\n    setImagePreview(item.image);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (itemId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this menu item?\")) {\n      deleteMutation.mutate(itemId);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    let finalFormData = { ...formData };\n    \n    // If there's an image file, upload it first\n    if (imageFile) {\n      try {\n        const token = localStorage.getItem(\"adminToken\");\n        const uploadFormData = new FormData();\n        uploadFormData.append('image', imageFile);\n        \n        const response = await fetch('/api/admin/upload-image', {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n          body: uploadFormData,\n        });\n        \n        if (response.ok) {\n          const result = await response.json();\n          finalFormData.image = result.imageUrl;\n        } else {\n          throw new Error('Image upload failed');\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to upload image. Please try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    mutation.mutate(finalFormData);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 1 * 1024 * 1024) { // 1MB limit\n        toast({\n          title: \"Error\",\n          description: \"Image size should be less than 1MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Error\", \n          description: \"Please select a valid image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setImageFile(file);\n      \n      // Create preview\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n        setFormData(prev => ({ ...prev, image: \"\" })); // Clear URL when file is selected\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const removeImage = () => {\n    setImageFile(null);\n    setImagePreview(\"\");\n    setFormData(prev => ({ ...prev, image: \"\" }));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-blue-600 text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto p-4 sm:p-6\">\n        {/* Back Button */}\n        <div className=\"mb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin/dashboard\")}\n            className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </div>\n\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-start lg:justify-between gap-4\">\n            <div className=\"flex-1 min-w-0\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-blue-600 mb-2\">Menu Management</h1>\n              <p className=\"text-gray-600 mb-4 break-words\">\n                {restaurant?.name} - Manage menu items and categories\n              </p>\n              <div className=\"space-y-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Current Categories:</span>\n                <div className=\"flex flex-wrap gap-2\">\n                  {categories.map((category) => (\n                    <span \n                      key={category} \n                      className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 break-words\"\n                    >\n                      {category}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-2 shrink-0\">\n              {restaurant?.mongoUri && (\n                <Button\n                  onClick={() => refreshCategoriesMutation.mutate()}\n                  disabled={refreshCategoriesMutation.isPending}\n                  variant=\"outline\"\n                  className=\"border-blue-600 text-blue-600 hover:bg-blue-50 disabled:opacity-50 w-full sm:w-auto\"\n                >\n                  <RefreshCw className={`w-4 h-4 mr-2 ${refreshCategoriesMutation.isPending ? 'animate-spin' : ''}`} />\n                  <span className=\"truncate\">\n                    {refreshCategoriesMutation.isPending ? 'Refreshing...' : 'Refresh Categories'}\n                  </span>\n                </Button>\n              )}\n              \n              <Button\n                onClick={() => setIsBulkImportOpen(true)}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600 hover:bg-green-50 w-full sm:w-auto\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                <span className=\"truncate\">Bulk Import</span>\n              </Button>\n              \n              <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button\n                    onClick={resetForm}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold w-full sm:w-auto\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Menu Item\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"bg-white border-gray-200 max-w-2xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle className=\"text-blue-600\">\n                      {editingItem ? \"Edit Menu Item\" : \"Add New Menu Item\"}\n                    </DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleSubmit} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"name\" className=\"text-gray-700\">Item Name *</Label>\n                        <Input\n                          id=\"name\"\n                          value={formData.name}\n                          onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                          className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500\"\n                          placeholder=\"Enter item name\"\n                          required\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"price\" className=\"text-gray-700\">Price (₹) *</Label>\n                        <Input\n                          id=\"price\"\n                          type=\"number\"\n                          step=\"1\"\n                          value={formData.price}\n                          onChange={(e) => handleInputChange(\"price\", e.target.value)}\n                          className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500\"\n                          placeholder=\"Enter price in rupees\"\n                          required\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\" className=\"text-gray-700\">Description *</Label>\n                      <Textarea\n                        id=\"description\"\n                        value={formData.description}\n                        onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                        className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 resize-none\"\n                        placeholder=\"Enter item description\"\n                        rows={3}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"category\" className=\"text-gray-700\">Category *</Label>\n                        <Select value={formData.category} onValueChange={(value) => handleInputChange(\"category\", value)}>\n                          <SelectTrigger className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {categories.map((category) => (\n                              <SelectItem key={category} value={category}>\n                                {category}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      {/* Image Upload Section */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-gray-700\">Image</Label>\n                        <div className=\"flex flex-col gap-2\">\n                          <Input\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleImageUpload}\n                            className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500\"\n                          />\n                          <div className=\"text-center text-gray-500 text-xs\">OR</div>\n                          <Input\n                            type=\"url\"\n                            value={formData.image}\n                            onChange={(e) => handleInputChange(\"image\", e.target.value)}\n                            className=\"bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500\"\n                            placeholder=\"Enter image URL\"\n                            disabled={!!imageFile}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Image Preview */}\n                    {(imagePreview || formData.image) && (\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-gray-700\">Image Preview</Label>\n                        <div className=\"relative h-32 w-48 overflow-hidden rounded-lg bg-gray-100 border border-gray-200\">\n                          <img \n                            src={imagePreview || formData.image} \n                            alt=\"Preview\"\n                            className=\"w-full h-full object-cover\"\n                            onError={(e) => {\n                              const target = e.currentTarget;\n                              target.style.display = 'none';\n                              const nextSibling = target.nextElementSibling as HTMLElement;\n                              if (nextSibling) {\n                                nextSibling.style.display = 'flex';\n                              }\n                            }}\n                            onLoad={(e) => {\n                              const target = e.currentTarget;\n                              const nextSibling = target.nextElementSibling as HTMLElement;\n                              if (nextSibling) {\n                                nextSibling.style.display = 'none';\n                              }\n                            }}\n                          />\n                          <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100 text-gray-500 text-sm\" style={{ display: 'none' }}>\n                            Invalid image\n                          </div>\n                          <Button\n                            type=\"button\"\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"absolute top-2 right-2 h-6 w-6 p-0\"\n                            onClick={removeImage}\n                          >\n                            ×\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-4 sm:gap-6\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Switch\n                          id=\"isVeg\"\n                          checked={formData.isVeg}\n                          onCheckedChange={(checked) => handleInputChange(\"isVeg\", checked)}\n                        />\n                        <Label htmlFor=\"isVeg\" className=\"text-gray-700 flex items-center\">\n                          <span className={`w-3 h-3 rounded-full mr-2 ${formData.isVeg ? 'bg-green-500' : 'bg-red-500'}`}></span>\n                          {formData.isVeg ? 'Vegetarian' : 'Non-Vegetarian'}\n                        </Label>\n                      </div>\n                      {editingItem && (\n                        <div className=\"flex items-center space-x-2\">\n                          <Switch\n                            id=\"isAvailable\"\n                            checked={formData.isAvailable}\n                            onCheckedChange={(checked) => handleInputChange(\"isAvailable\", checked)}\n                          />\n                          <Label htmlFor=\"isAvailable\" className=\"text-gray-700\">Available</Label>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4\">\n                      <Button\n                        type=\"submit\"\n                        disabled={mutation.isPending}\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-semibold w-full sm:w-auto\"\n                      >\n                        {mutation.isPending\n                          ? `${editingItem ? \"Updating\" : \"Creating\"}...`\n                          : `${editingItem ? \"Update\" : \"Create\"} Item`}\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                        className=\"border-blue-600 text-blue-600 hover:bg-blue-50 w-full sm:w-auto\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </div>\n\n        {/* Menu Items by Category */}\n        <div className=\"space-y-8\">\n          {categories.map((category) => {\n            // STRICT category filtering - exact match only to prevent cross-category contamination\n            const categoryItems = menuItems?.filter((item: MenuItem) => {\n              if (!item.category) return false;\n              \n              // Only exact match - no fuzzy or contains matching to prevent items appearing in wrong categories\n              // This prevents issues like \"potrice\" items appearing in \"rice\" category\n              const itemCategory = item.category.toLowerCase().trim();\n              const filterCategory = category.toLowerCase().trim();\n              \n              return itemCategory === filterCategory;\n            }) || [];\n            \n            console.log(`📊 Category \"${category}\" matched ${categoryItems.length} items`);\n            console.log(`📝 Items in category:`, categoryItems.map((item: MenuItem) => ({\n              name: item.name,\n              originalCategory: item.category,\n              normalizedCategory: normalizeCategory(item.category)\n            })));\n            \n            return (\n              <div key={category} className=\"space-y-4\">\n                <h2 className=\"text-lg sm:text-xl font-semibold text-blue-600 flex items-center break-words\">\n                  <Utensils className=\"w-5 h-5 mr-2 shrink-0\" />\n                  <span className=\"truncate\">{category}</span>\n                  <span className=\"ml-2 text-sm text-gray-500\">({categoryItems.length})</span>\n                </h2>\n                \n                {categoryItems.length === 0 ? (\n                  <Card className=\"bg-white border-gray-200 shadow-sm\">\n                    <CardContent className=\"p-8 text-center\">\n                      <Menu className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">No items in this category</p>\n                      <p className=\"text-xs text-gray-500 mt-2\">\n                        Category: \"{category}\" (normalized: \"{normalizeCategory(category)}\")\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n                    {categoryItems.map((item: MenuItem) => (\n                      <Card key={item._id} className=\"bg-white border-gray-200 shadow-sm hover:shadow-md transition-shadow flex flex-col h-full\">\n                        {/* Image Section */}\n                        {item.image && (\n                          <div className=\"relative h-48 overflow-hidden rounded-t-lg shrink-0\">\n                            <img \n                              src={item.image} \n                              alt={item.name}\n                              className=\"w-full h-full object-cover\"\n                              onError={(e) => {\n                                e.currentTarget.style.display = 'none';\n                              }}\n                            />\n                            <div className=\"absolute top-2 right-2 flex items-center space-x-2\">\n                              <div className={`w-4 h-4 rounded-full ${item.isVeg ? 'bg-green-500' : 'bg-red-500'} border-2 border-white shrink-0`}></div>\n                              <Badge variant={item.isAvailable ? \"default\" : \"secondary\"} className={`text-xs ${item.isAvailable ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-600\"}`}>\n                                {item.isAvailable ? \"Available\" : \"Unavailable\"}\n                              </Badge>\n                            </div>\n                          </div>\n                        )}\n                        \n                        <CardHeader className=\"pb-3 flex-1\">\n                          <div className=\"flex justify-between items-start gap-2\">\n                            <div className=\"flex-1 min-w-0\">\n                              <CardTitle className=\"text-lg text-gray-900 mb-1 break-words line-clamp-2\">\n                                {item.name}\n                              </CardTitle>\n                              <CardDescription className=\"text-gray-600 break-words line-clamp-3\">\n                                {item.description}\n                              </CardDescription>\n                            </div>\n                            {!item.image && (\n                              <div className=\"flex items-center space-x-2 shrink-0\">\n                                <div className={`w-4 h-4 rounded-full ${item.isVeg ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                                <Badge variant={item.isAvailable ? \"default\" : \"secondary\"} className={`text-xs ${item.isAvailable ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-600\"}`}>\n                                  {item.isAvailable ? \"Available\" : \"Unavailable\"}\n                                </Badge>\n                              </div>\n                            )}\n                          </div>\n                        </CardHeader>\n                        \n                        <CardContent className=\"pt-0\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center text-blue-600 font-semibold\">\n                              <IndianRupee className=\"w-4 h-4 mr-1 shrink-0\" />\n                              <span className=\"truncate\">{item.price.toFixed(0)}</span>\n                            </div>\n                            <Badge variant=\"outline\" className=\"text-blue-600 border-blue-600 text-xs truncate max-w-[100px]\">\n                              {item.category}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"flex flex-col sm:flex-row gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1 border-blue-600 text-blue-600 hover:bg-blue-50 text-xs\"\n                              onClick={() => handleEdit(item)}\n                            >\n                              <Edit className=\"w-4 h-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"flex-1 border-red-600 text-red-600 hover:bg-red-50 text-xs\"\n                              onClick={() => handleDelete(item._id)}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Bulk Menu Import Modal */}\n      <BulkMenuImport\n        restaurantId={restaurantId!}\n        isOpen={isBulkImportOpen}\n        onClose={() => setIsBulkImportOpen(false)}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: [`/api/admin/restaurants/${restaurantId}/menu-items`] });\n          setIsBulkImportOpen(false);\n        }}\n      />\n    </div>\n  );\n}","size_bytes":33252},"client/src/pages/admin/restaurant-form.tsx":{"content":"// import { useState, useEffect } from \"react\";\n// import { useLocation, useParams } from \"wouter\";\n// import { useMutation, useQuery } from \"@tanstack/react-query\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import { Textarea } from \"@/components/ui/textarea\";\n// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Switch } from \"@/components/ui/switch\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { apiRequest } from \"@/lib/queryClient\";\n// import { queryClient } from \"@/lib/queryClient\";\n// import { ArrowLeft, Save, Store, Upload } from \"lucide-react\";\n\n// interface Restaurant {\n//   _id: string;\n//   name: string;\n//   description: string;\n//   address: string;\n//   phone: string;\n//   email: string;\n//   image: string;\n//   website?: string;\n//   qrCode?: string;\n//   mongoUri?: string;\n//   customTypes?: string[];\n//   customAttributes?: any;\n//   isActive: boolean;\n// }\n\n// export default function RestaurantForm() {\n//   const params = useParams();\n//   const [, setLocation] = useLocation();\n//   const { toast } = useToast();\n//   const id = params.id;\n//   const isEditing = Boolean(id);\n\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     address: \"\",\n//     phone: \"\",\n//     email: \"\",\n//     image: \"\",\n//     website: \"\",\n//     mongoUri: \"\",\n//     customTypes: \"Starters,Main Course,Desserts,Beverages\",\n//     isActive: true,\n//   });\n\n//   const [imageFile, setImageFile] = useState<File | null>(null);\n//   const [imagePreview, setImagePreview] = useState<string>(\"\");\n\n//   const { data: restaurant, isLoading, error } = useQuery({\n//     queryKey: [`/api/admin/restaurants/${id}`],\n//     queryFn: async () => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       return await apiRequest(`/api/admin/restaurants/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//     },\n//     enabled: isEditing,\n//   });\n\n//   useEffect(() => {\n//     if (restaurant) {\n//       setFormData({\n//         name: restaurant.name || \"\",\n//         description: restaurant.description || \"\",\n//         address: restaurant.address || \"\",\n//         phone: restaurant.phone || \"\",\n//         email: restaurant.email || \"\",\n//         image: restaurant.image || \"\",\n//         website: restaurant.website || \"\",\n//         mongoUri: restaurant.mongoUri || \"\",\n//         customTypes: restaurant.customTypes?.join(\",\") || \"Starters,Main Course,Desserts,Beverages\",\n//         isActive: restaurant.isActive ?? true,\n//       });\n//       setImagePreview(restaurant.image || \"\");\n//     }\n//   }, [restaurant]);\n\n//   const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0];\n//     if (file) {\n//       setImageFile(file);\n//       const reader = new FileReader();\n//       reader.onload = (event) => {\n//         const result = event.target?.result as string;\n//         setImagePreview(result);\n//         setFormData(prev => ({ ...prev, image: result }));\n//       };\n//       reader.readAsDataURL(file);\n//     }\n//   };\n\n//   const mutation = useMutation({\n//     mutationFn: async (data: typeof formData) => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       const url = isEditing\n//         ? `/api/admin/restaurants/${id}`\n//         : \"/api/admin/restaurants\";\n//       const method = isEditing ? \"PUT\" : \"POST\";\n\n//       const requestData = {\n//         ...data,\n//         customTypes: data.customTypes.split(\",\").map(type => type.trim()).filter(Boolean)\n//       };\n      \n//       return await apiRequest(url, {\n//         method,\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(requestData),\n//       });\n//     },\n//     onSuccess: () => {\n//       toast({\n//         title: \"Success\",\n//         description: `Restaurant ${isEditing ? \"updated\" : \"created\"} successfully`,\n//       });\n//       queryClient.invalidateQueries({ queryKey: [\"/api/admin/restaurants\"] });\n//       setLocation(\"/admin/dashboard\");\n//     },\n//     onError: (error: any) => {\n//       toast({\n//         title: \"Error\",\n//         description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} restaurant`,\n//         variant: \"destructive\",\n//       });\n//     },\n//   });\n\n//   const handleSubmit = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     mutation.mutate(formData);\n//   };\n\n//   const handleInputChange = (field: string, value: string | boolean) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//   };\n\n//   if (isEditing && isLoading) {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <div className=\"text-blue-600 text-lg\">Loading...</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-50\">\n//       <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n//         <div className=\"mb-6\">\n//           <Button\n//             variant=\"outline\"\n//             onClick={() => setLocation(\"/admin/dashboard\")}\n//             className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n//           >\n//             <ArrowLeft className=\"w-4 h-4 mr-2\" />\n//             Back to Dashboard\n//           </Button>\n//         </div>\n\n//         <Card className=\"bg-white border-gray-200 shadow-sm\">\n//           <CardHeader className=\"px-4 sm:px-6\">\n//             <div className=\"flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-3\">\n//               <Store className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n//               <div className=\"min-w-0\">\n//                 <CardTitle className=\"text-xl sm:text-2xl text-blue-600 break-words\">\n//                   {isEditing ? \"Edit Restaurant\" : \"Add New Restaurant\"}\n//                 </CardTitle>\n//                 <CardDescription className=\"text-sm sm:text-base text-gray-600\">\n//                   {isEditing ? \"Update restaurant information\" : \"Create a new restaurant\"}\n//                 </CardDescription>\n//               </div>\n//             </div>\n//           </CardHeader>\n//           <CardContent className=\"px-4 sm:px-6\">\n//             <form onSubmit={handleSubmit} className=\"space-y-6\">\n//               <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">\n//                     Restaurant Name *\n//                   </Label>\n//                   <Input\n//                     id=\"name\"\n//                     type=\"text\"\n//                     value={formData.name}\n//                     onChange={(e) => handleInputChange(\"name\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter restaurant name\"\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n//                     Email *\n//                   </Label>\n//                   <Input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     value={formData.email}\n//                     onChange={(e) => handleInputChange(\"email\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter email address\"\n//                     required\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"description\" className=\"text-sm font-medium text-gray-700\">\n//                   Description *\n//                 </Label>\n//                 <Textarea\n//                   id=\"description\"\n//                   value={formData.description}\n//                   onChange={(e) => handleInputChange(\"description\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n//                   placeholder=\"Enter restaurant description\"\n//                   rows={3}\n//                   required\n//                 />\n//               </div>\n\n//               <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700\">\n//                     Address *\n//                   </Label>\n//                   <Textarea\n//                     id=\"address\"\n//                     value={formData.address}\n//                     onChange={(e) => handleInputChange(\"address\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n//                     placeholder=\"Enter restaurant address\"\n//                     rows={2}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700\">\n//                     Phone Number *\n//                   </Label>\n//                   <Input\n//                     id=\"phone\"\n//                     type=\"tel\"\n//                     value={formData.phone}\n//                     onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter phone number\"\n//                     required\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"website\" className=\"text-sm font-medium text-gray-700\">\n//                   Restaurant Website (Optional)\n//                 </Label>\n//                 <Input\n//                   id=\"website\"\n//                   type=\"url\"\n//                   value={formData.website}\n//                   onChange={(e) => handleInputChange(\"website\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                   placeholder=\"https://your-restaurant-website.com\"\n//                 />\n//                 <p className=\"text-xs sm:text-sm text-gray-600\">\n//                   If provided, a QR code will be generated for customers to visit your website\n//                 </p>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"image\" className=\"text-sm font-medium text-gray-700\">\n//                   Restaurant Image *\n//                 </Label>\n//                 <div className=\"space-y-3\">\n//                   <Input\n//                     id=\"image-upload\"\n//                     type=\"file\"\n//                     accept=\"image/*\"\n//                     onChange={handleImageUpload}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                   />\n//                   <p className=\"text-xs sm:text-sm text-gray-600\">Or enter image URL:</p>\n//                   <Input\n//                     id=\"image\"\n//                     type=\"url\"\n//                     value={formData.image}\n//                     onChange={(e) => handleInputChange(\"image\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter image URL\"\n//                   />\n//                   {imagePreview && (\n//                     <div className=\"mt-3\">\n//                       <img\n//                         src={imagePreview}\n//                         alt=\"Restaurant preview\"\n//                         className=\"w-24 h-24 sm:w-32 sm:h-32 object-cover rounded-lg border border-gray-200\"\n//                       />\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"mongoUri\" className=\"text-sm font-medium text-gray-700\">\n//                   MongoDB URI (Optional)\n//                 </Label>\n//                 <Input\n//                   id=\"mongoUri\"\n//                   type=\"text\"\n//                   value={formData.mongoUri}\n//                   onChange={(e) => handleInputChange(\"mongoUri\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                   placeholder=\"Enter MongoDB connection string to fetch dishes dynamically\"\n//                 />\n//                 <p className=\"text-xs sm:text-sm text-gray-600\">\n//                   If provided, the system will fetch menu items directly from this database\n//                 </p>\n//               </div>\n\n//               {!formData.mongoUri && (\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"customTypes\" className=\"text-sm font-medium text-gray-700\">\n//                     Menu Categories *\n//                   </Label>\n//                   <Input\n//                     id=\"customTypes\"\n//                     type=\"text\"\n//                     value={formData.customTypes}\n//                     onChange={(e) => handleInputChange(\"customTypes\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Starters,Main Course,Desserts,Beverages\"\n//                     required\n//                   />\n//                   <p className=\"text-xs sm:text-sm text-gray-600\">\n//                     Enter categories separated by commas (e.g., Starters,Main Course,Desserts)\n//                   </p>\n//                 </div>\n//               )}\n              \n//               {formData.mongoUri && (\n//                 <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\n//                   <div className=\"flex items-center space-x-2\">\n//                     <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\"></div>\n//                     <p className=\"text-xs sm:text-sm font-medium text-blue-800\">\n//                       Categories will be automatically extracted from your MongoDB database\n//                     </p>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {isEditing && (\n//                 <div className=\"flex items-center space-x-3\">\n//                   <Switch\n//                     id=\"isActive\"\n//                     checked={formData.isActive}\n//                     onCheckedChange={(checked) => handleInputChange(\"isActive\", checked)}\n//                   />\n//                   <Label htmlFor=\"isActive\" className=\"text-sm font-medium text-gray-700\">\n//                     Restaurant is active\n//                   </Label>\n//                 </div>\n//               )}\n\n//               <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 pt-4\">\n//                 <Button\n//                   type=\"submit\"\n//                   disabled={mutation.isPending}\n//                   className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold order-2 sm:order-1\"\n//                 >\n//                   <Save className=\"w-4 h-4 mr-2\" />\n//                   {mutation.isPending\n//                     ? `${isEditing ? \"Updating\" : \"Creating\"}...`\n//                     : `${isEditing ? \"Update\" : \"Create\"} Restaurant`}\n//                 </Button>\n//                 <Button\n//                   type=\"button\"\n//                   variant=\"outline\"\n//                   onClick={() => setLocation(\"/admin/dashboard\")}\n//                   className=\"w-full sm:w-auto border-blue-600 text-blue-600 hover:bg-blue-50 order-1 sm:order-2\"\n//                 >\n//                   Cancel\n//                 </Button>\n//               </div>\n//             </form>\n//           </CardContent>\n//         </Card>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n\n\n\n\n\n\n\n\n\n// import { useState, useEffect } from \"react\";\n// import { useLocation, useParams } from \"wouter\";\n// import { useMutation, useQuery } from \"@tanstack/react-query\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import { Textarea } from \"@/components/ui/textarea\";\n// import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Switch } from \"@/components/ui/switch\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { apiRequest } from \"@/lib/queryClient\";\n// import { queryClient } from \"@/lib/queryClient\";\n// import { ArrowLeft, Save, Store, Upload } from \"lucide-react\";\n\n// interface Restaurant {\n//   _id: string;\n//   name: string;\n//   description: string;\n//   address: string;\n//   phone: string;\n//   email: string;\n//   image: string;\n//   website?: string;\n//   qrCode?: string;\n//   mongoUri?: string;\n//   customTypes?: string[];\n//   customAttributes?: any;\n//   isActive: boolean;\n// }\n\n// export default function RestaurantForm() {\n//   const params = useParams();\n//   const [, setLocation] = useLocation();\n//   const { toast } = useToast();\n//   const id = params.id;\n//   const isEditing = Boolean(id);\n\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     address: \"\",\n//     phone: \"\",\n//     email: \"\",\n//     image: \"\",\n//     website: \"\",\n//     mongoUri: \"\",\n//     customTypes: \"Starters,Main Course,Desserts,Beverages\",\n//     isActive: true,\n//   });\n\n//   const [imageFile, setImageFile] = useState<File | null>(null);\n//   const [imagePreview, setImagePreview] = useState<string>(\"\");\n//   const [isCompressing, setIsCompressing] = useState(false);\n\n//   const { data: restaurant, isLoading, error } = useQuery({\n//     queryKey: [`/api/admin/restaurants/${id}`],\n//     queryFn: async () => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       return await apiRequest(`/api/admin/restaurants/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n//     },\n//     enabled: isEditing,\n//   });\n\n//   useEffect(() => {\n//     if (restaurant) {\n//       setFormData({\n//         name: restaurant.name || \"\",\n//         description: restaurant.description || \"\",\n//         address: restaurant.address || \"\",\n//         phone: restaurant.phone || \"\",\n//         email: restaurant.email || \"\",\n//         image: restaurant.image || \"\",\n//         website: restaurant.website || \"\",\n//         mongoUri: restaurant.mongoUri || \"\",\n//         customTypes: restaurant.customTypes?.join(\",\") || \"Starters,Main Course,Desserts,Beverages\",\n//         isActive: restaurant.isActive ?? true,\n//       });\n//       setImagePreview(restaurant.image || \"\");\n//     }\n//   }, [restaurant]);\n\n//   // Function to compress image\n//   const compressImage = (file: File, maxWidth = 1200, maxHeight = 1200, quality = 0.8): Promise<string> => {\n//     return new Promise((resolve) => {\n//       const canvas = document.createElement('canvas');\n//       const ctx = canvas.getContext('2d');\n//       const img = new Image();\n\n//       img.onload = () => {\n//         // Calculate new dimensions\n//         let { width, height } = img;\n        \n//         if (width > height) {\n//           if (width > maxWidth) {\n//             height = (height * maxWidth) / width;\n//             width = maxWidth;\n//           }\n//         } else {\n//           if (height > maxHeight) {\n//             width = (width * maxHeight) / height;\n//             height = maxHeight;\n//           }\n//         }\n\n//         canvas.width = width;\n//         canvas.height = height;\n\n//         // Draw and compress\n//         ctx?.drawImage(img, 0, 0, width, height);\n        \n//         // Convert to base64 with compression\n//         const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n//         resolve(compressedDataUrl);\n//       };\n\n//       img.src = URL.createObjectURL(file);\n//     });\n//   };\n\n//   const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = e.target.files?.[0];\n//     if (file) {\n//       // Check if file is an image\n//       if (!file.type.startsWith('image/')) {\n//         toast({\n//           title: \"Invalid file type\",\n//           description: \"Please select an image file\",\n//           variant: \"destructive\",\n//         });\n//         return;\n//       }\n\n//       setImageFile(file);\n//       setIsCompressing(true);\n\n//       try {\n//         // Show original file info\n//         const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);\n//         console.log(`Original file size: ${fileSizeMB} MB`);\n\n//         // Compress the image\n//         const compressedDataUrl = await compressImage(file);\n        \n//         // Calculate compressed size (approximate)\n//         const compressedSizeKB = Math.round((compressedDataUrl.length * 3) / 4 / 1024);\n//         console.log(`Compressed size: ${compressedSizeKB} KB`);\n\n//         setImagePreview(compressedDataUrl);\n//         setFormData(prev => ({ ...prev, image: compressedDataUrl }));\n\n//         toast({\n//           title: \"Image processed\",\n//           description: `Original: ${fileSizeMB}MB → Compressed: ${compressedSizeKB}KB`,\n//         });\n\n//       } catch (error) {\n//         console.error('Error compressing image:', error);\n//         toast({\n//           title: \"Error processing image\",\n//           description: \"Failed to process the image. Please try again.\",\n//           variant: \"destructive\",\n//         });\n//       } finally {\n//         setIsCompressing(false);\n//       }\n//     }\n//   };\n\n//   const mutation = useMutation({\n//     mutationFn: async (data: typeof formData) => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       const url = isEditing\n//         ? `/api/admin/restaurants/${id}`\n//         : \"/api/admin/restaurants\";\n//       const method = isEditing ? \"PUT\" : \"POST\";\n\n//       const requestData = {\n//         ...data,\n//         customTypes: data.customTypes.split(\",\").map(type => type.trim()).filter(Boolean)\n//       };\n      \n//       return await apiRequest(url, {\n//         method,\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: JSON.stringify(requestData),\n//       });\n//     },\n//     onSuccess: () => {\n//       toast({\n//         title: \"Success\",\n//         description: `Restaurant ${isEditing ? \"updated\" : \"created\"} successfully`,\n//       });\n//       queryClient.invalidateQueries({ queryKey: [\"/api/admin/restaurants\"] });\n//       setLocation(\"/admin/dashboard\");\n//     },\n//     onError: (error: any) => {\n//       toast({\n//         title: \"Error\",\n//         description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} restaurant`,\n//         variant: \"destructive\",\n//       });\n//     },\n//   });\n\n//   const handleSubmit = (e: React.FormEvent) => {\n//     e.preventDefault();\n//     mutation.mutate(formData);\n//   };\n\n//   const handleInputChange = (field: string, value: string | boolean) => {\n//     setFormData(prev => ({ ...prev, [field]: value }));\n//   };\n\n//   if (isEditing && isLoading) {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <div className=\"text-blue-600 text-lg\">Loading...</div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-50\">\n//       <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n//         <div className=\"mb-6\">\n//           <Button\n//             variant=\"outline\"\n//             onClick={() => setLocation(\"/admin/dashboard\")}\n//             className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n//           >\n//             <ArrowLeft className=\"w-4 h-4 mr-2\" />\n//             Back to Dashboard\n//           </Button>\n//         </div>\n\n//         <Card className=\"bg-white border-gray-200 shadow-sm\">\n//           <CardHeader className=\"px-4 sm:px-6\">\n//             <div className=\"flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-3\">\n//               <Store className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n//               <div className=\"min-w-0\">\n//                 <CardTitle className=\"text-xl sm:text-2xl text-blue-600 break-words\">\n//                   {isEditing ? \"Edit Restaurant\" : \"Add New Restaurant\"}\n//                 </CardTitle>\n//                 <CardDescription className=\"text-sm sm:text-base text-gray-600\">\n//                   {isEditing ? \"Update restaurant information\" : \"Create a new restaurant\"}\n//                 </CardDescription>\n//               </div>\n//             </div>\n//           </CardHeader>\n//           <CardContent className=\"px-4 sm:px-6\">\n//             <form onSubmit={handleSubmit} className=\"space-y-6\">\n//               <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">\n//                     Restaurant Name *\n//                   </Label>\n//                   <Input\n//                     id=\"name\"\n//                     type=\"text\"\n//                     value={formData.name}\n//                     onChange={(e) => handleInputChange(\"name\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter restaurant name\"\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n//                     Email *\n//                   </Label>\n//                   <Input\n//                     id=\"email\"\n//                     type=\"email\"\n//                     value={formData.email}\n//                     onChange={(e) => handleInputChange(\"email\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter email address\"\n//                     required\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"description\" className=\"text-sm font-medium text-gray-700\">\n//                   Description *\n//                 </Label>\n//                 <Textarea\n//                   id=\"description\"\n//                   value={formData.description}\n//                   onChange={(e) => handleInputChange(\"description\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n//                   placeholder=\"Enter restaurant description\"\n//                   rows={3}\n//                   required\n//                 />\n//               </div>\n\n//               <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700\">\n//                     Address *\n//                   </Label>\n//                   <Textarea\n//                     id=\"address\"\n//                     value={formData.address}\n//                     onChange={(e) => handleInputChange(\"address\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n//                     placeholder=\"Enter restaurant address\"\n//                     rows={2}\n//                     required\n//                   />\n//                 </div>\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700\">\n//                     Phone Number *\n//                   </Label>\n//                   <Input\n//                     id=\"phone\"\n//                     type=\"tel\"\n//                     value={formData.phone}\n//                     onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter phone number\"\n//                     required\n//                   />\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"website\" className=\"text-sm font-medium text-gray-700\">\n//                   Restaurant Website (Optional)\n//                 </Label>\n//                 <Input\n//                   id=\"website\"\n//                   type=\"url\"\n//                   value={formData.website}\n//                   onChange={(e) => handleInputChange(\"website\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                   placeholder=\"https://your-restaurant-website.com\"\n//                 />\n//                 <p className=\"text-xs sm:text-sm text-gray-600\">\n//                   If provided, a QR code will be generated for customers to visit your website\n//                 </p>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"image\" className=\"text-sm font-medium text-gray-700\">\n//                   Restaurant Image *\n//                 </Label>\n//                 <div className=\"space-y-3\">\n//                   <div className=\"relative\">\n//                     <Input\n//                       id=\"image-upload\"\n//                       type=\"file\"\n//                       accept=\"image/*\"\n//                       onChange={handleImageUpload}\n//                       className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                       disabled={isCompressing}\n//                     />\n//                     {isCompressing && (\n//                       <div className=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\">\n//                         <div className=\"text-sm text-blue-600\">Compressing image...</div>\n//                       </div>\n//                     )}\n//                   </div>\n//                   <p className=\"text-xs sm:text-sm text-gray-600\">\n//                     Upload any size image - it will be automatically compressed for optimal performance\n//                   </p>\n//                   <p className=\"text-xs sm:text-sm text-gray-600\">Or enter image URL:</p>\n//                   <Input\n//                     id=\"image\"\n//                     type=\"url\"\n//                     value={formData.image}\n//                     onChange={(e) => handleInputChange(\"image\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Enter image URL\"\n//                   />\n//                   {imagePreview && (\n//                     <div className=\"mt-3\">\n//                       <img\n//                         src={imagePreview}\n//                         alt=\"Restaurant preview\"\n//                         className=\"w-24 h-24 sm:w-32 sm:h-32 object-cover rounded-lg border border-gray-200\"\n//                       />\n//                     </div>\n//                   )}\n//                 </div>\n//               </div>\n\n//               <div className=\"space-y-2\">\n//                 <Label htmlFor=\"mongoUri\" className=\"text-sm font-medium text-gray-700\">\n//                   MongoDB URI (Optional)\n//                 </Label>\n//                 <Input\n//                   id=\"mongoUri\"\n//                   type=\"text\"\n//                   value={formData.mongoUri}\n//                   onChange={(e) => handleInputChange(\"mongoUri\", e.target.value)}\n//                   className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                   placeholder=\"Enter MongoDB connection string to fetch dishes dynamically\"\n//                 />\n//                 <p className=\"text-xs sm:text-sm text-gray-600\">\n//                   If provided, the system will fetch menu items directly from this database\n//                 </p>\n//               </div>\n\n//               {!formData.mongoUri && (\n//                 <div className=\"space-y-2\">\n//                   <Label htmlFor=\"customTypes\" className=\"text-sm font-medium text-gray-700\">\n//                     Menu Categories *\n//                   </Label>\n//                   <Input\n//                     id=\"customTypes\"\n//                     type=\"text\"\n//                     value={formData.customTypes}\n//                     onChange={(e) => handleInputChange(\"customTypes\", e.target.value)}\n//                     className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n//                     placeholder=\"Starters,Main Course,Desserts,Beverages\"\n//                     required\n//                   />\n//                   <p className=\"text-xs sm:text-sm text-gray-600\">\n//                     Enter categories separated by commas (e.g., Starters,Main Course,Desserts)\n//                   </p>\n//                 </div>\n//               )}\n              \n//               {formData.mongoUri && (\n//                 <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\n//                   <div className=\"flex items-center space-x-2\">\n//                     <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\"></div>\n//                     <p className=\"text-xs sm:text-sm font-medium text-blue-800\">\n//                       Categories will be automatically extracted from your MongoDB database\n//                     </p>\n//                   </div>\n//                 </div>\n//               )}\n\n//               {isEditing && (\n//                 <div className=\"flex items-center space-x-3\">\n//                   <Switch\n//                     id=\"isActive\"\n//                     checked={formData.isActive}\n//                     onCheckedChange={(checked) => handleInputChange(\"isActive\", checked)}\n//                   />\n//                   <Label htmlFor=\"isActive\" className=\"text-sm font-medium text-gray-700\">\n//                     Restaurant is active\n//                   </Label>\n//                 </div>\n//               )}\n\n//               <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 pt-4\">\n//                 <Button\n//                   type=\"submit\"\n//                   disabled={mutation.isPending || isCompressing}\n//                   className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold order-2 sm:order-1\"\n//                 >\n//                   <Save className=\"w-4 h-4 mr-2\" />\n//                   {mutation.isPending\n//                     ? `${isEditing ? \"Updating\" : \"Creating\"}...`\n//                     : `${isEditing ? \"Update\" : \"Create\"} Restaurant`}\n//                 </Button>\n//                 <Button\n//                   type=\"button\"\n//                   variant=\"outline\"\n//                   onClick={() => setLocation(\"/admin/dashboard\")}\n//                   className=\"w-full sm:w-auto border-blue-600 text-blue-600 hover:bg-blue-50 order-1 sm:order-2\"\n//                 >\n//                   Cancel\n//                 </Button>\n//               </div>\n//             </form>\n//           </CardContent>\n//         </Card>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { ArrowLeft, Save, Store, Upload } from \"lucide-react\";\n\ninterface Restaurant {\n  _id: string;\n  name: string;\n  description: string;\n  address: string;\n  phone: string;\n  email: string;\n  image: string;\n  website?: string;\n  qrCode?: string;\n  mongoUri?: string;\n  customTypes?: string[];\n  customAttributes?: any;\n  isActive: boolean;\n}\n\nexport default function RestaurantForm() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const id = params.id;\n  const isEditing = Boolean(id);\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    image: \"\",\n    website: \"\",\n    mongoUri: \"\",\n    customTypes: \"Starters,Main Course,Desserts,Beverages\",\n    isActive: true,\n  });\n\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string>(\"\");\n  const [isCompressing, setIsCompressing] = useState(false);\n\n  const { data: restaurant, isLoading, error } = useQuery({\n    queryKey: [`/api/admin/restaurants/${id}`],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      return await apiRequest(`/api/admin/restaurants/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    },\n    enabled: isEditing,\n  });\n\n  useEffect(() => {\n    if (restaurant) {\n      setFormData({\n        name: restaurant.name || \"\",\n        description: restaurant.description || \"\",\n        address: restaurant.address || \"\",\n        phone: restaurant.phone || \"\",\n        email: restaurant.email || \"\",\n        image: restaurant.image || \"\",\n        website: restaurant.website || \"\",\n        mongoUri: restaurant.mongoUri || \"\",\n        customTypes: restaurant.customTypes?.join(\",\") || \"Starters,Main Course,Desserts,Beverages\",\n        isActive: restaurant.isActive ?? true,\n      });\n      setImagePreview(restaurant.image || \"\");\n    }\n  }, [restaurant]);\n\n  // Function to compress image\n  const compressImage = (file: File, maxWidth = 1200, maxHeight = 1200, quality = 0.8): Promise<string> => {\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n\n      img.onload = () => {\n        // Calculate new dimensions\n        let { width, height } = img;\n        \n        if (width > height) {\n          if (width > maxWidth) {\n            height = (height * maxWidth) / width;\n            width = maxWidth;\n          }\n        } else {\n          if (height > maxHeight) {\n            width = (width * maxHeight) / height;\n            height = maxHeight;\n          }\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n\n        // Fill canvas with white background before drawing image\n        if (ctx) {\n          ctx.fillStyle = '#FFFFFF';\n          ctx.fillRect(0, 0, width, height);\n          \n          // Draw image on top of white background\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n        \n        // Convert to base64 with compression\n        const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(compressedDataUrl);\n      };\n\n      img.src = URL.createObjectURL(file);\n    });\n  };\n\n  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      // Check if file is an image\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setImageFile(file);\n      setIsCompressing(true);\n\n      try {\n        // Show original file info\n        const fileSizeMB = (file.size / (1024 * 1024)).toFixed(2);\n        console.log(`Original file size: ${fileSizeMB} MB`);\n\n        // Compress the image\n        const compressedDataUrl = await compressImage(file);\n        \n        // Calculate compressed size (approximate)\n        const compressedSizeKB = Math.round((compressedDataUrl.length * 3) / 4 / 1024);\n        console.log(`Compressed size: ${compressedSizeKB} KB`);\n\n        setImagePreview(compressedDataUrl);\n        setFormData(prev => ({ ...prev, image: compressedDataUrl }));\n\n        toast({\n          title: \"Image processed\",\n          description: `Original: ${fileSizeMB}MB → Compressed: ${compressedSizeKB}KB`,\n        });\n\n      } catch (error) {\n        console.error('Error compressing image:', error);\n        toast({\n          title: \"Error processing image\",\n          description: \"Failed to process the image. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsCompressing(false);\n      }\n    }\n  };\n\n  const mutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const url = isEditing\n        ? `/api/admin/restaurants/${id}`\n        : \"/api/admin/restaurants\";\n      const method = isEditing ? \"PUT\" : \"POST\";\n\n      const requestData = {\n        ...data,\n        customTypes: data.customTypes.split(\",\").map(type => type.trim()).filter(Boolean)\n      };\n      \n      return await apiRequest(url, {\n        method,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(requestData),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Restaurant ${isEditing ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/restaurants\"] });\n      setLocation(\"/admin/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${isEditing ? \"update\" : \"create\"} restaurant`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    mutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  if (isEditing && isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-blue-600 text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"mb-6\">\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(\"/admin/dashboard\")}\n            className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Dashboard\n          </Button>\n        </div>\n\n        <Card className=\"bg-white border-gray-200 shadow-sm\">\n          <CardHeader className=\"px-4 sm:px-6\">\n            <div className=\"flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-3\">\n              <Store className=\"w-6 h-6 sm:w-8 sm:h-8 text-blue-600 flex-shrink-0\" />\n              <div className=\"min-w-0\">\n                <CardTitle className=\"text-xl sm:text-2xl text-blue-600 break-words\">\n                  {isEditing ? \"Edit Restaurant\" : \"Add New Restaurant\"}\n                </CardTitle>\n                <CardDescription className=\"text-sm sm:text-base text-gray-600\">\n                  {isEditing ? \"Update restaurant information\" : \"Create a new restaurant\"}\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"px-4 sm:px-6\">\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\" className=\"text-sm font-medium text-gray-700\">\n                    Restaurant Name *\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    value={formData.name}\n                    onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                    placeholder=\"Enter restaurant name\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                    Email *\n                  </Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                    placeholder=\"Enter email address\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\" className=\"text-sm font-medium text-gray-700\">\n                  Description *\n                </Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                  className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n                  placeholder=\"Enter restaurant description\"\n                  rows={3}\n                  required\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\" className=\"text-sm font-medium text-gray-700\">\n                    Address *\n                  </Label>\n                  <Textarea\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange(\"address\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500 resize-none\"\n                    placeholder=\"Enter restaurant address\"\n                    rows={2}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\" className=\"text-sm font-medium text-gray-700\">\n                    Phone Number *\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => handleInputChange(\"phone\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                    placeholder=\"Enter phone number\"\n                    required\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"website\" className=\"text-sm font-medium text-gray-700\">\n                  Restaurant Website (Optional)\n                </Label>\n                <Input\n                  id=\"website\"\n                  type=\"url\"\n                  value={formData.website}\n                  onChange={(e) => handleInputChange(\"website\", e.target.value)}\n                  className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"https://your-restaurant-website.com\"\n                />\n                <p className=\"text-xs sm:text-sm text-gray-600\">\n                  If provided, a QR code will be generated for customers to visit your website\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image\" className=\"text-sm font-medium text-gray-700\">\n                  Restaurant Image *\n                </Label>\n                <div className=\"space-y-3\">\n                  <div className=\"relative\">\n                    <Input\n                      id=\"image-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageUpload}\n                      className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                      disabled={isCompressing}\n                    />\n                    {isCompressing && (\n                      <div className=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\">\n                        <div className=\"text-sm text-blue-600\">Compressing image...</div>\n                      </div>\n                    )}\n                  </div>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">\n                    Upload any size image - it will be automatically compressed for optimal performance\n                  </p>\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Or enter image URL:</p>\n                  <Input\n                    id=\"image\"\n                    type=\"url\"\n                    value={formData.image}\n                    onChange={(e) => handleInputChange(\"image\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                    placeholder=\"Enter image URL\"\n                  />\n                  {imagePreview && (\n                    <div className=\"mt-3\">\n                      <img\n                        src={imagePreview}\n                        alt=\"Restaurant preview\"\n                        className=\"w-24 h-24 sm:w-32 sm:h-32 object-cover rounded-lg border border-gray-200\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"mongoUri\" className=\"text-sm font-medium text-gray-700\">\n                  MongoDB URI (Optional)\n                </Label>\n                <Input\n                  id=\"mongoUri\"\n                  type=\"text\"\n                  value={formData.mongoUri}\n                  onChange={(e) => handleInputChange(\"mongoUri\", e.target.value)}\n                  className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                  placeholder=\"Enter MongoDB connection string to fetch dishes dynamically\"\n                />\n                <p className=\"text-xs sm:text-sm text-gray-600\">\n                  If provided, the system will fetch menu items directly from this database\n                </p>\n              </div>\n\n              {!formData.mongoUri && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"customTypes\" className=\"text-sm font-medium text-gray-700\">\n                    Menu Categories *\n                  </Label>\n                  <Input\n                    id=\"customTypes\"\n                    type=\"text\"\n                    value={formData.customTypes}\n                    onChange={(e) => handleInputChange(\"customTypes\", e.target.value)}\n                    className=\"w-full bg-gray-50 border-gray-200 text-gray-900 focus:border-blue-500 focus:ring-blue-500\"\n                    placeholder=\"Starters,Main Course,Desserts,Beverages\"\n                    required\n                  />\n                  <p className=\"text-xs sm:text-sm text-gray-600\">\n                    Enter categories separated by commas (e.g., Starters,Main Course,Desserts)\n                  </p>\n                </div>\n              )}\n              \n              {formData.mongoUri && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 sm:p-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full flex-shrink-0\"></div>\n                    <p className=\"text-xs sm:text-sm font-medium text-blue-800\">\n                      Categories will be automatically extracted from your MongoDB database\n                    </p>\n                  </div>\n                </div>\n              )}\n\n              {isEditing && (\n                <div className=\"flex items-center space-x-3\">\n                  <Switch\n                    id=\"isActive\"\n                    checked={formData.isActive}\n                    onCheckedChange={(checked) => handleInputChange(\"isActive\", checked)}\n                  />\n                  <Label htmlFor=\"isActive\" className=\"text-sm font-medium text-gray-700\">\n                    Restaurant is active\n                  </Label>\n                </div>\n              )}\n\n              <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 pt-4\">\n                <Button\n                  type=\"submit\"\n                  disabled={mutation.isPending || isCompressing}\n                  className=\"w-full sm:w-auto bg-blue-600 hover:bg-blue-700 text-white font-semibold order-2 sm:order-1\"\n                >\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  {mutation.isPending\n                    ? `${isEditing ? \"Updating\" : \"Creating\"}...`\n                    : `${isEditing ? \"Update\" : \"Create\"} Restaurant`}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation(\"/admin/dashboard\")}\n                  className=\"w-full sm:w-auto border-blue-600 text-blue-600 hover:bg-blue-50 order-1 sm:order-2\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":55633},"client/src/components/BulkMenuImport.tsx":{"content":"// import React, { useState } from \"react\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Alert, AlertDescription } from \"@/components/ui/alert\";\n// import { Progress } from \"@/components/ui/progress\";\n// import { Download, Upload, FileSpreadsheet, AlertCircle, CheckCircle } from \"lucide-react\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { useMutation } from \"@tanstack/react-query\";\n// import { apiRequest } from \"@/lib/queryClient\";\n\n// interface BulkMenuImportProps {\n//   restaurantId: string;\n//   isOpen: boolean;\n//   onClose: () => void;\n//   onSuccess: () => void;\n// }\n\n// interface ImportResult {\n//   success: boolean;\n//   message: string;\n//   imported: number;\n//   failed: number;\n//   errors?: string[];\n// }\n\n// export function BulkMenuImport({ restaurantId, isOpen, onClose, onSuccess }: BulkMenuImportProps) {\n//   const [selectedFile, setSelectedFile] = useState<File | null>(null);\n//   const [importResult, setImportResult] = useState<ImportResult | null>(null);\n//   const { toast } = useToast();\n\n//   const downloadTemplateMutation = useMutation({\n//     mutationFn: async () => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       const response = await fetch(`/api/admin/restaurants/${restaurantId}/menu-template`, {\n//         method: \"GET\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(\"Failed to download template\");\n//       }\n\n//       const blob = await response.blob();\n//       const url = window.URL.createObjectURL(blob);\n//       const a = document.createElement(\"a\");\n//       a.href = url;\n//       a.download = `menu-template-${restaurantId}.xlsx`;\n//       document.body.appendChild(a);\n//       a.click();\n//       window.URL.revokeObjectURL(url);\n//       document.body.removeChild(a);\n//     },\n//     onSuccess: () => {\n//       toast({\n//         title: \"Template Downloaded\",\n//         description: \"Excel template has been downloaded successfully\",\n//       });\n//     },\n//     onError: (error: any) => {\n//       toast({\n//         title: \"Download Failed\",\n//         description: error.message || \"Failed to download template\",\n//         variant: \"destructive\",\n//       });\n//     },\n//   });\n\n//   const importMenuMutation = useMutation({\n//     mutationFn: async (file: File) => {\n//       const token = localStorage.getItem(\"adminToken\");\n//       const formData = new FormData();\n//       formData.append(\"menuFile\", file);\n\n//       const response = await fetch(`/api/admin/restaurants/${restaurantId}/menu-import`, {\n//         method: \"POST\",\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//         },\n//         body: formData,\n//       });\n\n//       if (!response.ok) {\n//         throw new Error(`Import failed: ${response.statusText}`);\n//       }\n\n//       return await response.json();\n//     },\n//     onSuccess: (result: ImportResult) => {\n//       setImportResult(result);\n//       if (result.success) {\n//         toast({\n//           title: \"Import Successful\",\n//           description: `Successfully imported ${result.imported} menu items`,\n//         });\n//         onSuccess();\n//       } else {\n//         toast({\n//           title: \"Import Completed with Errors\",\n//           description: `Imported ${result.imported} items, ${result.failed} failed`,\n//           variant: \"destructive\",\n//         });\n//       }\n//     },\n//     onError: (error: any) => {\n//       toast({\n//         title: \"Import Failed\",\n//         description: error.message || \"Failed to import menu items\",\n//         variant: \"destructive\",\n//       });\n//     },\n//   });\n\n//   const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     const file = event.target.files?.[0];\n//     if (file) {\n//       if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" || \n//           file.type === \"application/vnd.ms-excel\" ||\n//           file.name.endsWith('.xlsx') || \n//           file.name.endsWith('.xls')) {\n//         setSelectedFile(file);\n//         setImportResult(null);\n//       } else {\n//         toast({\n//           title: \"Invalid File Type\",\n//           description: \"Please select an Excel file (.xlsx or .xls)\",\n//           variant: \"destructive\",\n//         });\n//       }\n//     }\n//   };\n\n//   const handleImport = () => {\n//     if (selectedFile) {\n//       importMenuMutation.mutate(selectedFile);\n//     }\n//   };\n\n//   const resetForm = () => {\n//     setSelectedFile(null);\n//     setImportResult(null);\n//     onClose();\n//   };\n\n//   return (\n//     <Dialog open={isOpen} onOpenChange={resetForm}>\n//       <DialogContent className=\"max-w-2xl\">\n//         <DialogHeader>\n//           <DialogTitle className=\"flex items-center gap-2\">\n//             <FileSpreadsheet className=\"h-5 w-5\" />\n//             Bulk Menu Import\n//           </DialogTitle>\n//         </DialogHeader>\n\n//         <div className=\"space-y-6\">\n//           {/* Step 1: Download Template */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle className=\"text-lg flex items-center gap-2\">\n//                 <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">1</span>\n//                 Download Template\n//               </CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <p className=\"text-gray-600 mb-4\">\n//                 Download the Excel template with the correct format for your restaurant's menu categories.\n//               </p>\n//               <Button\n//                 onClick={() => downloadTemplateMutation.mutate()}\n//                 disabled={downloadTemplateMutation.isPending}\n//                 className=\"flex items-center gap-2\"\n//               >\n//                 <Download className=\"h-4 w-4\" />\n//                 {downloadTemplateMutation.isPending ? \"Downloading...\" : \"Download Excel Template\"}\n//               </Button>\n//             </CardContent>\n//           </Card>\n\n//           {/* Step 2: Fill Template */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle className=\"text-lg flex items-center gap-2\">\n//                 <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">2</span>\n//                 Fill Template\n//               </CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <Alert>\n//                 <AlertCircle className=\"h-4 w-4\" />\n//                 <AlertDescription>\n//                   <strong>Template Format:</strong>\n//                   <ul className=\"mt-2 ml-4 list-disc space-y-1\">\n//                     <li><strong>Name:</strong> Menu item name (required)</li>\n//                     <li><strong>Description:</strong> Item description (required)</li>\n//                     <li><strong>Price:</strong> Price as number (required)</li>\n//                     <li><strong>Category:</strong> Must match your restaurant's categories (required)</li>\n//                     <li><strong>IsVeg:</strong> TRUE for vegetarian, FALSE for non-vegetarian (required)</li>\n//                     <li><strong>Image:</strong> Image URL or filename (required)</li>\n//                     <li><strong>IsAvailable:</strong> TRUE for available, FALSE for unavailable (optional, defaults to TRUE)</li>\n//                   </ul>\n//                 </AlertDescription>\n//               </Alert>\n//             </CardContent>\n//           </Card>\n\n//           {/* Step 3: Upload File */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle className=\"text-lg flex items-center gap-2\">\n//                 <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold\">3</span>\n//                 Upload Filled Template\n//               </CardTitle>\n//             </CardHeader>\n//             <CardContent className=\"space-y-4\">\n//               <div>\n//                 <Label htmlFor=\"menu-file\">Select Excel File</Label>\n//                 <Input\n//                   id=\"menu-file\"\n//                   type=\"file\"\n//                   accept=\".xlsx,.xls\"\n//                   onChange={handleFileSelect}\n//                   className=\"mt-1\"\n//                 />\n//               </div>\n\n//               {selectedFile && (\n//                 <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n//                   <div className=\"flex items-center gap-2\">\n//                     <CheckCircle className=\"h-4 w-4 text-green-600\" />\n//                     <span className=\"text-green-800\">\n//                       File selected: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(1)} KB)\n//                     </span>\n//                   </div>\n//                 </div>\n//               )}\n\n//               <Button\n//                 onClick={handleImport}\n//                 disabled={!selectedFile || importMenuMutation.isPending}\n//                 className=\"w-full flex items-center gap-2\"\n//               >\n//                 <Upload className=\"h-4 w-4\" />\n//                 {importMenuMutation.isPending ? \"Importing...\" : \"Import Menu Items\"}\n//               </Button>\n\n//               {importMenuMutation.isPending && (\n//                 <div className=\"space-y-2\">\n//                   <Progress value={50} className=\"w-full\" />\n//                   <p className=\"text-sm text-gray-600 text-center\">Processing your menu items...</p>\n//                 </div>\n//               )}\n//             </CardContent>\n//           </Card>\n\n//           {/* Import Results */}\n//           {importResult && (\n//             <Card>\n//               <CardHeader>\n//                 <CardTitle className={`text-lg flex items-center gap-2 ${\n//                   importResult.success ? 'text-green-600' : 'text-orange-600'\n//                 }`}>\n//                   {importResult.success ? (\n//                     <CheckCircle className=\"h-5 w-5\" />\n//                   ) : (\n//                     <AlertCircle className=\"h-5 w-5\" />\n//                   )}\n//                   Import Results\n//                 </CardTitle>\n//               </CardHeader>\n//               <CardContent>\n//                 <div className=\"space-y-3\">\n//                   <div className=\"grid grid-cols-2 gap-4 text-sm\">\n//                     <div className=\"bg-green-50 p-3 rounded-lg\">\n//                       <div className=\"text-green-800 font-medium\">Successfully Imported</div>\n//                       <div className=\"text-2xl font-bold text-green-600\">{importResult.imported}</div>\n//                     </div>\n//                     <div className=\"bg-red-50 p-3 rounded-lg\">\n//                       <div className=\"text-red-800 font-medium\">Failed</div>\n//                       <div className=\"text-2xl font-bold text-red-600\">{importResult.failed}</div>\n//                     </div>\n//                   </div>\n\n//                   {importResult.errors && importResult.errors.length > 0 && (\n//                     <Alert variant=\"destructive\">\n//                       <AlertCircle className=\"h-4 w-4\" />\n//                       <AlertDescription>\n//                         <div className=\"font-medium mb-2\">Errors encountered:</div>\n//                         <ul className=\"ml-4 list-disc space-y-1\">\n//                           {importResult.errors.slice(0, 5).map((error, index) => (\n//                             <li key={index} className=\"text-sm\">{error}</li>\n//                           ))}\n//                           {importResult.errors.length > 5 && (\n//                             <li className=\"text-sm font-medium\">\n//                               ... and {importResult.errors.length - 5} more errors\n//                             </li>\n//                           )}\n//                         </ul>\n//                       </AlertDescription>\n//                     </Alert>\n//                   )}\n//                 </div>\n//               </CardContent>\n//             </Card>\n//           )}\n//         </div>\n\n//         <div className=\"flex justify-end gap-2 pt-4 border-t\">\n//           <Button variant=\"outline\" onClick={resetForm}>\n//             {importResult ? \"Close\" : \"Cancel\"}\n//           </Button>\n//         </div>\n//       </DialogContent>\n//     </Dialog>\n//   );\n// }\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Download, Upload, FileSpreadsheet, AlertCircle, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface BulkMenuImportProps {\n  restaurantId: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\ninterface ImportResult {\n  success: boolean;\n  message: string;\n  imported: number;\n  failed: number;\n  errors?: string[];\n}\n\nexport function BulkMenuImport({ restaurantId, isOpen, onClose, onSuccess }: BulkMenuImportProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<ImportResult | null>(null);\n  const { toast } = useToast();\n\n  const downloadTemplateMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem(\"adminToken\");\n      const response = await fetch(`/api/admin/restaurants/${restaurantId}/menu-template`, {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to download template\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `menu-template-${restaurantId}.xlsx`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template Downloaded\",\n        description: \"Excel template has been downloaded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Download Failed\",\n        description: error.message || \"Failed to download template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const importMenuMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const token = localStorage.getItem(\"adminToken\");\n      const formData = new FormData();\n      formData.append(\"menuFile\", file);\n\n      const response = await fetch(`/api/admin/restaurants/${restaurantId}/menu-import`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Import failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    },\n    onSuccess: (result: ImportResult) => {\n      setImportResult(result);\n      if (result.success) {\n        toast({\n          title: \"Import Successful\",\n          description: `Successfully imported ${result.imported} menu items`,\n        });\n        onSuccess();\n      } else {\n        toast({\n          title: \"Import Completed with Errors\",\n          description: `Imported ${result.imported} items, ${result.failed} failed`,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Import Failed\",\n        description: error.message || \"Failed to import menu items\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" || \n          file.type === \"application/vnd.ms-excel\" ||\n          file.name.endsWith('.xlsx') || \n          file.name.endsWith('.xls')) {\n        setSelectedFile(file);\n        setImportResult(null);\n      } else {\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please select an Excel file (.xlsx or .xls)\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleImport = () => {\n    if (selectedFile) {\n      importMenuMutation.mutate(selectedFile);\n    }\n  };\n\n  const resetForm = () => {\n    setSelectedFile(null);\n    setImportResult(null);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={resetForm}>\n      <DialogContent className=\"w-[95vw] max-w-5xl max-h-[90vh] overflow-hidden flex flex-col\">\n        <DialogHeader className=\"flex-shrink-0\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileSpreadsheet className=\"h-5 w-5\" />\n            Bulk Menu Import\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-y-auto pr-2 -mr-2\">\n          <div className=\"space-y-4 lg:space-y-6\">\n            {/* Step 1: Download Template */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base lg:text-lg flex items-center gap-2\">\n                  <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0\">1</span>\n                  Download Template\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <p className=\"text-gray-600 mb-3 text-sm lg:text-base\">\n                  Download the Excel template with the correct format for your restaurant's menu categories.\n                </p>\n                <Button\n                  onClick={() => downloadTemplateMutation.mutate()}\n                  disabled={downloadTemplateMutation.isPending}\n                  className=\"flex items-center gap-2 w-full sm:w-auto\"\n                  size=\"sm\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  {downloadTemplateMutation.isPending ? \"Downloading...\" : \"Download Excel Template\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Step 2: Fill Template */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base lg:text-lg flex items-center gap-2\">\n                  <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0\">2</span>\n                  Fill Template\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n                  <AlertDescription>\n                    <div className=\"space-y-2\">\n                      <strong className=\"block\">Template Format:</strong>\n                      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-2 text-xs lg:text-sm\">\n                        <div className=\"space-y-1\">\n                          <div><strong>Name:</strong> Menu item name (required)</div>\n                          <div><strong>Description:</strong> Item description (required)</div>\n                          <div><strong>Price:</strong> Price as number (required)</div>\n                          <div><strong>Category:</strong> Must match restaurant categories (required)</div>\n                        </div>\n                        <div className=\"space-y-1\">\n                          <div><strong>IsVeg:</strong> TRUE/FALSE for vegetarian (required)</div>\n                          <div><strong>Image:</strong> Image URL or filename (required)</div>\n                          <div><strong>IsAvailable:</strong> TRUE/FALSE (optional, defaults to TRUE)</div>\n                        </div>\n                      </div>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n\n            {/* Step 3: Upload File */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-base lg:text-lg flex items-center gap-2\">\n                  <span className=\"bg-blue-100 text-blue-600 rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0\">3</span>\n                  Upload Filled Template\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"pt-0 space-y-4\">\n                <div>\n                  <Label htmlFor=\"menu-file\" className=\"text-sm lg:text-base\">Select Excel File</Label>\n                  <Input\n                    id=\"menu-file\"\n                    type=\"file\"\n                    accept=\".xlsx,.xls\"\n                    onChange={handleFileSelect}\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                {selectedFile && (\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600 flex-shrink-0\" />\n                      <span className=\"text-green-800 text-sm lg:text-base break-all\">\n                        File selected: {selectedFile.name} ({(selectedFile.size / 1024).toFixed(1)} KB)\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={handleImport}\n                  disabled={!selectedFile || importMenuMutation.isPending}\n                  className=\"w-full flex items-center gap-2\"\n                  size=\"sm\"\n                >\n                  <Upload className=\"h-4 w-4\" />\n                  {importMenuMutation.isPending ? \"Importing...\" : \"Import Menu Items\"}\n                </Button>\n\n                {importMenuMutation.isPending && (\n                  <div className=\"space-y-2\">\n                    <Progress value={50} className=\"w-full\" />\n                    <p className=\"text-xs lg:text-sm text-gray-600 text-center\">Processing your menu items...</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Import Results */}\n            {importResult && (\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className={`text-base lg:text-lg flex items-center gap-2 ${\n                    importResult.success ? 'text-green-600' : 'text-orange-600'\n                  }`}>\n                    {importResult.success ? (\n                      <CheckCircle className=\"h-5 w-5 flex-shrink-0\" />\n                    ) : (\n                      <AlertCircle className=\"h-5 w-5 flex-shrink-0\" />\n                    )}\n                    Import Results\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm\">\n                      <div className=\"bg-green-50 p-3 rounded-lg\">\n                        <div className=\"text-green-800 font-medium text-xs lg:text-sm\">Successfully Imported</div>\n                        <div className=\"text-xl lg:text-2xl font-bold text-green-600\">{importResult.imported}</div>\n                      </div>\n                      <div className=\"bg-red-50 p-3 rounded-lg\">\n                        <div className=\"text-red-800 font-medium text-xs lg:text-sm\">Failed</div>\n                        <div className=\"text-xl lg:text-2xl font-bold text-red-600\">{importResult.failed}</div>\n                      </div>\n                    </div>\n\n                    {importResult.errors && importResult.errors.length > 0 && (\n                      <Alert variant=\"destructive\">\n                        <AlertCircle className=\"h-4 w-4 flex-shrink-0\" />\n                        <AlertDescription>\n                          <div className=\"font-medium mb-2 text-sm\">Errors encountered:</div>\n                          <div className=\"max-h-32 overflow-y-auto\">\n                            <ul className=\"ml-4 list-disc space-y-1\">\n                              {importResult.errors.slice(0, 10).map((error, index) => (\n                                <li key={index} className=\"text-xs lg:text-sm break-words\">{error}</li>\n                              ))}\n                              {importResult.errors.length > 10 && (\n                                <li className=\"text-xs lg:text-sm font-medium\">\n                                  ... and {importResult.errors.length - 10} more errors\n                                </li>\n                              )}\n                            </ul>\n                          </div>\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t flex-shrink-0\">\n          <Button variant=\"outline\" onClick={resetForm} size=\"sm\">\n            {importResult ? \"Close\" : \"Cancel\"}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26180},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}}}